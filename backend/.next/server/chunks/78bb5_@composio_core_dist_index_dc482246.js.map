{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/node_modules/.pnpm/%40composio%2Bcore%400.1.36-next.10/node_modules/%40composio/core/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\") return require.apply(this, arguments);\n  throw Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/composio.ts\nimport ComposioClient4 from \"@composio/client\";\n\n// src/types/tool.types.ts\nimport { z } from \"zod\";\nvar ToolkitSchema = z.object({\n  slug: z.string().describe(\"The slug of the toolkit\"),\n  name: z.string().describe(\"The name of the toolkit\"),\n  logo: z.string().describe(\"The logo of the toolkit\").optional()\n});\nvar JSONSchemaType = z.enum([\n  \"string\",\n  \"number\",\n  \"integer\",\n  \"boolean\",\n  \"object\",\n  \"array\",\n  \"null\"\n]);\nvar JSONSchemaPropertySchema = z.object({\n  type: z.union([JSONSchemaType, z.array(JSONSchemaType)]).optional(),\n  description: z.string().optional(),\n  anyOf: z.lazy(() => z.array(JSONSchemaPropertySchema)).optional(),\n  oneOf: z.lazy(() => z.array(JSONSchemaPropertySchema)).optional(),\n  allOf: z.lazy(() => z.array(JSONSchemaPropertySchema)).optional(),\n  not: z.lazy(() => JSONSchemaPropertySchema).optional(),\n  title: z.string().optional(),\n  default: z.any().optional(),\n  nullable: z.boolean().optional(),\n  properties: z.lazy(() => z.record(z.string(), JSONSchemaPropertySchema)).optional(),\n  required: z.array(z.string()).optional(),\n  file_uploadable: z.boolean().optional(),\n  file_downloadable: z.boolean().optional(),\n  items: z.lazy(() => z.union([JSONSchemaPropertySchema, z.array(JSONSchemaPropertySchema)])).optional(),\n  enum: z.array(z.any()).optional(),\n  const: z.any().optional(),\n  minimum: z.number().optional(),\n  maximum: z.number().optional(),\n  exclusiveMinimum: z.number().optional(),\n  exclusiveMaximum: z.number().optional(),\n  multipleOf: z.number().optional(),\n  minLength: z.number().optional(),\n  maxLength: z.number().optional(),\n  pattern: z.string().optional(),\n  format: z.string().optional(),\n  minItems: z.number().optional(),\n  maxItems: z.number().optional(),\n  uniqueItems: z.boolean().optional(),\n  minProperties: z.number().optional(),\n  maxProperties: z.number().optional(),\n  patternProperties: z.lazy(() => z.record(z.string(), JSONSchemaPropertySchema)).optional(),\n  additionalProperties: z.union([z.boolean(), z.lazy(() => JSONSchemaPropertySchema)]).optional(),\n  examples: z.array(z.any()).optional(),\n  readOnly: z.boolean().optional(),\n  writeOnly: z.boolean().optional(),\n  if: z.lazy(() => JSONSchemaPropertySchema).optional(),\n  then: z.lazy(() => JSONSchemaPropertySchema).optional(),\n  else: z.lazy(() => JSONSchemaPropertySchema).optional(),\n  $ref: z.string().optional(),\n  definitions: z.record(\n    z.string(),\n    z.lazy(() => JSONSchemaPropertySchema)\n  ).optional(),\n  $defs: z.record(\n    z.string(),\n    z.lazy(() => JSONSchemaPropertySchema)\n  ).optional()\n});\nvar ParametersSchema = z.object({\n  type: z.literal(\"object\"),\n  anyOf: z.array(JSONSchemaPropertySchema).optional(),\n  oneOf: z.array(JSONSchemaPropertySchema).optional(),\n  allOf: z.array(JSONSchemaPropertySchema).optional(),\n  not: JSONSchemaPropertySchema.optional(),\n  properties: z.record(z.string(), JSONSchemaPropertySchema),\n  required: z.array(z.string()).optional(),\n  title: z.string().optional(),\n  default: z.any().optional(),\n  nullable: z.boolean().optional(),\n  description: z.string().optional(),\n  additionalProperties: z.boolean().default(false).optional()\n});\nvar ToolSchema = z.object({\n  slug: z.string().describe('The slug of the tool. eg. \"GOOGLE_SEARCH\"'),\n  name: z.string().describe(`The name of the tool. eg. \"Google Search\"`),\n  description: z.string().optional().describe(\"The description of the tool\"),\n  inputParameters: ParametersSchema.optional().describe(\"The input parameters of the tool\"),\n  outputParameters: ParametersSchema.optional().describe(\"The output parameters of the tool\"),\n  tags: z.optional(z.array(z.string())).describe(\"The tags of the tool. eg: Important\").default([]),\n  toolkit: z.optional(ToolkitSchema).describe(\"The toolkit of the tool\"),\n  version: z.optional(z.string()).describe('The version of the tool, e.g. \"1.0.0\"'),\n  scopes: z.optional(z.array(z.string())).describe('The scopes of the tool. eg: [\"task:add\"]')\n});\nvar ToolListResponseSchema = z.object({\n  items: z.array(ToolSchema),\n  nextCursor: z.string().nullable().optional(),\n  totalPages: z.number()\n});\nvar ToolListParamsSchema = z.object({\n  tools: z.array(z.string()).optional(),\n  toolkits: z.array(z.string()).optional(),\n  scopes: z.array(z.string()).optional(),\n  tags: z.array(z.string()).optional(),\n  limit: z.number().optional(),\n  search: z.string().optional(),\n  authConfigIds: z.array(z.string()).optional()\n});\nvar CustomAuthParamsSchema = z.object({\n  baseURL: z.string().optional(),\n  body: z.record(z.string(), z.unknown()).optional(),\n  parameters: z.array(\n    z.object({\n      in: z.enum([\"query\", \"header\"]),\n      name: z.string(),\n      value: z.union([z.string(), z.number()])\n    })\n  )\n});\nvar ToolExecuteParamsSchema = z.object({\n  allowTracing: z.boolean().optional(),\n  connectedAccountId: z.string().optional(),\n  customAuthParams: CustomAuthParamsSchema.optional(),\n  arguments: z.record(z.string(), z.unknown()).optional(),\n  userId: z.string(),\n  version: z.string().optional(),\n  text: z.string().optional()\n});\nvar ToolExecuteResponseSchema = z.object({\n  data: z.record(z.string(), z.unknown()),\n  error: z.string().nullable(),\n  successful: z.boolean(),\n  logId: z.string().optional(),\n  sessionInfo: z.unknown().optional()\n});\nvar ToolProxyParamsSchema = z.object({\n  endpoint: z.string(),\n  method: z.enum([\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]),\n  body: z.unknown().optional(),\n  parameters: z.array(\n    z.object({\n      in: z.enum([\"query\", \"header\"]),\n      name: z.string(),\n      value: z.union([z.string(), z.number()])\n    })\n  ).optional(),\n  connectedAccountId: z.string().optional()\n});\n\n// src/models/CustomTools.ts\nimport zodToJsonSchema from \"zod-to-json-schema\";\n\n// src/utils/logger.ts\nimport chalk from \"chalk\";\n\n// src/utils/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n  CLIENT_PUSHER_KEY: () => CLIENT_PUSHER_KEY,\n  COMPOSIO_DIR: () => COMPOSIO_DIR,\n  COMPOSIO_LOG_LEVEL: () => COMPOSIO_LOG_LEVEL,\n  DEFAULT_BASE_URL: () => DEFAULT_BASE_URL,\n  IS_DEVELOPMENT_OR_CI: () => IS_DEVELOPMENT_OR_CI,\n  TELEMETRY_URL: () => TELEMETRY_URL,\n  TEMP_FILES_DIRECTORY_NAME: () => TEMP_FILES_DIRECTORY_NAME,\n  USER_DATA_FILE_NAME: () => USER_DATA_FILE_NAME\n});\n\n// src/utils/env.ts\nvar getEnvVariable = (name, defaultValue = void 0) => {\n  try {\n    return process.env[name] || defaultValue;\n  } catch (_e) {\n    return defaultValue;\n  }\n};\n\n// src/utils/constants.ts\nvar COMPOSIO_DIR = \".composio\";\nvar USER_DATA_FILE_NAME = \"user_data.json\";\nvar TEMP_FILES_DIRECTORY_NAME = \"files\";\nvar DEFAULT_BASE_URL = \"https://backend.composio.dev\";\nvar TELEMETRY_URL = \"https://app.composio.dev\";\nvar CLIENT_PUSHER_KEY = getEnvVariable(\"CLIENT_PUSHER_KEY\") || \"ff9f18c208855d77a152\";\nvar COMPOSIO_LOG_LEVEL = getEnvVariable(\"COMPOSIO_LOG_LEVEL\");\nvar IS_DEVELOPMENT_OR_CI = getEnvVariable(\"DEVELOPMENT\") || getEnvVariable(\"CI\") || false;\n\n// src/utils/logger.ts\nvar LOG_LEVELS = {\n  silent: -1,\n  // No logs\n  error: 0,\n  // Highest priority - critical errors\n  warn: 1,\n  // Warning messages\n  info: 2,\n  // General information\n  debug: 3\n  // Debug information\n};\nvar getLogLevel = () => {\n  const envLevel = (COMPOSIO_LOG_LEVEL ?? \"info\")?.toLowerCase();\n  return envLevel && envLevel in LOG_LEVELS ? envLevel : \"info\";\n};\nvar Logger = class {\n  level;\n  includeTimestamp;\n  console;\n  constructor(options = {}) {\n    this.level = options.level ?? getLogLevel();\n    this.includeTimestamp = options.includeTimestamp ?? true;\n    this.console = console;\n  }\n  formatMessage(args) {\n    const formattedArgs = args.map((arg, index) => {\n      if (typeof arg === \"object\") {\n        return JSON.stringify(arg);\n      } else {\n        if (index === 0) {\n          if (args.length > 1) {\n            return chalk.yellow(`${arg}`);\n          } else {\n            return String(arg);\n          }\n        }\n        return String(arg);\n      }\n    }).join(\"\\n\");\n    if (!this.includeTimestamp) {\n      return formattedArgs;\n    }\n    const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n    return `${chalk.gray(timestamp)} - ${formattedArgs}`;\n  }\n  shouldLog(level) {\n    return LOG_LEVELS[level] <= LOG_LEVELS[this.level];\n  }\n  error(...args) {\n    if (this.shouldLog(\"error\")) {\n      this.console.error(this.formatMessage(args));\n    }\n  }\n  warn(...args) {\n    if (this.shouldLog(\"warn\")) {\n      this.console.warn(this.formatMessage(args));\n    }\n  }\n  info(...args) {\n    if (this.shouldLog(\"info\")) {\n      this.console.info(this.formatMessage(args));\n    }\n  }\n  debug(...args) {\n    if (this.shouldLog(\"debug\")) {\n      this.console.debug(this.formatMessage(args));\n    }\n  }\n};\nvar logger = new Logger();\nvar logger_default = logger;\n\n// src/errors/ComposioError.ts\nimport chalk2 from \"chalk\";\nimport { ZodError } from \"zod\";\nimport { BadRequestError } from \"@composio/client\";\nvar ComposioError = class _ComposioError extends Error {\n  /** @readonly Error name */\n  name = \"ComposioError\";\n  code;\n  possibleFixes;\n  errorId;\n  /**\n   * Creates a new ComposioError\n   * @param message Error message\n   * @param options Additional error options\n   */\n  constructor(message, options = {}) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    const statusCode = options.statusCode || (options.cause instanceof BadRequestError ? options.cause.status : void 0);\n    this.code = `TS-SDK::${options.code}`;\n    this.possibleFixes = options.possibleFixes;\n    this.definePropertyIfExists(\"statusCode\", statusCode);\n    this.definePropertyIfExists(\"cause\", options.cause);\n    const combinedStack = options.cause instanceof Error ? _ComposioError.combineStackTraces(options.cause.stack, this.stack) : options.stack ?? this.stack;\n    this.definePropertyIfExists(\"stack\", combinedStack);\n    if (options.meta && Object.keys(options.meta).length > 0) {\n      this.definePropertyIfExists(\"meta\", options.meta);\n    }\n  }\n  /**\n   * Helper method to define a property only if it has a value\n   * @param propertyName Name of the property to define\n   * @param value Value to assign to the property\n   * @private\n   */\n  definePropertyIfExists(propertyName, value) {\n    if (value !== void 0) {\n      Object.defineProperty(this, propertyName, {\n        value,\n        enumerable: true,\n        writable: false,\n        configurable: true\n      });\n    }\n  }\n  /**\n   * Helper method to combine stack traces when wrapping errors\n   * This ensures the full call chain is preserved\n   * @param originalStack The stack of the error being wrapped\n   * @param currentStack The stack of the wrapper error\n   * @returns Combined stack trace\n   * @private\n   */\n  static combineStackTraces(originalStack, currentStack) {\n    if (!originalStack) return currentStack;\n    if (!currentStack) return originalStack;\n    const currentHeader = currentStack.split(\"\\n\")[0];\n    const originalStackBody = originalStack.split(\"\\n\").slice(1).join(\"\\n\");\n    return `${currentHeader}\n${currentStack.split(\"\\n\").slice(1).join(\"\\n\")}\n\nCaused by:\n${originalStackBody}`;\n  }\n  /**\n   * Extract and normalize error data for formatting\n   * @param includeStack Whether to include stack trace information\n   * @returns Structured error data for formatting\n   * @private\n   */\n  getErrorData(includeStack = false) {\n    const data = {\n      name: this.name,\n      message: this.message\n    };\n    const { cause, code, stack, statusCode, meta, possibleFixes } = this;\n    if (cause !== void 0) {\n      const rawCause = cause;\n      data.cause = rawCause instanceof Error ? rawCause.message : String(rawCause);\n    }\n    if (code) {\n      data.code = code;\n    }\n    if (statusCode !== void 0) {\n      data.statusCode = statusCode;\n    }\n    if (meta) {\n      data.meta = meta;\n    }\n    if (possibleFixes) {\n      data.possibleFixes = possibleFixes;\n    }\n    if (includeStack && stack) {\n      if (stack.includes(\"Caused by:\")) {\n        const [currentStack, causeStack] = stack.split(\"Caused by:\");\n        data.stack = [\n          ...currentStack.split(\"\\n\").slice(1),\n          \"Caused by:\",\n          ...causeStack.split(\"\\n\")\n        ];\n      } else {\n        data.stack = stack.split(\"\\n\").slice(1);\n      }\n    }\n    return data;\n  }\n  /**\n   * Prints a user-friendly, colorful representation of the error to the logger\n   * @param includeStack Whether to include the stack trace in the output (default: false)\n   */\n  prettyPrint(includeStack = false) {\n    const data = this.getErrorData(includeStack);\n    let output = \"\\n\" + chalk2.bgRed.white.bold(\" ERROR \") + \" \" + chalk2.white.bold(data.message) + \"\\n\";\n    if (data.code) {\n      output += chalk2.yellow(`Error Code: ${data.code}`) + \"\\n\";\n    }\n    if (data.statusCode !== void 0) {\n      output += chalk2.yellow(`Status: ${data.statusCode}`) + \"\\n\";\n    }\n    if (data.cause) {\n      output += chalk2.gray(\"Reason:\") + \"\\n\";\n      output += \"  \" + chalk2.white(data.cause) + \"\\n\";\n    }\n    if (data.meta) {\n      output += chalk2.gray(\"Additional Information:\") + \"\\n\";\n      output += \"  \" + chalk2.white(JSON.stringify(data.meta, null, 2).replace(/\\n/g, \"\\n  \")) + \"\\n\";\n    }\n    if (data.possibleFixes?.length) {\n      output += \"\\n\" + chalk2.cyan.bold(\"Try the following:\") + \"\\n\";\n      const fixes = data.possibleFixes?.map((fix, index) => ` ${index + 1}. ` + chalk2.white(fix));\n      output += fixes?.join(\"\\n\") + \"\\n\";\n    }\n    if (data.stack?.length) {\n      output += \"\\n\" + chalk2.gray(\"Stack Trace:\") + \"\\n\";\n      output += chalk2.gray(data.stack.join(\"\\n\")) + \"\\n\";\n    }\n    output += \"\\n\";\n    logger_default.error(output);\n  }\n  /**\n   * Static factory method to create and pretty print an error in one step\n   * @param message Error message\n   * @param options Error options\n   * @param includeStack Whether to include the stack trace in the output\n   * @returns The created error instance\n   */\n  static createAndPrint(message, options = {}, includeStack = false) {\n    const error = new _ComposioError(message, options);\n    error.prettyPrint(includeStack);\n    return error;\n  }\n  /**\n   * Utility function to handle errors in a consistent way\n   * This properly displays the error and exits the process if needed\n   * @param error The error to handle\n   * @param options Options for error handling\n   */\n  static handle(error, options = {}) {\n    const { includeStack = false, exitProcess = false, exitCode = 1 } = options;\n    if (error instanceof _ComposioError) {\n      error.prettyPrint(includeStack);\n    } else if (error instanceof ZodError) {\n      this.handleZodError(error, includeStack);\n    } else if (error instanceof Error) {\n      this.handleStandardError(error, includeStack);\n    } else {\n      this.handleUnknownError(error);\n    }\n    if (exitProcess && typeof process !== \"undefined\") {\n      process.exit(exitCode);\n    }\n  }\n  /**\n   * Helper method to handle Zod validation errors\n   * @param error The Zod error to handle\n   * @param includeStack Whether to include the stack trace\n   * @private\n   */\n  static handleZodError(error, includeStack) {\n    logger_default.error(\"\\n\" + chalk2.bgRed.white.bold(\" ERROR \") + \" \" + chalk2.white.bold(error.message));\n    logger_default.error(chalk2.gray(\"Invalid parameters:\"));\n    error.errors.forEach((err) => {\n      logger_default.error(chalk2.yellow(err.path.join(\".\")) + \" \" + chalk2.white(err.message));\n    });\n    logger_default.error(chalk2.gray(\"Expected parameters:\"));\n    error.errors.forEach((err) => {\n      logger_default.error(chalk2.yellow(err.path.join(\".\")) + \" \" + chalk2.white(err.message));\n    });\n    if (includeStack) {\n      logger_default.error(\"\\n\" + chalk2.gray(\"Validation Errors:\"));\n      error.errors.forEach((err) => {\n        const path = err.path.join(\".\");\n        logger_default.error(\n          chalk2.gray(\"  \\u2022 \") + chalk2.yellow(path ? `${path}: ` : \"\") + chalk2.white(err.message)\n        );\n      });\n      if (error.stack) {\n        logger_default.error(\"\\n\" + chalk2.gray(\"Stack Trace:\"));\n        const stackLines = error.stack.split(\"\\n\").slice(1);\n        logger_default.error(chalk2.gray(stackLines.join(\"\\n\")));\n      }\n    }\n    logger_default.error(\"\");\n  }\n  /**\n   * Helper method to handle standard Error objects\n   * @param error The standard error to handle\n   * @param includeStack Whether to include the stack trace\n   * @private\n   */\n  static handleStandardError(error, includeStack) {\n    logger_default.error(\"\\n\" + chalk2.bgRed.white.bold(\" ERROR \") + \" \" + chalk2.white.bold(error.message));\n    if (includeStack && error.stack) {\n      logger_default.error(\"\\n\" + chalk2.gray(\"Stack Trace:\"));\n      const stackLines = error.stack.split(\"\\n\").slice(1);\n      logger_default.error(chalk2.gray(stackLines.join(\"\\n\")));\n    }\n    logger_default.error(\"\");\n  }\n  /**\n   * Helper method to handle unknown error types\n   * @param error The unknown error value\n   * @private\n   */\n  static handleUnknownError(error) {\n    logger_default.error(\n      \"\\n\" + chalk2.bgRed.white.bold(\" ERROR \") + \" \" + chalk2.white.bold(\"Unknown error occurred\")\n    );\n    if (error !== null && error !== void 0) {\n      logger_default.error(chalk2.gray(\"Error details:\"));\n      logger_default.error(\"  \" + chalk2.white(String(error)));\n    }\n    logger_default.error(\"\");\n  }\n};\n\n// src/errors/ToolErrors.ts\nvar ToolErrorCodes = {\n  TOOLSET_NOT_DEFINED: \"TOOLSET_NOT_DEFINED\",\n  TOOL_NOT_FOUND: \"TOOL_NOT_FOUND\",\n  INVALID_MODIFIER: \"INVALID_MODIFIER\",\n  CUSTOM_TOOLS_NOT_INITIALIZED: \"CUSTOM_TOOLS_NOT_INITIALIZED\",\n  TOOL_EXECUTION_ERROR: \"TOOL_EXECUTION_ERROR\",\n  INVALID_EXECUTE_FUNCTION: \"INVALID_EXECUTE_FUNCTION\",\n  GLOBAL_EXECUTE_TOOL_FN_NOT_SET: \"GLOBAL_EXECUTE_TOOL_FN_NOT_SET\"\n};\nvar ComposioProviderNotDefinedError = class extends ComposioError {\n  constructor(message = \"Provider not defined\", options = {}) {\n    super(message, {\n      ...options,\n      code: ToolErrorCodes.TOOLSET_NOT_DEFINED,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure that the provider is defined in the Composio project and passed into the tool instance\"\n      ]\n    });\n    this.name = \"ComposioProviderNotDefinedError\";\n  }\n};\nvar ComposioToolNotFoundError = class extends ComposioError {\n  constructor(message = \"Tool not found\", options = {}) {\n    super(message, {\n      ...options,\n      code: ToolErrorCodes.TOOL_NOT_FOUND,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the tool slug is correct and exists in the Composio project\"\n      ]\n    });\n    this.name = \"ComposioToolNotFoundError\";\n  }\n};\nvar ComposioInvalidModifierError = class extends ComposioError {\n  constructor(message = \"Invalid modifier\", options = {}) {\n    super(message, {\n      ...options,\n      code: ToolErrorCodes.INVALID_MODIFIER,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the modifier is a function and returns a valid result\"\n      ]\n    });\n    this.name = \"ComposioInvalidModifierError\";\n  }\n};\nvar ComposioCustomToolsNotInitializedError = class extends ComposioError {\n  constructor(message = \"Custom tools not initialized\", options = {}) {\n    super(message, {\n      ...options,\n      code: ToolErrorCodes.CUSTOM_TOOLS_NOT_INITIALIZED,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the custom tools class is initialized in the Tools instance\"\n      ]\n    });\n    this.name = \"ComposioCustomToolsNotInitializedError\";\n  }\n};\nvar ComposioToolExecutionError = class extends ComposioError {\n  error;\n  constructor(message = \"Tool execution error\", options = {}) {\n    const { originalError, ...restOptions } = options;\n    super(message, {\n      ...restOptions,\n      code: options.code || ToolErrorCodes.TOOL_EXECUTION_ERROR,\n      cause: options.cause || originalError,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the tool is correctly configured and the input is valid\"\n      ]\n    });\n    this.error = originalError || (options.cause instanceof Error ? options.cause : options.cause ? new Error(String(options.cause)) : new Error(\"Unknown error\"));\n    this.name = \"ComposioToolExecutionError\";\n  }\n};\nvar ComposioInvalidExecuteFunctionError = class extends ComposioError {\n  constructor(message = \"Invalid execute function\", options = {}) {\n    super(message, {\n      ...options,\n      code: ToolErrorCodes.INVALID_EXECUTE_FUNCTION,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the execute function is a valid function and returns a valid result\"\n      ]\n    });\n    this.name = \"ComposioInvalidExecuteFunctionError\";\n  }\n};\nvar ComposioGlobalExecuteToolFnNotSetError = class extends ComposioError {\n  constructor(message = \"Global execute tool function not set\", options = {}) {\n    super(message, {\n      ...options,\n      code: ToolErrorCodes.GLOBAL_EXECUTE_TOOL_FN_NOT_SET,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the global execute tool function is set in the provider\"\n      ]\n    });\n    this.name = \"ComposioGlobalExecuteToolFnNotSetError\";\n  }\n};\n\n// src/errors/ConnectedAccountsErrors.ts\nvar ConnectedAccountErrorCodes = {\n  CONNECTED_ACCOUNT_NOT_FOUND: \"CONNECTED_ACCOUNT_NOT_FOUND\",\n  MULTIPLE_CONNECTED_ACCOUNTS: \"MULTIPLE_CONNECTED_ACCOUNTS\"\n};\nvar ComposioConnectedAccountNotFoundError = class extends ComposioError {\n  constructor(message = \"Connected account not found\", options = {}) {\n    super(message, {\n      ...options,\n      code: ConnectedAccountErrorCodes.CONNECTED_ACCOUNT_NOT_FOUND,\n      statusCode: 404,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the connected account exists and is active in your Composio dashboard\"\n      ]\n    });\n    this.name = \"ComposioConnectedAccountNotFoundError\";\n  }\n};\nvar ComposioMultipleConnectedAccountsError = class extends ComposioError {\n  constructor(message = \"Multiple connected accounts found\") {\n    super(message, {\n      code: ConnectedAccountErrorCodes.MULTIPLE_CONNECTED_ACCOUNTS,\n      possibleFixes: [\n        \"Use the allowMultiple flag to allow multiple connected accounts per user for an auth config\"\n      ]\n    });\n    this.name = \"ComposioMultipleConnectedAccountsError\";\n  }\n};\n\n// src/telemetry/Telemetry.ts\nimport { ComposioError as ComposioClientError } from \"@composio/client\";\n\n// src/types/telemetry.types.ts\nvar TELEMETRY_EVENTS = {\n  SDK_INITIALIZED: \"SDK_INITIALIZED\",\n  SDK_METHOD_INVOKED: \"SDK_METHOD_INVOKED\",\n  SDK_METHOD_ERROR: \"SDK_METHOD_ERROR\",\n  CLI_INVOKED: \"CLI_INVOKED\"\n};\n\n// src/telemetry/BatchProcessor.ts\nvar BatchProcessor = class {\n  batch = [];\n  time;\n  batchSize;\n  processBatchCallback;\n  timer = null;\n  constructor(time = 2e3, batchSize = 100, processBatchCallback) {\n    this.batch = [];\n    this.time = time;\n    this.batchSize = batchSize;\n    this.processBatchCallback = processBatchCallback;\n  }\n  pushItem(item) {\n    this.batch.push(item);\n    if (this.batch.length >= this.batchSize) {\n      this.processBatch();\n    } else if (!this.timer) {\n      this.timer = setTimeout(() => this.processBatch(), this.time);\n    }\n  }\n  processBatch() {\n    if (this.batch.length > 0) {\n      this.processBatchCallback(this.batch);\n      this.batch = [];\n    }\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n};\n\n// src/utils/uuid.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction getRandomUUID() {\n  return uuidv4();\n}\n\n// src/services/telemetry/TelemetryService.ts\nvar TELEMETRY_URL2 = \"https://telemetry.composio.dev/v1\";\nvar TelemetryService = class {\n  /**\n   * Sends a metric to the Telemetry API.\n   * @param payload - The payload to send to the Telemetry API.\n   * @returns The response from the Telemetry API.\n   */\n  static async sendMetric(payload) {\n    try {\n      const result = await fetch(`${TELEMETRY_URL2}/metrics/invocations`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return result;\n    } catch (error) {\n      logger_default.debug(\"Error sending metric telemetry\", error);\n    }\n  }\n  /**\n   * Sends an error log to the Telemetry API.\n   * @param payload - The payload to send to the Telemetry API.\n   * @returns The response from the Telemetry API.\n   */\n  static async sendErrorLog(payload) {\n    try {\n      const result = await fetch(`${TELEMETRY_URL2}/errors`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return result;\n    } catch (error) {\n      logger_default.debug(\"Error sending error telemetry\", error);\n    }\n  }\n};\n\n// src/telemetry/Telemetry.ts\nvar TelemetryTransport = class {\n  telemetryMetadata;\n  isTelemetryDisabled = true;\n  telemetrySource;\n  telemetrySourceName = \"typescript-sdk\";\n  telemetryServiceName = \"sdk\";\n  telemetryLanguage = \"typescript\";\n  batchProcessor = new BatchProcessor(200, 10, async (data) => {\n    logger_default.debug(\"Sending batch of telemetry metrics\", data);\n    await TelemetryService.sendMetric(data);\n  });\n  setup(metadata) {\n    this.telemetryMetadata = metadata;\n    this.isTelemetryDisabled = false;\n    this.telemetrySource = {\n      host: this.telemetryMetadata?.host ?? this.telemetrySourceName,\n      service: this.telemetryServiceName,\n      language: this.telemetryLanguage,\n      version: this.telemetryMetadata?.version,\n      platform: this.telemetryMetadata?.isBrowser ? \"browser\" : \"node\",\n      environment: getEnvVariable(\"NODE_ENV\", \"production\")\n    };\n    this.sendMetric([\n      {\n        functionName: TELEMETRY_EVENTS.SDK_INITIALIZED,\n        durationMs: 0,\n        timestamp: Date.now() / 1e3,\n        props: {},\n        source: this.telemetrySource,\n        metadata: {\n          provider: this.telemetryMetadata?.provider ?? \"openai\"\n        },\n        error: void 0\n      }\n    ]);\n  }\n  /**\n   * Instrument the telemetry for the given instance.\n   *\n   * You can pass the instance and the file name of the instance to instrument the telemetry.\n   * This will instrument all the methods of the instance and log the telemetry for each method call.\n   * @param instance - any instance that extends InstrumentedInstance\n   * @param fileName - the file name of the instance\n   * @returns\n   */\n  instrument(instance, fileName) {\n    const proto = Object.getPrototypeOf(instance);\n    const methodNames = Object.getOwnPropertyNames(proto).filter((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n      return key !== \"constructor\" && descriptor && typeof descriptor.value === \"function\" && descriptor.value.constructor.name === \"AsyncFunction\";\n    });\n    const instrumentedClassName = (instance.constructor?.name || fileName) ?? \"unknown\";\n    for (const name of methodNames) {\n      const originalMethod = instance[name];\n      instance[name] = async (...args) => {\n        const telemetryPayload = {\n          functionName: `${instrumentedClassName}.${name}`,\n          durationMs: 0,\n          timestamp: Date.now() / 1e3,\n          props: {\n            fileName: instrumentedClassName,\n            method: name,\n            params: args\n          },\n          metadata: {\n            provider: this.telemetryMetadata?.provider ?? \"openai\"\n          },\n          error: void 0,\n          source: this.telemetrySource\n        };\n        this.batchProcessor.pushItem(telemetryPayload);\n        try {\n          return await originalMethod.apply(instance, args);\n        } catch (error) {\n          if (error instanceof Error) {\n            if (!error.errorId) {\n              error.errorId = getRandomUUID();\n              await this.prepareAndSendErrorTelemetry(error, instrumentedClassName, name, args);\n            }\n          }\n          throw error;\n        }\n      };\n    }\n    return instance;\n  }\n  /**\n   * Check if the telemetry should be sent.\n   * @returns true if the telemetry should be sent, false otherwise\n   */\n  shouldSendTelemetry() {\n    const telemetryDisabledEnvironments = [\"test\", \"ci\"];\n    const nodeEnv = (getEnvVariable(\"NODE_ENV\", \"development\") || \"\").toLowerCase();\n    const isDisabledEnvironment = telemetryDisabledEnvironments.includes(nodeEnv);\n    const isTelemetryDisabledByEnv = getEnvVariable(\"TELEMETRY_DISABLED\", \"false\") === \"true\";\n    return !this.isTelemetryDisabled && !isTelemetryDisabledByEnv && !isDisabledEnvironment;\n  }\n  /**\n   * Prepare and send the error telemetry.\n   *\n   * @TODO This currently blocks the thread and sends the telemetry to the server.\n   *\n   * @param {unknown} error - The error to send.\n   * @param {string} instrumentedClassName - The class name of the instrumented class.\n   * @param {string} name - The name of the method that threw the error.\n   */\n  async prepareAndSendErrorTelemetry(error, instrumentedClassName, name, args) {\n    const telemetryPayload = {\n      functionName: `${instrumentedClassName}.${name}`,\n      durationMs: 0,\n      timestamp: Date.now() / 1e3,\n      props: {\n        fileName: instrumentedClassName,\n        method: name,\n        params: args\n      },\n      metadata: {\n        provider: this.telemetryMetadata?.provider ?? \"openai\"\n      },\n      source: this.telemetrySource\n    };\n    if (error instanceof ComposioClientError) {\n      telemetryPayload.error = {\n        errorId: error.errorId,\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      };\n    } else if (error instanceof ComposioError) {\n      telemetryPayload.error = {\n        errorId: error.errorId,\n        name: error.name,\n        code: error.code,\n        message: error.message,\n        stack: error.stack\n      };\n    } else if (error instanceof Error) {\n      telemetryPayload.error = {\n        errorId: error.errorId,\n        name: error.name ?? \"Unknown error\",\n        message: error.message,\n        stack: error.stack\n      };\n    }\n    await this.sendErrorTelemetry(telemetryPayload);\n  }\n  /**\n   * Send the telemetry payload to the server.\n   * @param payload - the telemetry payload to send\n   * @returns\n   */\n  async sendMetric(payload) {\n    if (!this.shouldSendTelemetry()) {\n      logger_default.debug(\"Telemetry is disabled, skipping metric telemetry\", payload);\n      return;\n    }\n    try {\n      logger_default.debug(\"SDK Metric\", payload);\n      await TelemetryService.sendMetric(payload);\n    } catch (error) {\n      logger_default.error(\"Error sending metric telemetry\", error);\n    }\n  }\n  // @TODO: check if this will send the error telemetry to the server\n  async sendErrorTelemetry(payload) {\n    if (!this.shouldSendTelemetry()) {\n      logger_default.debug(\"Telemetry is disabled, skipping metric telemetry\", payload);\n      return;\n    }\n    try {\n      logger_default.debug(\"SDK Error Telemetry\", payload);\n      await TelemetryService.sendErrorLog(payload);\n    } catch (error) {\n      logger_default.error(\"Error sending error telemetry\", error);\n    }\n  }\n};\nvar telemetry = new TelemetryTransport();\n\n// src/errors/AuthConfigErrors.ts\nvar AuthConfigErrorCodes = {\n  AUTH_CONFIG_NOT_FOUND: \"AUTH_CONFIG_NOT_FOUND\"\n};\nvar ComposioAuthConfigNotFoundError = class extends ComposioError {\n  constructor(message = \"Auth config not found\", options = {}) {\n    super(message, {\n      ...options,\n      code: AuthConfigErrorCodes.AUTH_CONFIG_NOT_FOUND,\n      possibleFixes: options.possibleFixes || [\n        \"Check if the auth config exists\",\n        \"Check if the auth config id is correct\",\n        \"Check if the auth config is enabled\"\n      ]\n    });\n    this.name = \"ComposioAuthConfigNotFoundError\";\n  }\n};\n\n// src/errors/ConnectionRequestErrors.ts\nvar ConnectionRequestErrorCodes = {\n  CONNECTION_REQUEST_TIMEOUT: \"CONNECTION_REQUEST_TIMEOUT\",\n  CONNECTION_REQUEST_FAILED: \"CONNECTION_REQUEST_FAILED\"\n};\nvar ConnectionRequestTimeoutError = class extends ComposioError {\n  constructor(message = \"Connection request timed out\", options = {}) {\n    super(message, {\n      ...options,\n      code: ConnectionRequestErrorCodes.CONNECTION_REQUEST_TIMEOUT\n    });\n    this.name = \"ConnectionRequestTimeoutError\";\n  }\n};\nvar ConnectionRequestFailedError = class extends ComposioError {\n  constructor(message = \"Connection request failed\", options = {}) {\n    super(message, {\n      ...options,\n      code: ConnectionRequestErrorCodes.CONNECTION_REQUEST_FAILED\n    });\n    this.name = \"ConnectionRequestFailedError\";\n  }\n};\n\n// src/errors/ToolkitErrors.ts\nvar ToolkitErrorCodes = {\n  TOOLKIT_NOT_FOUND: \"TOOLKIT_NOT_FOUND\"\n};\nvar ComposioToolkitNotFoundError = class extends ComposioError {\n  constructor(message = \"Toolkit not found\", options = {}) {\n    super(message, {\n      ...options,\n      code: \"TOOLKIT_NOT_FOUND\",\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the toolkit is correctly configured and the slug is valid\"\n      ]\n    });\n    this.name = \"ComposioToolkitNotFoundError\";\n  }\n};\nvar ComposioToolkitFetchError = class extends ComposioError {\n  constructor(message = \"Failed to fetch toolkit\", options = {}) {\n    super(message, {\n      ...options,\n      code: \"TOOLKIT_FETCH_ERROR\",\n      possibleFixes: options.possibleFixes || [\n        \"Ensure the toolkit slug is valid\",\n        \"Ensure you are using the correct API key\",\n        \"Ensure you are using the correct API endpoint / Base URL and it is working\"\n      ]\n    });\n    this.name = \"ComposioToolkitFetchError\";\n  }\n};\n\n// src/errors/ValidationErrors.ts\nimport { ZodError as ZodError2 } from \"zod\";\nvar ValidationErrorCodes = {\n  VALIDATION_ERROR: \"VALIDATION_ERROR\",\n  JSON_SCHEMA_TO_ZOD_ERROR: \"JSON_SCHEMA_TO_ZOD_ERROR\"\n};\nvar ValidationError = class extends ComposioError {\n  constructor(message = \"Input validation failed\", options = {}) {\n    const { cause: providedZodError, ...restOptions } = options;\n    let zodErrorInstance;\n    if (providedZodError instanceof ZodError2) {\n      zodErrorInstance = providedZodError;\n    } else {\n      zodErrorInstance = new ZodError2([\n        {\n          path: [],\n          message: \"Invalid input\",\n          code: \"custom\"\n        }\n      ]);\n    }\n    const issues = zodErrorInstance.issues.map(\n      (issue) => `[${issue.code}] ${issue.path.join(\".\")} - ${issue.message}`\n    );\n    super(message, {\n      ...restOptions,\n      code: options.code || ValidationErrorCodes.VALIDATION_ERROR,\n      possibleFixes: issues,\n      cause: zodErrorInstance\n    });\n    this.name = \"ValidationError\";\n    const userFriendlyMessage = this.generateUserFriendlyMessage();\n    this.message = `${message}: ${userFriendlyMessage}`;\n  }\n  generateUserFriendlyMessage() {\n    if (this.cause instanceof ZodError2 && this.cause.issues.length > 0) {\n      const issue = this.cause.issues[0];\n      const path = issue.path.join(\".\");\n      const param = path || \"parameter\";\n      if (issue.code === \"invalid_type\") {\n        return `The ${param} should be a ${issue.expected}, but you provided a ${issue.received}`;\n      }\n      return issue.message;\n    }\n    return \"Please check your input parameters\";\n  }\n};\nvar JsonSchemaToZodError = class extends ComposioError {\n  constructor(message = \"Failed to convert JSON schema to Zod schema\", options = {}) {\n    super(message, {\n      ...options,\n      code: options.code || ValidationErrorCodes.JSON_SCHEMA_TO_ZOD_ERROR\n    });\n  }\n};\n\n// src/errors/SDKErrors.ts\nvar SDKErrorCodes = {\n  NO_API_KEY_PROVIDED: \"NO_API_KEY_PROVIDED\"\n};\nvar ComposioNoAPIKeyError = class extends ComposioError {\n  constructor(message = \"No Composio API key provided\", options = {}) {\n    const defaultCause = \"Couldn't find an API key in the params, environment variables or in the user config file\";\n    super(message, {\n      ...options,\n      code: \"NO_API_KEY\",\n      cause: options.cause || defaultCause,\n      possibleFixes: options.possibleFixes || [\n        \"Ensure you have an API key passed in the params, or in environment variable (COMPOSIO_API_KEY) or in the user config file\",\n        \"To get an API key, please sign up at https://composio.dev/signup\",\n        \"You can also use the Composio CLI to create a project and get an API key\"\n      ],\n      statusCode: 401\n    });\n    this.name = \"ComposioNoAPIKeyError\";\n  }\n};\n\n// src/types/connectedAccounts.types.ts\nimport { z as z4 } from \"zod\";\n\n// src/types/connectedAccountAuthStates.types.ts\nimport { z as z3 } from \"zod\";\n\n// src/types/authConfigs.types.ts\nimport { z as z2 } from \"zod\";\nvar AuthConfigTypes = {\n  CUSTOM: \"use_custom_auth\",\n  COMPOSIO_MANAGED: \"use_composio_managed_auth\"\n};\nvar AuthSchemeTypes = {\n  OAUTH1: \"OAUTH1\",\n  OAUTH2: \"OAUTH2\",\n  API_KEY: \"API_KEY\",\n  BASIC: \"BASIC\",\n  BEARER_TOKEN: \"BEARER_TOKEN\",\n  BILLCOM_AUTH: \"BILLCOM_AUTH\",\n  GOOGLE_SERVICE_ACCOUNT: \"GOOGLE_SERVICE_ACCOUNT\",\n  NO_AUTH: \"NO_AUTH\",\n  BASIC_WITH_JWT: \"BASIC_WITH_JWT\",\n  COMPOSIO_LINK: \"COMPOSIO_LINK\",\n  CALCOM_AUTH: \"CALCOM_AUTH\"\n};\nvar AuthSchemeEnum = z2.enum([\n  \"OAUTH2\",\n  \"OAUTH1\",\n  \"API_KEY\",\n  \"BASIC\",\n  \"BILLCOM_AUTH\",\n  \"BEARER_TOKEN\",\n  \"GOOGLE_SERVICE_ACCOUNT\",\n  \"NO_AUTH\",\n  \"BASIC_WITH_JWT\",\n  \"COMPOSIO_LINK\",\n  \"CALCOM_AUTH\"\n]);\nvar CreateCustomAuthConfigParamsSchema = z2.object({\n  type: z2.literal(\"use_custom_auth\"),\n  name: z2.string().optional(),\n  credentials: z2.record(z2.string(), z2.union([z2.string(), z2.number(), z2.boolean()])),\n  authScheme: AuthSchemeEnum,\n  restrictToFollowingTools: z2.array(z2.string()).optional()\n});\nvar CreateComposioManagedAuthConfigParamsSchema = z2.object({\n  type: z2.literal(\"use_composio_managed_auth\"),\n  name: z2.string().optional(),\n  credentials: z2.record(z2.string(), z2.union([z2.string(), z2.number(), z2.boolean()])).optional(),\n  restrictToFollowingTools: z2.array(z2.string()).optional()\n});\nvar CreateAuthConfigParamsSchema = z2.discriminatedUnion(\"type\", [\n  CreateCustomAuthConfigParamsSchema,\n  CreateComposioManagedAuthConfigParamsSchema\n]);\nvar CreateAuthConfigResponseSchema = z2.object({\n  id: z2.string(),\n  authScheme: z2.string(),\n  isComposioManaged: z2.boolean(),\n  toolkit: z2.string()\n});\nvar AuthConfigRetrieveResponseSchema = z2.object({\n  id: z2.string(),\n  name: z2.string(),\n  toolkit: z2.object({\n    logo: z2.string(),\n    slug: z2.string()\n  }),\n  noOfConnections: z2.number(),\n  status: z2.enum([\"ENABLED\", \"DISABLED\"]),\n  uuid: z2.string(),\n  authScheme: AuthSchemeEnum.optional(),\n  credentials: z2.record(z2.string(), z2.unknown()).optional(),\n  expectedInputFields: z2.array(z2.unknown()).optional(),\n  restrictToFollowingTools: z2.array(z2.string()).optional(),\n  isComposioManaged: z2.boolean().optional(),\n  createdBy: z2.string().optional(),\n  createdAt: z2.string().optional(),\n  lastUpdatedAt: z2.string().optional()\n});\nvar AuthConfigListParamsSchema = z2.object({\n  cursor: z2.string().optional(),\n  isComposioManaged: z2.boolean().optional(),\n  limit: z2.number().optional(),\n  toolkit: z2.string().optional()\n});\nvar AuthConfigListResponseSchema = z2.object({\n  items: z2.array(AuthConfigRetrieveResponseSchema),\n  nextCursor: z2.string().nullable(),\n  totalPages: z2.number()\n});\nvar AuthCustomConfigUpdateParamsSchema = z2.object({\n  credentials: z2.record(z2.string(), z2.union([z2.string(), z2.unknown()])),\n  type: z2.literal(\"custom\"),\n  restrictToFollowingTools: z2.array(z2.string()).optional()\n});\nvar AuthDefaultConfigUpdateParamsSchema = z2.object({\n  scopes: z2.string(),\n  type: z2.literal(\"default\"),\n  restrictToFollowingTools: z2.array(z2.string()).optional()\n});\nvar AuthConfigUpdateParamsSchema = z2.discriminatedUnion(\"type\", [\n  AuthCustomConfigUpdateParamsSchema,\n  AuthDefaultConfigUpdateParamsSchema\n]);\n\n// src/types/connectedAccountAuthStates.types.ts\nvar ConnectionStatuses = {\n  INITIALIZING: \"INITIALIZING\",\n  INITIATED: \"INITIATED\",\n  ACTIVE: \"ACTIVE\",\n  FAILED: \"FAILED\",\n  EXPIRED: \"EXPIRED\",\n  INACTIVE: \"INACTIVE\"\n};\nvar RedirectableAuthSchemeSchema = z3.enum([\n  AuthSchemeTypes.OAUTH1,\n  AuthSchemeTypes.OAUTH2,\n  AuthSchemeTypes.COMPOSIO_LINK\n]);\nvar BaseSchemeRaw = z3.object({\n  // for posthog, freshdesk, zendesk, clickup and others\n  subdomain: z3.string().optional(),\n  // for atlassian\n  [\"your-domain\"]: z3.string().optional(),\n  // for mixpanel\n  region: z3.string().optional(),\n  // for shopify\n  shop: z3.string().optional(),\n  // for snowflake\n  account_url: z3.string().optional(),\n  // likely pipedrive\n  COMPANYDOMAIN: z3.string().optional(),\n  // likely zoho\n  extension: z3.string().optional(),\n  // likely formsite\n  form_api_base_url: z3.string().optional(),\n  // likely salesforce\n  instanceEndpoint: z3.string().optional(),\n  // likely active campaign\n  api_url: z3.string().optional(),\n  // for borneo\n  borneo_dashboard_url: z3.string().optional(),\n  // for zenrows proxy\n  proxy_username: z3.string().optional(),\n  proxy_password: z3.string().optional(),\n  // for d2l\n  domain: z3.string().optional(),\n  version: z3.string().optional(),\n  // for mailchimp\n  dc: z3.string().optional(),\n  // for sharepoint\n  site_name: z3.string().optional(),\n  // for servicenow\n  instanceName: z3.string().optional(),\n  // for netsuite\n  account_id: z3.string().optional(),\n  // for custom servers\n  your_server: z3.string().optional(),\n  // for ragic\n  server_location: z3.string().optional(),\n  // base_url only\n  base_url: z3.string().optional(),\n  // for api key\n  api_key: z3.string().optional(),\n  // for generic api key\n  generic_api_key: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth2InitiatingConnectionDataSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.INITIALIZING)\n}).catchall(z3.unknown());\nvar Oauth2InitiatedConnectionDataSchema = Oauth2InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.INITIATED),\n  code_verifier: z3.string().optional(),\n  redirectUrl: z3.string(),\n  callback_url: z3.string().optional(),\n  finalRedirectUri: z3.string().optional(),\n  // previously verification_token, will be sent as verification_token to slack\n  webhook_signature: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth2ActiveConnectionDataSchema = Oauth2InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  access_token: z3.string().optional(),\n  id_token: z3.string().optional(),\n  token_type: z3.string().optional(),\n  refresh_token: z3.string().optional(),\n  expires_in: z3.union([z3.string(), z3.number(), z3.null()]).optional(),\n  scope: z3.union([z3.string(), z3.array(z3.string())]).optional(),\n  // previously verification_token, will be sent as verification_token to slack\n  webhook_signature: z3.string().optional(),\n  authed_user: z3.object({\n    access_token: z3.string().optional(),\n    scope: z3.string().optional()\n  }).optional().describe(\"for slack user scopes\")\n}).catchall(z3.unknown());\nvar Oauth2FailedConnectionDataSchema = Oauth2InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.FAILED),\n  error: z3.string().optional(),\n  error_description: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth2ExpiredConnectionDataSchema = Oauth2InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.EXPIRED),\n  expired_at: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth2InactiveConnectionDataSchema = Oauth2InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.INACTIVE)\n}).catchall(z3.unknown());\nvar Oauth2ConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  Oauth2InitiatingConnectionDataSchema,\n  Oauth2InitiatedConnectionDataSchema,\n  Oauth2ActiveConnectionDataSchema,\n  Oauth2FailedConnectionDataSchema,\n  Oauth2ExpiredConnectionDataSchema,\n  Oauth2InactiveConnectionDataSchema\n]);\nvar Oauth1InitiatingConnectionDataSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.INITIALIZING)\n}).catchall(z3.unknown());\nvar Oauth1InitiatedConnectionDataSchema = Oauth1InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.INITIATED),\n  oauth_token: z3.string().optional(),\n  authUri: z3.string().optional(),\n  oauth_token_secret: z3.string().optional(),\n  redirectUrl: z3.string().optional(),\n  callbackUrl: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth1ActiveConnectionDataSchema = Oauth1InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  oauth_token: z3.string().optional(),\n  consumer_key: z3.string().optional(),\n  redirectUrl: z3.string().optional(),\n  callback_url: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth1FailedConnectionDataSchema = Oauth1InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.FAILED),\n  error: z3.string().optional(),\n  error_description: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth1ExpiredConnectionDataSchema = Oauth1InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.EXPIRED),\n  expired_at: z3.string().optional()\n}).catchall(z3.unknown());\nvar Oauth1InactiveConnectionDataSchema = Oauth1InitiatingConnectionDataSchema.extend({\n  status: z3.literal(ConnectionStatuses.INACTIVE)\n}).catchall(z3.unknown());\nvar Oauth1ConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  Oauth1InitiatingConnectionDataSchema,\n  Oauth1InitiatedConnectionDataSchema,\n  Oauth1ActiveConnectionDataSchema,\n  Oauth1FailedConnectionDataSchema,\n  Oauth1ExpiredConnectionDataSchema,\n  Oauth1InactiveConnectionDataSchema\n]);\nvar ComposioLinkInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.INITIALIZING)\n}).catchall(z3.unknown());\nvar ComposioLinkConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  ComposioLinkInitiatingSchema,\n  ComposioLinkInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INITIATED),\n    redirectUrl: z3.string()\n  }).catchall(z3.unknown()),\n  ComposioLinkInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.ACTIVE)\n  }).catchall(z3.unknown()),\n  ComposioLinkInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  ComposioLinkInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown()),\n  ComposioLinkInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown())\n]);\nvar BillcomAuthInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.INITIALIZING)\n}).catchall(z3.unknown());\nvar BillcomAuthConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  BillcomAuthInitiatingSchema,\n  BillcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INITIATED),\n    redirectUrl: z3.string()\n  }).catchall(z3.unknown()),\n  BillcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.ACTIVE),\n    sessionId: z3.string(),\n    devKey: z3.string()\n  }).catchall(z3.unknown()),\n  BillcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  BillcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown()),\n  BillcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown())\n]);\nvar BasicInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  username: z3.string(),\n  password: z3.string()\n}).catchall(z3.unknown());\nvar BasicConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  BasicInitiatingSchema,\n  BasicInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  BasicInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  BasicInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar ApiKeyInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  api_key: z3.string().optional(),\n  generic_api_key: z3.string().optional()\n}).catchall(z3.unknown());\nvar ApiKeyConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  ApiKeyInitiatingSchema,\n  ApiKeyInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  ApiKeyInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  ApiKeyInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar BearerTokenInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  token: z3.string()\n}).catchall(z3.unknown());\nvar BearerTokenConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  BearerTokenInitiatingSchema,\n  BearerTokenInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  BearerTokenInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  BearerTokenInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar GoogleServiceAccountInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  credentials_json: z3.string()\n}).catchall(z3.unknown());\nvar GoogleServiceAccountConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  GoogleServiceAccountInitiatingSchema,\n  GoogleServiceAccountInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  GoogleServiceAccountInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  GoogleServiceAccountInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar NoAuthInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE)\n}).catchall(z3.unknown());\nvar NoAuthConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  NoAuthInitiatingSchema,\n  NoAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  NoAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  NoAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar CalcomAuthInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE)\n}).catchall(z3.unknown());\nvar CalcomAuthConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  CalcomAuthInitiatingSchema,\n  CalcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  CalcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  CalcomAuthInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar BasicWithJwtInitiatingSchema = BaseSchemeRaw.extend({\n  status: z3.literal(ConnectionStatuses.ACTIVE),\n  username: z3.string(),\n  password: z3.string()\n}).catchall(z3.unknown());\nvar BasicWithJwtConnectionDataSchema = z3.discriminatedUnion(\"status\", [\n  BasicWithJwtInitiatingSchema,\n  BasicWithJwtInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.INACTIVE)\n  }).catchall(z3.unknown()),\n  BasicWithJwtInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.FAILED),\n    error: z3.string().optional(),\n    error_description: z3.string().optional()\n  }).catchall(z3.unknown()),\n  BasicWithJwtInitiatingSchema.extend({\n    status: z3.literal(ConnectionStatuses.EXPIRED),\n    expired_at: z3.string().optional()\n  }).catchall(z3.unknown())\n]);\nvar ConnectionDataSchema = z3.discriminatedUnion(\"authScheme\", [\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.OAUTH1),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: Oauth1ConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.OAUTH2),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: Oauth2ConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.COMPOSIO_LINK),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: ComposioLinkConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.API_KEY),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: ApiKeyConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.BASIC),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: BasicConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.BEARER_TOKEN),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: BearerTokenConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.GOOGLE_SERVICE_ACCOUNT),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: GoogleServiceAccountConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.NO_AUTH),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: NoAuthConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.CALCOM_AUTH),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: CalcomAuthConnectionDataSchema\n  }),\n  // z.object({\n  //   authScheme: z.literal(AuthSchemeTypes.SNOWFLAKE),\n  //   /**\n  //    * the main connection data discriminated by auth scheme\n  //    */\n  //   val: SnowflakeConnectionDataSchema,\n  // }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.BILLCOM_AUTH),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: BillcomAuthConnectionDataSchema\n  }),\n  z3.object({\n    authScheme: z3.literal(AuthSchemeTypes.BASIC_WITH_JWT),\n    /**\n     * the main connection data discriminated by auth scheme\n     */\n    val: BasicWithJwtConnectionDataSchema\n  })\n]);\n\n// src/types/connectedAccounts.types.ts\nvar ConnectedAccountStatuses = {\n  INITIALIZING: \"INITIALIZING\",\n  INITIATED: \"INITIATED\",\n  ACTIVE: \"ACTIVE\",\n  FAILED: \"FAILED\",\n  EXPIRED: \"EXPIRED\",\n  INACTIVE: \"INACTIVE\"\n};\nvar ConnectedAccountStatusSchema = z4.enum([\n  ConnectedAccountStatuses.INITIALIZING,\n  ConnectedAccountStatuses.INITIATED,\n  ConnectedAccountStatuses.ACTIVE,\n  ConnectedAccountStatuses.FAILED,\n  ConnectedAccountStatuses.EXPIRED,\n  ConnectedAccountStatuses.INACTIVE\n]);\nvar CreateConnectedAccountParamsSchema = z4.object({\n  authConfig: z4.object({\n    id: z4.string()\n  }),\n  connection: z4.object({\n    data: z4.record(z4.string(), z4.unknown()).optional(),\n    callbackUrl: z4.string().optional(),\n    userId: z4.string().optional()\n  })\n});\nvar DefaultCreateConnectedAccountParamsSchema = z4.object({\n  auth_config: z4.object({\n    id: z4.string()\n  }),\n  connection: z4.object({\n    state: ConnectionDataSchema.optional(),\n    data: z4.record(z4.string(), z4.unknown()).optional(),\n    callback_url: z4.string().optional(),\n    user_id: z4.string().optional()\n  })\n});\nvar CreateConnectedAccountOptionsSchema = z4.object({\n  allowMultiple: z4.boolean().optional(),\n  callbackUrl: z4.string().optional(),\n  config: ConnectionDataSchema.optional()\n});\nvar CreateConnectedAccountResponseSchema = z4.object({\n  id: z4.string(),\n  status: ConnectedAccountStatusSchema,\n  redirectUrl: z4.string().nullable()\n});\nvar ConnectedAccountAuthConfigSchema = z4.object({\n  id: z4.string(),\n  isComposioManaged: z4.boolean(),\n  isDisabled: z4.boolean()\n});\nvar ConnectedAccountRetrieveResponseSchema = z4.object({\n  id: z4.string(),\n  authConfig: ConnectedAccountAuthConfigSchema,\n  data: z4.record(z4.string(), z4.unknown()).optional(),\n  params: z4.record(z4.string(), z4.unknown()).optional(),\n  status: ConnectedAccountStatusSchema,\n  statusReason: z4.string().nullable(),\n  toolkit: z4.object({\n    slug: z4.string()\n  }),\n  state: ConnectionDataSchema.optional(),\n  testRequestEndpoint: z4.string().optional(),\n  isDisabled: z4.boolean(),\n  createdAt: z4.string(),\n  updatedAt: z4.string()\n});\nvar ConnectedAccountListParamsSchema = z4.object({\n  authConfigIds: z4.array(z4.string()).nullable().optional().describe(\"The auth config ids of the connected accounts\"),\n  cursor: z4.string().nullish().describe(\"The cursor to paginate through the connected accounts\"),\n  labels: z4.array(z4.string()).nullable().optional().describe(\"The labels of the connected accounts\"),\n  limit: z4.number().nullable().optional().describe(\"The limit of the connected accounts to return\"),\n  orderBy: z4.enum([\"created_at\", \"updated_at\"]).optional().describe(\"The order by of the connected accounts\"),\n  statuses: z4.array(ConnectedAccountStatusSchema).nullable().optional().describe(\"The statuses of the connected accounts\"),\n  toolkitSlugs: z4.array(z4.string()).nullable().optional().describe(\"The toolkit slugs of the connected accounts\"),\n  userIds: z4.array(z4.string()).nullable().optional().describe(\"The user ids of the connected accounts\")\n});\nvar ConnectedAccountListResponseSchema = z4.object({\n  items: z4.array(ConnectedAccountRetrieveResponseSchema).describe(\"The list of connected accounts\"),\n  nextCursor: z4.string().nullish().describe(\"The next cursor to paginate through the connected accounts\"),\n  totalPages: z4.number().describe(\"The total number of pages of connected accounts\")\n});\n\n// src/utils/transform.ts\nfunction transform(raw) {\n  return {\n    with(schema) {\n      return {\n        using(transformer, options) {\n          const transformed = transformer(raw);\n          const result = schema.safeParse(transformed);\n          if (!result.success) {\n            logger_default.error(result.error);\n            return transformed;\n          }\n          return result.data;\n        }\n      };\n    }\n  };\n}\n\n// src/utils/transformers/connectedAccounts.ts\nfunction transformConnectedAccountResponse(response) {\n  return transform(response).with(ConnectedAccountRetrieveResponseSchema).using((response2) => ({\n    ...response2,\n    authConfig: {\n      ...response2.auth_config,\n      id: response2.auth_config.id,\n      isComposioManaged: response2.auth_config.is_composio_managed,\n      isDisabled: response2.auth_config.is_disabled\n    },\n    data: response2.data ?? void 0,\n    state: response2.state,\n    status: response2.status,\n    statusReason: response2.status_reason,\n    isDisabled: response2.is_disabled,\n    createdAt: response2.created_at,\n    updatedAt: response2.updated_at,\n    testRequestEndpoint: response2.test_request_endpoint\n  }));\n}\nfunction transformConnectedAccountListResponse(response) {\n  return transform(response).with(ConnectedAccountListResponseSchema).using((response2) => ({\n    items: response2.items.map(transformConnectedAccountResponse),\n    nextCursor: response2.next_cursor ?? null,\n    totalPages: response2.total_pages\n  }));\n}\n\n// src/models/CustomTools.ts\nvar CustomTools = class {\n  client;\n  customToolsRegistry;\n  constructor(client) {\n    if (!client) {\n      throw new ComposioError(\"ComposioClient is required\");\n    }\n    this.client = client;\n    this.customToolsRegistry = /* @__PURE__ */ new Map();\n    telemetry.instrument(this);\n  }\n  /**\n   * Create a custom tool and registers it in the registry.\n   * This is just an in memory registry and is not persisted.\n   * @param {CustomToolOptions} toolOptions CustomToolOptions\n   * @returns {Tool} The tool created\n   *\n   * @example\n   * ```typescript\n   * // Create a custom tool with input parameters\n   * const customTool = await composio.customTools.createTool({\n   *   name: 'My Custom Tool',\n   *   description: 'A tool that performs a custom operation',\n   *   slug: 'MY_CUSTOM_TOOL',\n   *   inputParams: z.object({\n   *     query: z.string().describe('The search query'),\n   *     limit: z.number().optional().describe('Maximum number of results')\n   *   }),\n   *   execute: async (input, connectionConfig, executeToolRequest) => {\n   *     // Custom implementation logic\n   *     return {\n   *       data: { results: ['result1', 'result2'] }\n   *     };\n   *   }\n   * });\n   * ```\n   */\n  async createTool(toolOptions) {\n    const { slug, execute, inputParams, name, description } = toolOptions;\n    if (!slug || !execute || !inputParams || !name) {\n      throw new Error(\"Invalid tool options\");\n    }\n    const paramsSchema = await zodToJsonSchema(inputParams, {\n      name: \"input\"\n    });\n    const paramsSchemaJson = paramsSchema.definitions.input;\n    const toolSchema = {\n      name,\n      slug,\n      description,\n      inputParameters: {\n        title: name,\n        type: \"object\",\n        description,\n        properties: paramsSchemaJson.properties,\n        required: paramsSchemaJson.required\n      },\n      // the output parameters are not used yet\n      outputParameters: {\n        type: \"object\",\n        title: `Response for ${name}`,\n        properties: {}\n      },\n      tags: [],\n      // this is never set to the user provided toolkitslug so that we can differentiate\n      // the toolkitslug is used via the execute function.\n      toolkit: { name: \"custom\", slug: \"custom\" }\n    };\n    this.customToolsRegistry.set(slug.toLowerCase(), {\n      options: toolOptions,\n      schema: toolSchema\n    });\n    return toolSchema;\n  }\n  /**\n   * Get all the custom tools from the registry.\n   * @param {string[]} param0.toolSlugs The slugs of the tools to get\n   * @returns {ToolList} The list of tools\n   *\n   * @example\n   * ```typescript\n   * // Get all custom tools\n   * const allTools = await composio.customTools.getCustomTools({});\n   *\n   * // Get specific custom tools by slug\n   * const specificTools = await composio.customTools.getCustomTools({\n   *   toolSlugs: ['MY_CUSTOM_TOOL', 'ANOTHER_CUSTOM_TOOL']\n   * });\n   * ```\n   */\n  async getCustomTools({ toolSlugs }) {\n    const tools = [];\n    if (toolSlugs) {\n      for (const slug of toolSlugs) {\n        const tool = this.customToolsRegistry.get(slug.toLowerCase());\n        if (tool) {\n          tools.push(tool.schema);\n        }\n      }\n    } else {\n      return Array.from(this.customToolsRegistry.values()).map((tool) => tool.schema);\n    }\n    return tools;\n  }\n  /**\n   * Get a custom tool by slug from the registry.\n   * @param {string} slug The slug of the tool to get\n   * @returns {Tool} The tool\n   *\n   * @example\n   * ```typescript\n   * // Get a specific custom tool by its slug\n   * const myTool = await composio.customTools.getCustomToolBySlug('MY_CUSTOM_TOOL');\n   * if (myTool) {\n   *   console.log(`Found tool: ${myTool.name}`);\n   * } else {\n   *   console.log('Tool not found');\n   * }\n   * ```\n   */\n  async getCustomToolBySlug(slug) {\n    if (!slug) {\n      throw new Error(\"Tool slug is required\");\n    }\n    try {\n      const tool = this.customToolsRegistry.get(slug.toLowerCase());\n      return tool?.schema;\n    } catch (error) {\n      logger_default.error(`Error getting custom tool: ${error}`);\n      return void 0;\n    }\n  }\n  /**\n   * Get the connected account for the user and toolkit.\n   * @param {string} toolkitSlug The slug of the toolkit\n   * @param {ExecuteMetadata} metadata The metadata of the execution\n   * @returns {ConnectedAccount} The connected account\n   */\n  async getConnectedAccountForToolkit(toolkitSlug, userId, connectedAccountId) {\n    try {\n      await this.client.toolkits.retrieve(toolkitSlug);\n    } catch (error) {\n      throw new ComposioToolNotFoundError(`Toolkit with slug ${toolkitSlug} not found`, {\n        cause: error\n      });\n    }\n    const connectedAccounts = await this.client.connectedAccounts.list({\n      toolkit_slugs: [toolkitSlug],\n      user_ids: [userId]\n    });\n    if (!connectedAccounts.items.length) {\n      throw new ComposioConnectedAccountNotFoundError(\n        `No connected accounts found for toolkit ${toolkitSlug}`\n      );\n    }\n    const connectedAccount = connectedAccountId ? connectedAccounts.items.find((item) => item.id === connectedAccountId) : connectedAccounts.items[0];\n    if (!connectedAccount) {\n      throw new ComposioConnectedAccountNotFoundError(\n        `Connected account not found for toolkit ${toolkitSlug} for user ${userId}`\n      );\n    }\n    return transformConnectedAccountResponse(connectedAccount);\n  }\n  /**\n   * Execute a custom tool\n   *\n   * @description If a toolkit is used, the connected account id is used to execute the tool.\n   * If a connected account id is provided, it is used to execute the tool.\n   * If a connected account id is not provided, the first connected account for the toolkit is used.\n   *\n   * @param {slug} slug The slug of the tool to execute\n   * @param {Record<string, unknown>} inputParams The input parameters for the tool\n   * @param {ExecuteMetadata} metadata The metadata of the execution\n   * @returns {Promise<ToolExecuteResponse>} The response from the tool\n   */\n  async executeCustomTool(slug, body) {\n    const tool = this.customToolsRegistry.get(slug.toLowerCase());\n    if (!tool) {\n      throw new ComposioToolNotFoundError(`Tool with slug ${slug} not found`);\n    }\n    let connectionConfig = null;\n    const { toolkitSlug, execute, inputParams } = tool.options;\n    let connectedAccountId = body.connectedAccountId;\n    if (toolkitSlug && toolkitSlug !== \"custom\") {\n      const connectedAccount = await this.getConnectedAccountForToolkit(\n        toolkitSlug,\n        body.userId,\n        body.connectedAccountId\n      );\n      logger_default.debug(\n        `[CustomTool] Connected account for ${toolkitSlug} found for user ${body.userId}`,\n        JSON.stringify(connectedAccount, null, 2)\n      );\n      if (!connectedAccount) {\n        throw new ComposioConnectedAccountNotFoundError(\n          `Connected account not found for toolkit ${toolkitSlug} for user ${body.userId}`,\n          {\n            meta: {\n              toolkitSlug,\n              userId: body.userId\n            }\n          }\n        );\n      }\n      connectionConfig = connectedAccount.state ?? null;\n      connectedAccountId = connectedAccount.id;\n    }\n    if (typeof execute !== \"function\") {\n      throw new ComposioInvalidExecuteFunctionError(\"Invalid execute function\", {\n        meta: {\n          toolSlug: slug\n        }\n      });\n    }\n    const executeToolRequest = async (data) => {\n      if (toolkitSlug && toolkitSlug === \"custom\") {\n        throw new ComposioInvalidExecuteFunctionError(\n          \"Custom tools without a toolkit cannot be executed using the executeToolRequest function\",\n          {\n            possibleFixes: [\n              \"Please manually execute the tool using your logic.\",\n              \"Pass a toolkit slug to execute the tool on behalf of a toolkit credentials\"\n            ]\n          }\n        );\n      }\n      const parameters = data.parameters?.map((param) => ({\n        name: param.name,\n        type: param.in,\n        value: param.value.toString()\n      }));\n      const response = await this.client.tools.proxy({\n        endpoint: data.endpoint,\n        method: data.method,\n        parameters,\n        body: data.body,\n        connected_account_id: data.connectedAccountId ?? connectedAccountId\n      });\n      return {\n        data: response.data,\n        error: null,\n        successful: true,\n        logId: void 0,\n        sessionInfo: void 0\n      };\n    };\n    const parsedInput = inputParams.safeParse(body.arguments);\n    if (!parsedInput.success) {\n      throw new ValidationError(\"Invalid input parameters\", {\n        cause: parsedInput.error\n      });\n    }\n    return execute(parsedInput.data, connectionConfig, executeToolRequest);\n  }\n};\n\n// src/errors/FileModifierErrors.ts\nvar FileModifierErrorCodes = {\n  FILE_UPLOAD_FAILED: \"FILE_UPLOAD_FAILED\"\n};\nvar ComposioFileUploadError = class extends ComposioError {\n  constructor(message = \"Failed to upload file\", options = {}) {\n    super(message, {\n      ...options,\n      code: FileModifierErrorCodes.FILE_UPLOAD_FAILED,\n      possibleFixes: options.possibleFixes || [\"Check if the file exists in the location provided\"]\n    });\n    this.name = \"ComposioFileUploadError\";\n  }\n};\n\n// src/utils/fileUtils.ts\nimport crypto from \"crypto\";\nimport pathModule from \"path\";\nvar readFileContent = async (path) => {\n  try {\n    const content = __require(\"fs\").readFileSync(path);\n    return {\n      fileName: pathModule.basename(path) || `file_${Date.now()}.${path.split(\".\").pop()}`,\n      content: content.toString(\"base64\"),\n      mimeType: \"application/octet-stream\"\n    };\n  } catch (error) {\n    throw new Error(`Error reading file at ${path}: ${error}`);\n  }\n};\nvar readFileContentFromURL = async (path) => {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch file: ${response.statusText}`);\n  }\n  const arrayBuffer = await response.arrayBuffer();\n  const content = Buffer.from(arrayBuffer);\n  const mimeType = response.headers.get(\"content-type\") || \"application/octet-stream\";\n  return {\n    content: content.toString(\"base64\"),\n    mimeType,\n    fileName: pathModule.basename(path) || `file_${Date.now()}.${path.split(\".\").pop()}`\n  };\n};\nvar uploadFileToS3 = async (fileName, content, toolSlug, toolkitSlug, mimeType, client) => {\n  const response = await client.files.createPresignedURL({\n    filename: fileName,\n    mimetype: mimeType,\n    md5: crypto.createHash(\"md5\").update(Buffer.from(content, \"base64\")).digest(\"hex\"),\n    tool_slug: toolSlug,\n    toolkit_slug: toolkitSlug\n  });\n  const { key, type } = response;\n  if (type === \"new\" || type === \"update\") {\n    logger_default.debug(`Uploading ${key} file to S3: ${key}`);\n    const buffer = Buffer.from(content, \"base64\");\n    const signedURL = response.type === \"update\" ? response.update_presigned_url : response.new_presigned_url;\n    const uploadResponse = await fetch(signedURL, {\n      method: \"PUT\",\n      body: buffer,\n      headers: {\n        \"Content-Type\": mimeType,\n        \"Content-Length\": buffer.length.toString()\n      }\n    });\n    if (!uploadResponse.ok) {\n      throw new Error(`Failed to upload file to S3: ${uploadResponse.statusText}`);\n    }\n  } else {\n    logger_default.debug(`File already exists in S3: ${key}`);\n  }\n  return key;\n};\nvar readFile = async (file) => {\n  if (file instanceof File) {\n    const content = await file.arrayBuffer();\n    return {\n      fileName: file.name,\n      content: Buffer.from(content).toString(\"base64\"),\n      mimeType: file.type\n    };\n  } else if (typeof file === \"string\") {\n    if (file.startsWith(\"http\")) {\n      return await readFileContentFromURL(file);\n    } else {\n      return await readFileContent(file);\n    }\n  }\n  throw new Error(\"Invalid file type\");\n};\nvar getFileDataAfterUploadingToS3 = async (file, {\n  toolSlug,\n  toolkitSlug,\n  client\n}) => {\n  if (!file) {\n    throw new Error(\"Either path or blob must be provided\");\n  }\n  const fileData = await readFile(file);\n  logger_default.debug(`Uploading file to S3...`);\n  const s3key = await uploadFileToS3(\n    pathModule.basename(fileData.fileName),\n    fileData.content,\n    toolSlug,\n    toolkitSlug,\n    fileData.mimeType,\n    client\n  );\n  logger_default.debug(`Done! File uploaded to S3: ${s3key}`, JSON.stringify(fileData, null, 2));\n  return {\n    name: fileData.fileName,\n    mimetype: fileData.mimeType,\n    s3key\n  };\n};\nvar downloadFileFromS3 = async ({\n  toolSlug,\n  s3Url,\n  mimeType\n}) => {\n  const response = await fetch(s3Url);\n  if (!response.ok) {\n    throw new Error(`Failed to download file: ${response.statusText}`);\n  }\n  const data = await response.arrayBuffer();\n  const extension = mimeType.split(\"/\")[1] || \"txt\";\n  const fileName = `${toolSlug}_${Date.now()}.${extension}`;\n  const filePath = saveFile(fileName, Buffer.from(data), true);\n  return {\n    name: fileName,\n    mimeType,\n    s3Url,\n    filePath\n  };\n};\nvar getComposioDir = (createDirIfNotExists = false) => {\n  try {\n    const os = __require(\"os\");\n    const path = __require(\"path\");\n    const fs = __require(\"fs\");\n    const composioDir = path.join(os.homedir(), COMPOSIO_DIR);\n    if (createDirIfNotExists && !fs.existsSync(composioDir)) {\n      fs.mkdirSync(composioDir, { recursive: true });\n    }\n    return composioDir;\n  } catch (_error) {\n    return null;\n  }\n};\nvar getComposioTempFilesDir = (createDirIfNotExists = false) => {\n  try {\n    const os = __require(\"os\");\n    const path = __require(\"path\");\n    const fs = __require(\"fs\");\n    const composioFilesDir = path.join(os.homedir(), COMPOSIO_DIR, TEMP_FILES_DIRECTORY_NAME);\n    if (createDirIfNotExists && !fs.existsSync(composioFilesDir)) {\n      fs.mkdirSync(composioFilesDir, { recursive: true });\n    }\n    return composioFilesDir;\n  } catch (_error) {\n    return null;\n  }\n};\nvar saveFile = (file, content, isTempFile = false) => {\n  try {\n    const path = __require(\"path\");\n    const fs = __require(\"fs\");\n    const composioFilesDir = isTempFile ? getComposioTempFilesDir(true) : getComposioDir(true);\n    const filePath = path.join(composioFilesDir, path.basename(file));\n    logger_default.info(`Saving file to: ${filePath}`);\n    if (Buffer.isBuffer(content)) {\n      fs.writeFileSync(filePath, content);\n    } else {\n      fs.writeFileSync(filePath, content, \"utf8\");\n    }\n    return filePath;\n  } catch (_error) {\n    logger_default.debug(`Error saving file: ${_error}`);\n    return null;\n  }\n};\n\n// src/utils/modifiers/FileToolModifier.ts\nvar transformProperties = (properties) => {\n  const newProperties = {};\n  for (const [key, property] of Object.entries(properties)) {\n    if (property.file_uploadable) {\n      newProperties[key] = {\n        title: property.title,\n        description: property.description,\n        format: \"path\",\n        type: \"string\",\n        file_uploadable: true\n      };\n    } else if (property.type === \"object\" && property.properties) {\n      newProperties[key] = {\n        ...property,\n        properties: transformProperties(property.properties)\n      };\n    } else {\n      newProperties[key] = property;\n    }\n  }\n  return newProperties;\n};\nvar hydrateFiles = async (value, schema, ctx) => {\n  if (schema?.file_uploadable) {\n    if (typeof value !== \"string\" && !(value instanceof File)) return value;\n    logger_default.debug(`Uploading file \"${value}\"`);\n    return getFileDataAfterUploadingToS3(value, {\n      toolSlug: ctx.toolSlug,\n      toolkitSlug: ctx.toolkitSlug,\n      client: ctx.client\n    });\n  }\n  if (schema?.type === \"object\" && schema.properties && isPlainObject(value)) {\n    const transformed = {};\n    for (const [k, v] of Object.entries(value)) {\n      transformed[k] = await hydrateFiles(v, schema.properties[k], ctx);\n    }\n    return transformed;\n  }\n  if (schema?.type === \"array\" && schema.items && Array.isArray(value)) {\n    const itemSchema = Array.isArray(schema.items) ? schema.items[0] : schema.items;\n    return Promise.all(\n      value.map((item) => hydrateFiles(item, itemSchema, ctx))\n    );\n  }\n  return value;\n};\nvar hydrateDownloads = async (value, ctx) => {\n  if (isPlainObject(value) && typeof value.s3url === \"string\") {\n    const { s3url, mimetype } = value;\n    try {\n      logger_default.debug(`Downloading from S3: ${s3url}`);\n      const dl = await downloadFileFromS3({\n        toolSlug: ctx.toolSlug,\n        s3Url: s3url,\n        mimeType: mimetype ?? \"application/octet-stream\"\n      });\n      logger_default.debug(`Downloaded \\u2192 ${dl.filePath}`);\n      return {\n        uri: dl.filePath,\n        file_downloaded: dl.filePath ? true : false,\n        s3url,\n        mimeType: dl.mimeType\n      };\n    } catch (err) {\n      logger_default.error(`Download failed: ${s3url}`, { cause: err });\n      return {\n        uri: \"\",\n        file_downloaded: false,\n        s3url,\n        mimeType: mimetype ?? \"application/octet-stream\"\n      };\n    }\n  }\n  if (isPlainObject(value)) {\n    const pairs = await Promise.all(\n      Object.entries(value).map(async ([k, v]) => [k, await hydrateDownloads(v, ctx)])\n    );\n    return Object.fromEntries(pairs);\n  }\n  if (Array.isArray(value)) {\n    return Promise.all(value.map((item) => hydrateDownloads(item, ctx)));\n  }\n  return value;\n};\nfunction isPlainObject(val) {\n  return typeof val === \"object\" && val !== null && !Array.isArray(val);\n}\nvar FileToolModifier = class {\n  client;\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Modifies the tool schema to include the file upload URL.\n   *\n   * @description This modifier is used to upload a file to the Composio platform and replace the file path with the file upload URL.\n   *\n   * @param _toolSlug - The slug of the tool that is being executed.\n   * @param _toolkitSlug - The slug of the toolkit that is being executed.\n   * @param schema - The schema of the tool.\n   * @returns The schema with the file upload URL included.\n   */\n  async modifyToolSchema(toolSlug, toolkitSlug, schema) {\n    if (!schema.inputParameters?.properties) {\n      return schema;\n    }\n    const properties = transformProperties(schema.inputParameters.properties);\n    return {\n      ...schema,\n      inputParameters: {\n        ...schema.inputParameters,\n        properties\n      }\n    };\n  }\n  /**\n   * Modifies the input parameters to include the file upload URL.\n   *\n   * @description This modifier is used to upload a file to the Composio platform and replace the file path with the file upload URL.\n   *\n   * @param toolSlug - The slug of the tool that is being executed.\n   * @param toolkitSlug - The slug of the toolkit that is being executed.\n   *\n   */\n  async fileUploadModifier(tool, options) {\n    const { params, toolSlug, toolkitSlug = \"unknown\" } = options;\n    const { arguments: args } = params;\n    if (!args || typeof args !== \"object\") return params;\n    try {\n      const newArgs = await hydrateFiles(args, tool.inputParameters, {\n        toolSlug,\n        toolkitSlug,\n        client: this.client\n      });\n      return { ...params, arguments: newArgs };\n    } catch (error) {\n      throw new ComposioFileUploadError(\"Failed to upload file\", {\n        cause: error\n      });\n    }\n  }\n  /**\n   * Modifies the result to include the file download URL.\n   *\n   * @description This modifier is used to download a file and\n   *\n   * @param toolSlug - The slug of the tool that is being executed.\n   * @param toolkitSlug - The slug of the toolkit that is being executed.\n   * @param result - The result of the tool execution.\n   * @returns The result with the file download URL included.\n   */\n  async fileDownloadModifier(_tool, options) {\n    const { result, toolSlug } = options;\n    const dataWithDownloads = await hydrateDownloads(result.data, { toolSlug });\n    return { ...result, data: dataWithDownloads };\n  }\n};\n\n// src/models/Tools.ts\nvar Tools = class {\n  client;\n  customTools;\n  provider;\n  autoUploadDownloadFiles;\n  constructor(client, provider, options) {\n    if (!client) {\n      throw new Error(\"ComposioClient is required\");\n    }\n    if (!provider) {\n      throw new ComposioProviderNotDefinedError(\"Provider not passed into Tools instance\");\n    }\n    this.client = client;\n    this.customTools = new CustomTools(client);\n    this.provider = provider;\n    this.autoUploadDownloadFiles = options?.autoUploadDownloadFiles ?? true;\n    this.execute = this.execute.bind(this);\n    this.provider._setExecuteToolFn(this.execute);\n    this.getRawComposioToolBySlug = this.getRawComposioToolBySlug.bind(this);\n    this.getRawComposioTools = this.getRawComposioTools.bind(this);\n    telemetry.instrument(this);\n  }\n  /**\n   * Transforms tool data from snake_case API format to camelCase for internal SDK use.\n   *\n   * This method standardizes the property naming convention for tools retrieved from the Composio API,\n   * making them more consistent with JavaScript/TypeScript conventions.\n   *\n   * @param {ToolRetrieveResponse | ComposioToolListResponse['items'][0]} tool - The tool object to transform\n   * @returns {Tool} The transformed tool with camelCase properties\n   *\n   * @private\n   */\n  transformToolCases(tool) {\n    return ToolSchema.parse({\n      ...tool,\n      inputParameters: tool.input_parameters,\n      outputParameters: tool.output_parameters\n    });\n  }\n  /**\n   * Transforms tool execution response from snake_case API format to camelCase.\n   *\n   * This method converts the response received from the Composio API to a standardized format\n   * with consistent property naming that follows JavaScript/TypeScript conventions.\n   *\n   * @param {ComposioToolExecuteResponse} response - The raw API response to transform\n   * @returns {ToolExecuteResponse} The transformed response with camelCase properties\n   *\n   * @private\n   */\n  transformToolExecuteResponse(response) {\n    return ToolExecuteResponseSchema.parse({\n      data: response.data,\n      error: response.error,\n      successful: response.successful,\n      logId: response.log_id,\n      sessionInfo: response.session_info\n    });\n  }\n  /**\n   * Check if the connected account exists for the given tools.\n   * @param {string} userId - The user id.\n   * @param {ToolList} tools - The tools to check.\n   * @returns {Promise<boolean>} True if the connected account exists for the given tools, false otherwise.\n   */\n  async checkIfConnectedAccountExistsForTools(userIds, tools) {\n    if (!tools.length) {\n      return true;\n    }\n    const connectedAccounts = await this.client.connectedAccounts.list({\n      user_ids: userIds\n    });\n    if (connectedAccounts.items.length === 0) {\n      return false;\n    }\n    const connectedToolkitSlugs = connectedAccounts.items.reduce(\n      (acc, account) => {\n        if (account.toolkit.slug) {\n          acc[account.toolkit.slug] = true;\n        }\n        return acc;\n      },\n      {}\n    );\n    const toolSlugs = tools.reduce(\n      (acc, tool) => {\n        acc[tool.slug] = true;\n        return acc;\n      },\n      {}\n    );\n    for (const tool of Object.keys(toolSlugs)) {\n      if (!connectedToolkitSlugs[tool]) {\n        logger_default.warn(`Tool ${tool} requires a connected account but no connected account was found`);\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Get the connected account id for a given tool\n   * @param {string} userId - The user id\n   * @param {string} toolSlug - The tool slug\n   * @returns {Promise<string | null>} The connected account id or null if the toolkit is a no auth app\n   */\n  async getConnectedAccountIdForTool(userId, toolSlug) {\n    const tool = await this.getRawComposioToolBySlug(toolSlug);\n    if (!tool.toolkit) {\n      throw new Error(`Unable to find toolkit for tool ${toolSlug}`);\n    }\n    const toolkit = await this.client.toolkits.retrieve(tool.toolkit.slug);\n    if (!toolkit) {\n      throw new Error(`Unable to find toolkit for tool ${toolSlug}`);\n    }\n    const isNoAuthApp = toolkit.auth_config_details?.some(\n      (authConfigDetails) => authConfigDetails.mode === \"NO_AUTH\"\n    );\n    if (!isNoAuthApp) {\n      const connectedAccounts = await this.client.connectedAccounts.list({\n        user_ids: [userId],\n        toolkit_slugs: [tool.toolkit.slug]\n      });\n      if (connectedAccounts.items.length === 0) {\n        throw new Error(\"No connected accounts found\");\n      }\n      logger_default.warn(\n        `Using the first connected account for tool ${toolSlug}. To change this behaviour please explicitly pass a connectedAccountId for the tool`\n      );\n      return connectedAccounts.items[0].id;\n    }\n    return null;\n  }\n  /**\n   * Applies the default schema modifiers to the tools\n   * @param tools - The tools to apply the default schema modifiers to\n   * @returns The tools with the default schema modifiers applied\n   */\n  async applyDefaultSchemaModifiers(tools) {\n    if (this.autoUploadDownloadFiles) {\n      const fileToolModifier = new FileToolModifier(this.client);\n      return await Promise.all(\n        tools.map(\n          (tool) => fileToolModifier.modifyToolSchema(tool.slug, tool.toolkit?.slug ?? \"unknown\", tool)\n        )\n      );\n    } else {\n      return tools;\n    }\n  }\n  /**\n   * Applies the before execute modifiers to the tool execution params\n   * @param options.toolSlug - The slug of the tool\n   * @param options.toolkitSlug - The slug of the toolkit\n   * @param options.params - The params of the tool execution\n   * @param modifier - The modifier to apply\n   * @returns The modified params\n   */\n  async applyBeforeExecuteModifiers(tool, {\n    toolSlug,\n    toolkitSlug,\n    params\n  }, modifier) {\n    let modifiedParams = params;\n    if (this.autoUploadDownloadFiles) {\n      const fileToolModifier = new FileToolModifier(this.client);\n      modifiedParams = await fileToolModifier.fileUploadModifier(tool, {\n        toolSlug,\n        toolkitSlug,\n        params: modifiedParams\n      });\n    }\n    if (modifier) {\n      if (typeof modifier === \"function\") {\n        modifiedParams = await modifier({\n          toolSlug,\n          toolkitSlug,\n          params: modifiedParams\n        });\n      } else {\n        throw new ComposioInvalidModifierError(\"Invalid beforeExecute modifier. Not a function.\");\n      }\n    }\n    return modifiedParams;\n  }\n  /**\n   * Applies the after execute modifiers to the tool execution result\n   * @param options.toolSlug - The slug of the tool\n   * @param options.toolkitSlug - The slug of the toolkit\n   * @param options.result - The result of the tool execution\n   * @param modifier - The modifier to apply\n   * @returns The modified result\n   */\n  async applyAfterExecuteModifiers(tool, {\n    toolSlug,\n    toolkitSlug,\n    result\n  }, modifier) {\n    let modifiedResult = result;\n    if (this.autoUploadDownloadFiles) {\n      const fileToolModifier = new FileToolModifier(this.client);\n      modifiedResult = await fileToolModifier.fileDownloadModifier(tool, {\n        toolSlug,\n        toolkitSlug,\n        result: modifiedResult\n      });\n    }\n    if (modifier) {\n      if (typeof modifier === \"function\") {\n        modifiedResult = await modifier({\n          toolSlug,\n          toolkitSlug,\n          result: modifiedResult\n        });\n      } else {\n        throw new ComposioInvalidModifierError(\"Invalid afterExecute modifier. Not a function.\");\n      }\n    }\n    return modifiedResult;\n  }\n  /**\n   * Lists all tools available in the Composio SDK including custom tools.\n   *\n   * This method fetches tools from the Composio API in raw format and combines them with\n   * any registered custom tools. The response can be filtered and modified as needed.\n   *\n   * @param {ToolListParams} [query={}] - Optional query parameters to filter the tools\n   * @param {TransformToolSchemaModifier} [modifier] - Optional function to transform tool schemas\n   * @returns {Promise<ToolList>} List of tools matching the query criteria\n   *\n   * @example\n   * ```typescript\n   * // Get all tools\n   * const tools = await composio.tools.getRawComposioTools();\n   *\n   * // Get tools with filters\n   * const githubTools = await composio.tools.getRawComposioTools({\n   *   toolkits: ['github'],\n   *   limit: 10\n   * });\n   *\n   * // Get tools with schema transformation\n   * const tools = await composio.tools.getRawComposioTools({},\n   *   (toolSlug, toolkitSlug, tool) => {\n   *     // Add custom properties to tool schema\n   *     return {...tool, customProperty: 'value'};\n   *   }\n   * );\n   * ```\n   */\n  async getRawComposioTools(query, modifier) {\n    if (\"tools\" in query && \"toolkits\" in query) {\n      throw new ValidationError(\n        \"Invalid tool list parameters. You should not use tools and toolkits filter together.\"\n      );\n    }\n    const queryParams = ToolListParamsSchema.safeParse(query);\n    if (queryParams.error) {\n      throw new ValidationError(\"Invalid tool list parameters\", {\n        cause: queryParams.error\n      });\n    }\n    if (!(\"tools\" in queryParams.data || \"toolkits\" in queryParams.data || \"search\" in queryParams.data || \"authConfigIds\" in queryParams.data)) {\n      throw new ValidationError(\n        \"Invalid tool list parameters, atleast one of the following parameters is required: tools, toolkits, search, authConfigIds\"\n      );\n    }\n    let limit = \"limit\" in queryParams.data ? queryParams.data.limit : void 0;\n    if (\"tools\" in queryParams.data) {\n      limit = 9999;\n    }\n    const filters = {\n      ...\"tools\" in queryParams.data ? { tool_slugs: queryParams.data.tools?.join(\",\") } : {},\n      ...\"toolkits\" in queryParams.data ? { toolkit_slug: queryParams.data.toolkits?.join(\",\") } : {},\n      ...limit ? { limit } : {},\n      ...\"tags\" in queryParams.data ? { tags: queryParams.data.tags } : {},\n      ...\"scopes\" in queryParams.data ? { scopes: queryParams.data.scopes } : {},\n      ...\"search\" in queryParams.data ? { search: queryParams.data.search } : {},\n      ...\"authConfigIds\" in queryParams.data ? { auth_config_ids: queryParams.data.authConfigIds } : {}\n    };\n    logger_default.debug(`Fetching tools with filters: ${JSON.stringify(filters, null, 2)}`);\n    const tools = await this.client.tools.list(filters);\n    if (!tools) {\n      return [];\n    }\n    const caseTransformedTools = tools.items.map((tool) => this.transformToolCases(tool));\n    const customTools = await this.customTools.getCustomTools({\n      toolSlugs: \"tools\" in queryParams.data ? queryParams.data.tools : void 0\n    });\n    let modifiedTools = await this.applyDefaultSchemaModifiers([\n      ...caseTransformedTools,\n      ...customTools\n    ]);\n    if (modifier) {\n      if (typeof modifier === \"function\") {\n        const modifiedPromises = modifiedTools.map(\n          (tool) => modifier({\n            toolSlug: tool.slug,\n            toolkitSlug: tool.toolkit?.slug ?? \"unknown\",\n            schema: tool\n          })\n        );\n        modifiedTools = await Promise.all(modifiedPromises);\n      } else {\n        throw new ComposioInvalidModifierError(\"Invalid schema modifier. Not a function.\");\n      }\n    }\n    return modifiedTools;\n  }\n  /**\n   * Retrieves a tool by its Slug.\n   * This method is used to get the raw tools from the composio API.\n   * @param slug The ID of the tool to be retrieved\n   * @returns {Promise<Tool>} The tool\n   *\n   * @example\n   * ```ts\n   * const tool = await composio.tools.getRawComposioToolBySlug('github');\n   * ```\n   */\n  async getRawComposioToolBySlug(slug, modifier) {\n    const customTool = await this.customTools.getCustomToolBySlug(slug);\n    if (customTool) {\n      logger_default.debug(`Found ${slug} to be a custom tool`, JSON.stringify(customTool, null, 2));\n      return customTool;\n    } else {\n      logger_default.debug(`Tool ${slug} is not a custom tool. Fetching from Composio API`);\n    }\n    let tool;\n    try {\n      tool = await this.client.tools.retrieve(slug);\n    } catch (error) {\n      throw new ComposioToolNotFoundError(`Unable to retrieve tool with slug ${slug}`, {\n        cause: error\n      });\n    }\n    let [modifiedTool] = await this.applyDefaultSchemaModifiers([this.transformToolCases(tool)]);\n    if (modifier) {\n      if (typeof modifier === \"function\") {\n        modifiedTool = await modifier({\n          toolSlug: slug,\n          toolkitSlug: modifiedTool.toolkit?.slug ?? \"unknown\",\n          schema: modifiedTool\n        });\n      } else {\n        throw new ComposioInvalidModifierError(\"Invalid schema modifier. Not a function.\");\n      }\n    }\n    return modifiedTool;\n  }\n  /**\n   * Get a tool or list of tools based on the provided arguments.\n   * This is an implementation method that handles both overloads.\n   *\n   * @param {string} userId - The user id to get the tool(s) for\n   * @param {ToolListParams | string} arg2 - Either a slug string or filters object\n   * @param {ProviderOptions<TProvider>} [options] - Optional provider options\n   * @returns {Promise<TToolCollection>} The tool collection\n   */\n  async get(userId, arg2, options) {\n    const executeToolFn = this.createExecuteToolFn(userId, options);\n    if (typeof arg2 === \"string\") {\n      const tool = await this.getRawComposioToolBySlug(arg2, options?.modifySchema);\n      return this.provider.wrapTools([tool], executeToolFn);\n    } else {\n      const tools = await this.getRawComposioTools(arg2, options?.modifySchema);\n      return this.provider.wrapTools(tools, executeToolFn);\n    }\n  }\n  /**\n   * @internal\n   * @description\n   * Creates a function that executes a tool.\n   * This function is used by agentic providers to execute the tool\n   *\n   * @param {string} userId - The user id\n   * @param {ExecuteToolModifiers} modifiers - The modifiers to be applied to the tool\n   * @returns {ExecuteToolFn} The execute tool function\n   */\n  createExecuteToolFn(userId, modifiers) {\n    const executeToolFn = async (toolSlug, input) => {\n      return await this.execute(\n        toolSlug,\n        {\n          userId,\n          arguments: input\n        },\n        modifiers\n      );\n    };\n    return executeToolFn;\n  }\n  /**\n   * @internal\n   * Handles the execution of a custom tool\n   * @param tool - The tool to execute\n   * @param body - The body of the tool execution\n   * @param modifiers - The modifiers to be applied to the tool execution\n   * @returns The response from the tool execution\n   */\n  async handleCustomToolExecution(tool, body, modifiers) {\n    if (modifiers?.beforeExecute) {\n      if (typeof modifiers.beforeExecute === \"function\") {\n        body = await modifiers.beforeExecute({\n          toolSlug: tool.slug,\n          toolkitSlug: tool.toolkit?.slug ?? \"unknown\",\n          params: body\n        });\n      } else {\n        throw new ComposioInvalidModifierError(\"Invalid beforeExecute modifier. Not a function.\");\n      }\n    }\n    let result = await this.customTools.executeCustomTool(tool.slug, body);\n    if (modifiers?.afterExecute) {\n      if (typeof modifiers.afterExecute === \"function\") {\n        result = await modifiers.afterExecute({\n          toolSlug: tool.slug,\n          toolkitSlug: tool.toolkit?.slug ?? \"unknown\",\n          result\n        });\n      } else {\n        throw new ComposioInvalidModifierError(\"Invalid afterExecute modifier. Not a function.\");\n      }\n    }\n    return result;\n  }\n  /**\n   * @internal\n   * Handles the execution of a composio tool\n   * @param tool - The tool to execute\n   * @param body - The body of the tool execution\n   * @param modifiers - The modifiers to be applied to the tool execution\n   * @returns The response from the tool execution\n   */\n  async handleComposioToolExecution(tool, body, modifiers) {\n    body = await this.applyBeforeExecuteModifiers(\n      tool,\n      {\n        toolSlug: tool.slug,\n        toolkitSlug: tool.toolkit?.slug ?? \"unknown\",\n        params: body\n      },\n      modifiers?.beforeExecute\n    );\n    let connectedAccountId = body.connectedAccountId;\n    if (!connectedAccountId) {\n      connectedAccountId = await this.getConnectedAccountIdForTool(body.userId, tool.slug) || void 0;\n    }\n    let result = await this.client.tools.execute(tool.slug, {\n      allow_tracing: body.allowTracing,\n      connected_account_id: body.connectedAccountId,\n      custom_auth_params: body.customAuthParams,\n      arguments: body.arguments,\n      user_id: body.userId,\n      version: body.version,\n      text: body.text\n    });\n    result = this.transformToolExecuteResponse(result);\n    result = await this.applyAfterExecuteModifiers(\n      tool,\n      {\n        toolSlug: tool.slug,\n        toolkitSlug: tool.toolkit?.slug ?? \"unknown\",\n        result\n      },\n      modifiers?.afterExecute\n    );\n    return result;\n  }\n  /**\n   * Executes a given tool with the provided parameters.\n   *\n   * This method calls the Composio API or a custom tool handler to execute the tool and returns the response.\n   * It automatically determines whether to use a custom tool or a Composio API tool based on the slug.\n   *\n   * @param {string} slug - The slug/ID of the tool to be executed\n   * @param {ToolExecuteParams} body - The parameters to be passed to the tool\n   * @param {ExecuteToolModifiers} [modifiers] - Optional modifiers to transform the request or response\n   * @returns {Promise<ToolExecuteResponse>} - The response from the tool execution\n   *\n   * @throws {ComposioCustomToolsNotInitializedError} If the CustomTools instance is not initialized\n   * @throws {ComposioToolNotFoundError} If the tool with the given slug is not found\n   * @throws {ComposioToolExecutionError} If there is an error during tool execution\n   *\n   * @example\n   * ```typescript\n   * // Execute a Composio API tool\n   * const result = await composio.tools.execute('HACKERNEWS_GET_USER', {\n   *   userId: 'default',\n   *   arguments: { userId: 'pg' }\n   * });\n   *\n   * // Execute with modifiers\n   * const result = await composio.tools.execute('GITHUB_GET_ISSUES', {\n   *   userId: 'default',\n   *   arguments: { owner: 'composio', repo: 'sdk' }\n   * }, {\n   *   beforeExecute: (toolSlug, toolkitSlug, params) => {\n   *     // Modify params before execution\n   *     return params;\n   *   },\n   *   afterExecute: (toolSlug, toolkitSlug, result) => {\n   *     // Transform result after execution\n   *     return result;\n   *   }\n   * });\n   * ```\n   */\n  async execute(slug, body, modifiers) {\n    if (!this.customTools) {\n      throw new ComposioCustomToolsNotInitializedError(\n        \"CustomTools not initialized. Make sure Tools class is properly constructed.\"\n      );\n    }\n    try {\n      const customTool = await this.customTools.getCustomToolBySlug(slug);\n      if (customTool) {\n        return this.handleCustomToolExecution(customTool, body, modifiers);\n      } else {\n        const composioTool = await this.getRawComposioToolBySlug(slug);\n        if (!composioTool) {\n          throw new ComposioToolNotFoundError(`Tool with slug ${slug} not found`);\n        }\n        return this.handleComposioToolExecution(composioTool, body, modifiers);\n      }\n    } catch (error) {\n      throw new ComposioToolExecutionError(`Error executing tool ${slug}`, {\n        originalError: error,\n        meta: {\n          toolSlug: slug,\n          body\n        }\n      });\n    }\n  }\n  /**\n   * Fetches the list of all available tools in the Composio SDK.\n   *\n   * This method is mostly used by the CLI to get the list of tools.\n   * No filtering is done on the tools, the list is cached in the backend, no further optimization is required.\n   * @returns {Promise<ToolRetrieveEnumResponse>} The complete list of all available tools with their metadata\n   *\n   * @example\n   * ```typescript\n   * // Get all available tools as an enum\n   * const toolsEnum = await composio.tools.getToolsEnum();\n   * console.log(toolsEnum.items);\n   * ```\n   */\n  async getToolsEnum() {\n    return this.client.tools.retrieveEnum();\n  }\n  /**\n   * Fetches the input parameters for a given tool.\n   *\n   * This method is used to get the input parameters for a tool before executing it.\n   *\n   * @param {string} slug - The ID of the tool to find input for\n   * @param {ToolGetInputParams} body - The parameters to be passed to the tool\n   * @returns {Promise<ToolGetInputResponse>} The input parameters schema for the specified tool\n   *\n   * @example\n   * ```typescript\n   * // Get input parameters for a specific tool\n   * const inputParams = await composio.tools.getInput('GITHUB_CREATE_ISSUE', {\n   *   userId: 'default'\n   * });\n   * console.log(inputParams.schema);\n   * ```\n   */\n  async getInput(slug, body) {\n    return this.client.tools.getInput(slug, body);\n  }\n  /**\n   * Proxies a custom request to a toolkit/integration.\n   *\n   * This method allows sending custom requests to a specific toolkit or integration\n   * when you need more flexibility than the standard tool execution methods provide.\n   *\n   * @param {ToolProxyParams} body - The parameters for the proxy request including toolkit slug and custom data\n   * @returns {Promise<ToolProxyResponse>} The response from the proxied request\n   *\n   * @example\n   * ```typescript\n   * // Send a custom request to a toolkit\n   * const response = await composio.tools.proxyExecute({\n   *   toolkitSlug: 'github',\n   *   userId: 'default',\n   *   data: {\n   *     endpoint: '/repos/owner/repo/issues',\n   *     method: 'GET'\n   *   }\n   * });\n   * console.log(response.data);\n   * ```\n   */\n  async proxyExecute(body) {\n    const toolProxyParams = ToolProxyParamsSchema.safeParse(body);\n    if (!toolProxyParams.success) {\n      throw new ValidationError(\"Invalid tool proxy parameters\", { cause: toolProxyParams.error });\n    }\n    const parameters = [];\n    const parameterTypes = {\n      header: \"header\",\n      query: \"query\"\n    };\n    if (toolProxyParams.data.parameters) {\n      parameters.push(\n        ...Object.entries(toolProxyParams.data.parameters).map(([key, value]) => ({\n          name: key,\n          type: value.in === \"header\" ? parameterTypes.header : parameterTypes.query,\n          value: value.value.toString()\n        }))\n      );\n    }\n    return this.client.tools.proxy({\n      endpoint: toolProxyParams.data.endpoint,\n      method: toolProxyParams.data.method,\n      body: toolProxyParams.data.body,\n      connected_account_id: toolProxyParams.data.connectedAccountId,\n      parameters\n    });\n  }\n  /**\n   * Creates a custom tool that can be used within the Composio SDK.\n   *\n   * Custom tools allow you to extend the functionality of Composio with your own implementations\n   * while keeping a consistent interface for both built-in and custom tools.\n   *\n   * @param {CustomToolOptions} body - The configuration for the custom tool\n   * @returns {Promise<Tool>} The created custom tool\n   *\n   * @example\n   * ```typescript\n   * // creating a custom tool with a toolkit\n   * await composio.tools.createCustomTool({\n   *   name: 'My Custom Tool',\n   *   description: 'A custom tool that does something specific',\n   *   slug: 'MY_CUSTOM_TOOL',\n   *   userId: 'default',\n   *   connectedAccountId: '123',\n   *   toolkitSlug: 'github',\n   *   inputParameters: z.object({\n   *     param1: z.string().describe('First parameter'),\n   *   }),\n   *   execute: async (input, connectionConfig, executeToolRequest) => {\n   *     // Custom logic here\n   *     return { data: { result: 'Success!' } };\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * // creating a custom tool without a toolkit\n   * await composio.tools.createCustomTool({\n   *   name: 'My Custom Tool',\n   *   description: 'A custom tool that does something specific',\n   *   slug: 'MY_CUSTOM_TOOL',\n   *   inputParameters: z.object({\n   *     param1: z.string().describe('First parameter'),\n   *   }),\n   *   execute: async (input) => {\n   *     // Custom logic here\n   *     return { data: { result: 'Success!' } };\n   *   }\n   * });\n   */\n  async createCustomTool(body) {\n    return this.customTools.createTool(body);\n  }\n};\n\n// src/models/Toolkits.ts\nimport ComposioClient2 from \"@composio/client\";\n\n// src/types/toolkit.types.ts\nimport { z as z5 } from \"zod\";\nvar ToolkitMangedByEnumSchema = z5.enum([\"all\", \"composio\", \"project\"]);\nvar ToolkitSortByEnumSchema = z5.enum([\"usage\", \"alphabetically\"]);\nvar ToolkitsListParamsSchema = z5.object({\n  category: z5.string().optional(),\n  isLocal: z5.boolean().optional(),\n  managedBy: ToolkitMangedByEnumSchema.optional(),\n  sortBy: ToolkitSortByEnumSchema.optional()\n});\nvar ToolKitMetaSchema = z5.object({\n  categories: z5.array(\n    z5.object({\n      slug: z5.string(),\n      name: z5.string()\n    })\n  ).optional(),\n  appUrl: z5.string().optional(),\n  createdAt: z5.string().optional(),\n  description: z5.string().optional(),\n  logo: z5.string().optional(),\n  toolsCount: z5.number().optional(),\n  triggersCount: z5.number().optional(),\n  updatedAt: z5.string().optional()\n});\nvar ToolKitItemSchema = z5.object({\n  name: z5.string(),\n  slug: z5.string(),\n  meta: ToolKitMetaSchema,\n  isLocalToolkit: z5.boolean(),\n  authSchemes: z5.array(z5.string()).optional(),\n  composioManagedAuthSchemes: z5.array(z5.string()).optional(),\n  noAuth: z5.boolean().optional()\n});\nvar ToolKitListResponseSchema = z5.array(ToolKitItemSchema);\nvar ToolkitAuthFieldSchema = z5.object({\n  name: z5.string(),\n  displayName: z5.string(),\n  type: z5.string(),\n  default: z5.string().nullable().optional()\n});\nvar ToolkitAuthConfigDetailsSchema = z5.object({\n  name: z5.string(),\n  mode: z5.string(),\n  fields: z5.object({\n    authConfigCreation: z5.object({\n      optional: z5.array(ToolkitAuthFieldSchema),\n      required: z5.array(ToolkitAuthFieldSchema)\n    }),\n    connectedAccountInitiation: z5.object({\n      optional: z5.array(ToolkitAuthFieldSchema),\n      required: z5.array(ToolkitAuthFieldSchema)\n    })\n  }),\n  proxy: z5.object({\n    baseUrl: z5.string().optional()\n  }).optional()\n});\nvar ToolkitRetrieveResponseSchema = z5.object({\n  name: z5.string(),\n  slug: z5.string(),\n  meta: ToolKitMetaSchema,\n  isLocalToolkit: z5.boolean(),\n  composioManagedAuthSchemes: z5.array(z5.string()).optional(),\n  authConfigDetails: z5.array(ToolkitAuthConfigDetailsSchema).optional()\n});\nvar ToolkitCategorySchema = z5.object({\n  id: z5.string(),\n  name: z5.string()\n});\nvar ToolkitRetrieveCategoriesResponseSchema = z5.object({\n  items: z5.array(ToolkitCategorySchema),\n  nextCursor: z5.string().nullable(),\n  totalPages: z5.number()\n});\nvar ToolkitAuthFieldsResponseSchema = z5.array(\n  ToolkitAuthFieldSchema.extend({\n    required: z5.boolean().optional()\n  })\n);\n\n// src/utils/transformers/authConfigs.ts\nfunction transformAuthConfigRetrieveResponse(authConfig) {\n  return transform(authConfig).with(AuthConfigRetrieveResponseSchema).using((authConfig2) => ({\n    id: authConfig2.id,\n    name: authConfig2.name,\n    noOfConnections: authConfig2.no_of_connections,\n    status: authConfig2.status,\n    toolkit: {\n      logo: authConfig2.toolkit.logo,\n      slug: authConfig2.toolkit.slug\n    },\n    uuid: authConfig2.uuid,\n    authScheme: authConfig2.auth_scheme,\n    credentials: authConfig2.credentials,\n    expectedInputFields: authConfig2.expected_input_fields,\n    isComposioManaged: authConfig2.is_composio_managed,\n    createdBy: authConfig2.created_by,\n    createdAt: authConfig2.created_at,\n    lastUpdatedAt: authConfig2.last_updated_at,\n    restrictToFollowingTools: authConfig2.restrict_to_following_tools\n  }));\n}\nfunction transformAuthConfigListResponse(response) {\n  return transform(response).with(AuthConfigListResponseSchema).using((response2) => ({\n    items: response2.items.map(transformAuthConfigRetrieveResponse),\n    nextCursor: response2.next_cursor ?? null,\n    totalPages: response2.total_pages\n  }));\n}\nfunction transformCreateAuthConfigResponse(response) {\n  return transform(response).with(CreateAuthConfigResponseSchema).using((response2) => ({\n    id: response2.auth_config.id,\n    authScheme: response2.auth_config.auth_scheme,\n    isComposioManaged: response2.auth_config.is_composio_managed,\n    toolkit: response2.toolkit.slug\n  }));\n}\n\n// src/models/AuthConfigs.ts\nvar AuthConfigs = class {\n  client;\n  constructor(client) {\n    this.client = client;\n    telemetry.instrument(this);\n  }\n  /**\n   * Protected getter for the client instance.\n   * This is primarily used for testing purposes.\n   * @protected\n   */\n  getClient() {\n    return this.client;\n  }\n  /**\n   * Lists authentication configurations based on provided filter criteria.\n   *\n   * This method retrieves auth configs from the Composio API, transforms them to the SDK format,\n   * and supports filtering by various parameters.\n   *\n   * @param {AuthConfigListParams} [query] - Optional query parameters for filtering auth configs\n   * @returns {Promise<AuthConfigListResponse>} A paginated list of auth configurations\n   * @throws {ValidationError} If the query parameters or response fail validation\n   *\n   * @example\n   * ```typescript\n   * // List all auth configs\n   * const allConfigs = await composio.authConfigs.list();\n   *\n   * // List auth configs for a specific toolkit\n   * const githubConfigs = await composio.authConfigs.list({\n   *   toolkit: 'github'\n   * });\n   *\n   * // List Composio-managed auth configs\n   * const managedConfigs = await composio.authConfigs.list({\n   *   isComposioManaged: true\n   * });\n   * ```\n   */\n  async list(query) {\n    const parsedQuery = query ? AuthConfigListParamsSchema.parse(query) : void 0;\n    const result = await this.client.authConfigs.list({\n      cursor: parsedQuery?.cursor,\n      is_composio_managed: parsedQuery?.isComposioManaged,\n      limit: parsedQuery?.limit,\n      toolkit_slug: parsedQuery?.toolkit\n    });\n    return transformAuthConfigListResponse(result);\n  }\n  /**\n   * Create a new auth config\n   * @param {string} toolkit - Unique identifier of the toolkit\n   * @param {CreateAuthConfigParams} options - Options for creating a new auth config\n   * @returns {Promise<CreateAuthConfigResponse>} Created auth config\n   *\n   * @example\n   * const authConfig = await authConfigs.create('my-toolkit', {\n   *   type: AuthConfigTypes.CUSTOM,\n   *   name: 'My Custom Auth Config',\n   *   authScheme: AuthSchemeTypes.API_KEY,\n   *   credentials: {\n   *     apiKey: '1234567890',\n   *   },\n   * });\n   *\n   * @link https://docs.composio.dev/reference/auth-configs/create-auth-config\n   */\n  async create(toolkit, options = { type: \"use_composio_managed_auth\" }) {\n    const parsedOptions = CreateAuthConfigParamsSchema.safeParse(options);\n    if (parsedOptions.error) {\n      throw new ValidationError(\"Failed to parse auth config create options\", {\n        cause: parsedOptions.error\n      });\n    }\n    const result = await this.client.authConfigs.create({\n      toolkit: {\n        slug: toolkit\n      },\n      auth_config: parsedOptions.data.type === \"use_custom_auth\" ? {\n        type: parsedOptions.data.type,\n        name: parsedOptions.data.name,\n        authScheme: parsedOptions.data.authScheme,\n        credentials: parsedOptions.data.credentials,\n        restrict_to_following_tools: parsedOptions.data.restrictToFollowingTools\n      } : {\n        type: parsedOptions.data.type,\n        credentials: parsedOptions.data.credentials,\n        name: parsedOptions.data.name,\n        restrict_to_following_tools: parsedOptions.data.restrictToFollowingTools\n      }\n    });\n    return transformCreateAuthConfigResponse(result);\n  }\n  /**\n   * Retrieves a specific authentication configuration by its ID.\n   *\n   * This method fetches detailed information about a single auth config\n   * and transforms the response to the SDK's standardized format.\n   *\n   * @param {string} nanoid - The unique identifier of the auth config to retrieve\n   * @returns {Promise<AuthConfigRetrieveResponse>} The auth config details\n   * @throws {Error} If the auth config cannot be found or an API error occurs\n   * @throws {ValidationError} If the response fails validation\n   *\n   * @example\n   * ```typescript\n   * // Get an auth config by ID\n   * const authConfig = await composio.authConfigs.get('auth_abc123');\n   * console.log(authConfig.name); // e.g., 'GitHub Auth'\n   * console.log(authConfig.toolkit.slug); // e.g., 'github'\n   * ```\n   */\n  async get(nanoid) {\n    const result = await this.client.authConfigs.retrieve(nanoid);\n    return transformAuthConfigRetrieveResponse(result);\n  }\n  /**\n   * Updates an existing authentication configuration.\n   *\n   * This method allows you to modify properties of an auth config such as credentials,\n   * scopes, or tool restrictions. The update type (custom or default) determines which\n   * fields can be updated.\n   *\n   * @param {string} nanoid - The unique identifier of the auth config to update\n   * @param {AuthConfigUpdateParams} data - The data to update, which can be either custom or default type\n   * @returns {Promise<AuthConfigUpdateResponse>} The updated auth config\n   * @throws {ValidationError} If the update parameters are invalid\n   * @throws {Error} If the auth config cannot be found or updated\n   *\n   * @example\n   * ```typescript\n   * // Update a custom auth config with new credentials\n   * const updatedConfig = await composio.authConfigs.update('auth_abc123', {\n   *   type: 'custom',\n   *   credentials: {\n   *     apiKey: 'new-api-key-value'\n   *   }\n   * });\n   *\n   * // Update a default auth config with new scopes\n   * const updatedConfig = await composio.authConfigs.update('auth_abc123', {\n   *   type: 'default',\n   *   scopes: ['read:user', 'repo']\n   * });\n   * ```\n   */\n  async update(nanoid, data) {\n    const parsedData = AuthConfigUpdateParamsSchema.safeParse(data);\n    if (parsedData.error) {\n      throw new ValidationError(\"Failed to parse auth config update data\", {\n        cause: parsedData.error\n      });\n    }\n    return this.client.authConfigs.update(\n      nanoid,\n      parsedData.data.type === \"custom\" ? {\n        type: \"custom\",\n        credentials: parsedData.data.credentials,\n        restrict_to_following_tools: parsedData.data.restrictToFollowingTools\n      } : {\n        type: \"default\",\n        scopes: parsedData.data.scopes,\n        restrict_to_following_tools: parsedData.data.restrictToFollowingTools\n      }\n    );\n  }\n  /**\n   * Deletes an authentication configuration.\n   *\n   * This method permanently removes an auth config from the Composio platform.\n   * This action cannot be undone and will prevent any connected accounts that use\n   * this auth config from functioning.\n   *\n   * @param {string} nanoid - The unique identifier of the auth config to delete\n   * @returns {Promise<AuthConfigDeleteResponse>} The deletion response\n   * @throws {Error} If the auth config doesn't exist or cannot be deleted\n   *\n   * @example\n   * ```typescript\n   * // Delete an auth config\n   * await composio.authConfigs.delete('auth_abc123');\n   * ```\n   */\n  async delete(nanoid) {\n    return this.client.authConfigs.delete(nanoid);\n  }\n  /**\n   * Updates the status of an authentication configuration.\n   *\n   * This method allows you to enable or disable an auth config. When disabled,\n   * the auth config cannot be used to create new connected accounts or authenticate\n   * with third-party services.\n   *\n   * @param {string} status - The status to set ('ENABLED' or 'DISABLED')\n   * @param {string} nanoid - The unique identifier of the auth config\n   * @returns {Promise<AuthConfigUpdateStatusResponse>} The updated auth config details\n   * @throws {Error} If the auth config cannot be found or the status cannot be updated\n   *\n   * @example\n   * ```typescript\n   * // Disable an auth config\n   * await composio.authConfigs.updateStatus('DISABLED', 'auth_abc123');\n   *\n   * // Enable an auth config\n   * await composio.authConfigs.updateStatus('ENABLED', 'auth_abc123');\n   * ```\n   */\n  async updateStatus(status, nanoid) {\n    return this.client.authConfigs.updateStatus(status, { nanoid });\n  }\n  /**\n   * Enables an authentication configuration.\n   *\n   * This is a convenience method that calls updateStatus with 'ENABLED'.\n   * When enabled, the auth config can be used to create new connected accounts\n   * and authenticate with third-party services.\n   *\n   * @param {string} nanoid - The unique identifier of the auth config to enable\n   * @returns {Promise<AuthConfigUpdateStatusResponse>} The updated auth config details\n   * @throws {Error} If the auth config cannot be found or enabled\n   *\n   * @example\n   * ```typescript\n   * // Enable an auth config\n   * await composio.authConfigs.enable('auth_abc123');\n   * ```\n   */\n  async enable(nanoid) {\n    return this.client.authConfigs.updateStatus(\"ENABLED\", { nanoid });\n  }\n  /**\n   * Disables an authentication configuration.\n   *\n   * This is a convenience method that calls updateStatus with 'DISABLED'.\n   * When disabled, the auth config cannot be used to create new connected accounts\n   * or authenticate with third-party services, but existing connections may continue to work.\n   *\n   * @param {string} nanoid - The unique identifier of the auth config to disable\n   * @returns {Promise<AuthConfigUpdateStatusResponse>} The updated auth config details\n   * @throws {Error} If the auth config cannot be found or disabled\n   *\n   * @example\n   * ```typescript\n   * // Disable an auth config\n   * await composio.authConfigs.disable('auth_abc123');\n   * ```\n   */\n  async disable(nanoid) {\n    return this.client.authConfigs.updateStatus(\"DISABLED\", { nanoid });\n  }\n};\n\n// src/models/ConnectionRequest.ts\nimport ComposioClient from \"@composio/client\";\nfunction createConnectionRequest(client, connectedAccountId, status, redirectUrl) {\n  const state = {\n    id: connectedAccountId,\n    status: status || ConnectedAccountStatuses.INITIATED,\n    redirectUrl\n  };\n  telemetry.instrument(state);\n  async function waitForConnection(timeout = 6e4) {\n    try {\n      const response = await client.connectedAccounts.retrieve(state.id);\n      if (response.status === ConnectedAccountStatuses.ACTIVE) {\n        state.status = ConnectedAccountStatuses.ACTIVE;\n        return transformConnectedAccountResponse(response);\n      }\n    } catch (error) {\n      if (error instanceof ComposioClient.NotFoundError) {\n        throw new ComposioConnectedAccountNotFoundError(\n          `Connected account with id ${state.id} not found`,\n          {\n            meta: {\n              connectedAccountId: state.id\n            }\n          }\n        );\n      } else {\n        throw error;\n      }\n    }\n    const terminalErrorStates = [\n      ConnectedAccountStatuses.FAILED,\n      ConnectedAccountStatuses.EXPIRED\n    ];\n    const start = Date.now();\n    const pollInterval = 1e3;\n    while (Date.now() - start < timeout) {\n      try {\n        const response = await client.connectedAccounts.retrieve(state.id);\n        state.status = response.status;\n        if (response.status === ConnectedAccountStatuses.ACTIVE) {\n          return transformConnectedAccountResponse(response);\n        }\n        if (terminalErrorStates.includes(response.status)) {\n          throw new ConnectionRequestFailedError(\n            `Connection request failed with status: ${response.status}${response.status_reason ? `, reason: ${response.status_reason}` : \"\"}`,\n            {\n              meta: {\n                connectedAccountId: state.id,\n                status: response.status,\n                statusReason: response.status_reason\n              }\n            }\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, pollInterval));\n      } catch (error) {\n        throw error;\n      }\n    }\n    throw new ConnectionRequestTimeoutError(`Connection request timed out for ${state.id}`);\n  }\n  return {\n    ...state,\n    waitForConnection,\n    toJSON: () => ({ ...state }),\n    toString: () => JSON.stringify(state, null, 2)\n  };\n}\n\n// src/models/ConnectedAccounts.ts\nvar ConnectedAccounts = class {\n  client;\n  constructor(client) {\n    this.client = client;\n    telemetry.instrument(this);\n  }\n  /**\n   * Lists all connected accounts based on provided filter criteria.\n   *\n   * This method retrieves connected accounts from the Composio API with optional filtering.\n   *\n   * @param {ConnectedAccountListParams} [query] - Optional query parameters for filtering connected accounts\n   * @returns {Promise<ConnectedAccountListResponse>} A paginated list of connected accounts\n   * @throws {ValidationError} If the query fails validation against the expected schema\n   * @example\n   * ```typescript\n   * // List all connected accounts\n   * const allAccounts = await composio.connectedAccounts.list();\n   *\n   * // List accounts for a specific user\n   * const userAccounts = await composio.connectedAccounts.list({\n   *   userIds: ['user123']\n   * });\n   *\n   * // List accounts for a specific toolkit\n   * const githubAccounts = await composio.connectedAccounts.list({\n   *   toolkitSlugs: ['github']\n   * });\n   * ```\n   */\n  async list(query) {\n    let rawQuery = void 0;\n    if (query) {\n      const parsedQuery = ConnectedAccountListParamsSchema.safeParse(query);\n      if (!parsedQuery.success) {\n        throw new ValidationError(\"Failed to parse connected account list query\", {\n          cause: parsedQuery.error\n        });\n      }\n      rawQuery = {\n        auth_config_ids: parsedQuery.data.authConfigIds,\n        cursor: parsedQuery.data.cursor?.toString(),\n        labels: parsedQuery.data.labels,\n        limit: parsedQuery.data.limit,\n        order_by: parsedQuery.data.orderBy,\n        statuses: parsedQuery.data.statuses,\n        toolkit_slugs: parsedQuery.data.toolkitSlugs,\n        user_ids: parsedQuery.data.userIds\n      };\n    }\n    const result = await this.client.connectedAccounts.list(rawQuery);\n    return transformConnectedAccountListResponse(result);\n  }\n  /**\n   * Compound function to create a new connected account.\n   * This function creates a new connected account and returns a connection request.\n   * Users can then wait for the connection to be established using the `waitForConnection` method.\n   *\n   * @param {string} userId - User ID of the connected account\n   * @param {string} authConfigId - Auth config ID of the connected account\n   * @param {CreateConnectedAccountOptions} options - Options for creating a new connected account\n   * @returns {Promise<ConnectionRequest>} Connection request object\n   *\n   * @example\n   * ```typescript\n   * // For OAuth2 authentication\n   * const connectionRequest = await composio.connectedAccounts.initiate(\n   *   'user_123',\n   *   'auth_config_123',\n   *   {\n   *     callbackUrl: 'https://your-app.com/callback',\n   *     config: AuthScheme.OAuth2({\n   *       access_token: 'your_access_token',\n   *       token_type: 'Bearer'\n   *     })\n   *   }\n   * );\n   *\n   * // For API Key authentication\n   * const connectionRequest = await composio.connectedAccounts.initiate(\n   *   'user_123',\n   *   'auth_config_123',\n   *   {\n   *     config: AuthScheme.ApiKey({\n   *       api_key: 'your_api_key'\n   *     })\n   *   }\n   * );\n   *\n   * // For Basic authentication\n   * const connectionRequest = await composio.connectedAccounts.initiate(\n   *   'user_123',\n   *   'auth_config_123',\n   *   {\n   *     config: AuthScheme.Basic({\n   *       username: 'your_username',\n   *       password: 'your_password'\n   *     })\n   *   }\n   * );\n   * ```\n   *\n   * @link https://docs.composio.dev/reference/connected-accounts/create-connected-account\n   */\n  async initiate(userId, authConfigId, options) {\n    const connectedAccount = await this.list({\n      userIds: [userId],\n      authConfigIds: [authConfigId]\n    });\n    if (connectedAccount.items.length > 0 && !options?.allowMultiple) {\n      throw new ComposioMultipleConnectedAccountsError(\n        `Multiple connected accounts found for user ${userId} in auth config ${authConfigId}`\n      );\n    } else if (connectedAccount.items.length > 0) {\n      logger_default.warn(\n        `[Warn:AllowMultiple] Multiple connected accounts found for user ${userId} in auth config ${authConfigId}`\n      );\n    }\n    const state = options?.config ?? void 0;\n    const response = await this.client.connectedAccounts.create({\n      auth_config: {\n        id: authConfigId\n      },\n      connection: {\n        callback_url: options?.callbackUrl,\n        user_id: userId,\n        state\n      }\n      // @TODO: This is a temporary fix to allow api_key to be optional, in future ideally we should fix this from API side\n    });\n    const redirectUrl = typeof response.connectionData?.val?.redirectUrl === \"string\" ? response.connectionData.val.redirectUrl : null;\n    return createConnectionRequest(\n      this.client,\n      response.id,\n      response.connectionData.val.status,\n      redirectUrl\n    );\n  }\n  /**\n   * Waits for a connection request to complete and become active.\n   *\n   * This method continuously polls the Composio API to check the status of a connection\n   * until it either becomes active, enters a terminal error state, or times out.\n   *\n   * @param {string} connectedAccountId - The ID of the connected account to wait for\n   * @param {number} [timeout=60000] - Maximum time to wait in milliseconds (default: 60 seconds)\n   * @returns {Promise<ConnectedAccountRetrieveResponse>} The finalized connected account data\n   * @throws {ComposioConnectedAccountNotFoundError} If the connected account cannot be found\n   * @throws {ConnectionRequestFailedError} If the connection enters a failed, expired, or deleted state\n   * @throws {ConnectionRequestTimeoutError} If the connection does not complete within the timeout period\n   *\n   * @example\n   * ```typescript\n   * // Wait for a connection to complete with default timeout\n   * const connectedAccount = await composio.connectedAccounts.waitForConnection('conn_123abc');\n   *\n   * // Wait with a custom timeout of 2 minutes\n   * const connectedAccount = await composio.connectedAccounts.waitForConnection('conn_123abc', 120000);\n   * ```\n   */\n  async waitForConnection(connectedAccountId, timeout = 6e4) {\n    const connectionRequest = createConnectionRequest(this.client, connectedAccountId);\n    return connectionRequest.waitForConnection(timeout);\n  }\n  /**\n   * Retrieves a specific connected account by its ID.\n   *\n   * This method fetches detailed information about a single connected account\n   * and transforms the response to the SDK's standardized format.\n   *\n   * @param {string} nanoid - The unique identifier of the connected account\n   * @returns {Promise<ConnectedAccountRetrieveResponse>} The connected account details\n   * @throws {Error} If the connected account cannot be found or an API error occurs\n   *\n   * @example\n   * ```typescript\n   * // Get a connected account by ID\n   * const account = await composio.connectedAccounts.get('conn_abc123');\n   * console.log(account.status); // e.g., 'ACTIVE'\n   * console.log(account.toolkit.slug); // e.g., 'github'\n   * ```\n   */\n  async get(nanoid) {\n    const response = await this.client.connectedAccounts.retrieve(nanoid);\n    return transformConnectedAccountResponse(response);\n  }\n  /**\n   * Deletes a connected account.\n   *\n   * This method permanently removes a connected account from the Composio platform.\n   * This action cannot be undone and will revoke any access tokens associated with the account.\n   *\n   * @param {string} nanoid - The unique identifier of the connected account to delete\n   * @returns {Promise<ConnectedAccountDeleteResponse>} The deletion response\n   * @throws {Error} If the account doesn't exist or cannot be deleted\n   *\n   * @example\n   * ```typescript\n   * // Delete a connected account\n   * await composio.connectedAccounts.delete('conn_abc123');\n   * ```\n   */\n  async delete(nanoid) {\n    return this.client.connectedAccounts.delete(nanoid);\n  }\n  /**\n   * Refreshes a connected account's authentication credentials.\n   *\n   * This method attempts to refresh OAuth tokens or other credentials associated with\n   * the connected account. This is useful when a token has expired or is about to expire.\n   *\n   * @param {string} nanoid - The unique identifier of the connected account to refresh\n   * @returns {Promise<ConnectedAccountRefreshResponse>} The response containing the refreshed account details\n   * @throws {Error} If the account doesn't exist or credentials cannot be refreshed\n   *\n   * @example\n   * ```typescript\n   * // Refresh a connected account's credentials\n   * const refreshedAccount = await composio.connectedAccounts.refresh('conn_abc123');\n   * ```\n   */\n  async refresh(nanoid) {\n    return this.client.connectedAccounts.refresh(nanoid);\n  }\n  /**\n   * Update the status of a connected account\n   * @param {string} nanoid - Unique identifier of the connected account\n   * @param {ConnectedAccountUpdateStatusParams} params - Parameters for updating the status\n   * @returns {Promise<ConnectedAccountUpdateStatusResponse>} Updated connected account details\n   *\n   * @example\n   * ```typescript\n   * // Enable a connected account\n   * const updatedAccount = await composio.connectedAccounts.updateStatus('conn_abc123', {\n   *   enabled: true\n   * });\n   *\n   * // Disable a connected account with a reason\n   * const disabledAccount = await composio.connectedAccounts.updateStatus('conn_abc123', {\n   *   enabled: false,\n   *   reason: 'Token expired'\n   * });\n   * ```\n   */\n  async updateStatus(nanoid, params) {\n    return this.client.connectedAccounts.updateStatus(nanoid, params);\n  }\n  /**\n   * Enable a connected account\n   * @param {string} nanoid - Unique identifier of the connected account\n   * @returns {Promise<ConnectedAccountUpdateStatusResponse>} Updated connected account details\n   *\n   * @example\n   * ```typescript\n   * // Enable a previously disabled connected account\n   * const enabledAccount = await composio.connectedAccounts.enable('conn_abc123');\n   * console.log(enabledAccount.isDisabled); // false\n   * ```\n   */\n  async enable(nanoid) {\n    return this.client.connectedAccounts.updateStatus(nanoid, { enabled: true });\n  }\n  /**\n   * Disable a connected account\n   * @param {string} nanoid - Unique identifier of the connected account\n   * @returns {Promise<ConnectedAccountUpdateStatusResponse>} Updated connected account details\n   *\n   * @example\n   * ```typescript\n   * // Disable a connected account\n   * const disabledAccount = await composio.connectedAccounts.disable('conn_abc123');\n   * console.log(disabledAccount.isDisabled); // true\n   *\n   * // You can also use updateStatus with a reason\n   * // const disabledAccount = await composio.connectedAccounts.updateStatus('conn_abc123', {\n   * //   enabled: false,\n   * //   reason: 'No longer needed'\n   * // });\n   * ```\n   */\n  async disable(nanoid) {\n    return this.client.connectedAccounts.updateStatus(nanoid, { enabled: false });\n  }\n};\n\n// src/models/Toolkits.ts\nimport { APIError } from \"openai\";\n\n// src/utils/transformers/toolkits.ts\nvar transformToolkitListResponse = (response) => {\n  return transform(response).with(ToolKitListResponseSchema).using(\n    (response2) => response2.items.map((item) => ({\n      name: item.name,\n      slug: item.slug,\n      meta: {\n        ...item.meta,\n        categories: item.meta.categories?.map((category) => ({\n          slug: category.id,\n          name: category.name\n        })),\n        createdAt: item.meta.created_at,\n        description: item.meta.description,\n        logo: item.meta.logo,\n        toolsCount: item.meta.tools_count,\n        triggersCount: item.meta.triggers_count,\n        updatedAt: item.meta.updated_at,\n        appUrl: item.meta.app_url ?? void 0\n      },\n      isLocalToolkit: item.is_local_toolkit,\n      authSchemes: item.auth_schemes,\n      composioManagedAuthSchemes: item.composio_managed_auth_schemes,\n      noAuth: item.no_auth\n    }))\n  );\n};\nvar transformToolkitRetrieveResponse = (response) => {\n  return transform(response).with(ToolkitRetrieveResponseSchema).using((response2) => ({\n    name: response2.name,\n    slug: response2.slug,\n    meta: {\n      ...response2.meta,\n      createdAt: response2.meta.created_at,\n      updatedAt: response2.meta.updated_at,\n      toolsCount: response2.meta.tools_count,\n      triggersCount: response2.meta.triggers_count,\n      categories: response2.meta.categories?.map((category) => ({\n        slug: category.slug,\n        name: category.name\n      }))\n      // appUrl: response.meta.app_url, @TODO Update the client type to include this\n    },\n    isLocalToolkit: response2.is_local_toolkit,\n    composioManagedAuthSchemes: response2.composio_managed_auth_schemes,\n    authConfigDetails: response2.auth_config_details?.map((authConfig) => ({\n      name: authConfig.name,\n      mode: authConfig.mode,\n      fields: {\n        authConfigCreation: authConfig.fields.auth_config_creation,\n        connectedAccountInitiation: authConfig.fields.connected_account_initiation\n      },\n      proxy: {\n        baseUrl: authConfig.proxy?.base_url\n      }\n    }))\n  }));\n};\nvar transformToolkitRetrieveCategoriesResponse = (response) => {\n  return transform(response).with(ToolkitRetrieveCategoriesResponseSchema).using((response2) => ({\n    items: response2.items.map((item) => ({\n      id: item.id,\n      name: item.name\n    })),\n    nextCursor: response2.next_cursor ?? null,\n    totalPages: response2.total_pages\n  }));\n};\n\n// src/models/Toolkits.ts\nvar Toolkits = class {\n  client;\n  constructor(client) {\n    this.client = client;\n    this.authorize = this.authorize.bind(this);\n    telemetry.instrument(this);\n  }\n  /**\n   * Retrieves a list of toolkits based on the provided query parameters.\n   *\n   * This method fetches toolkits from the Composio API and transforms the response\n   * from snake_case to camelCase format for consistency with JavaScript/TypeScript conventions.\n   *\n   * @param {ToolkitListParams} query - The query parameters to filter toolkits\n   * @returns {Promise<ToolKitListResponse>} The transformed list of toolkits\n   *\n   * @private\n   */\n  async getToolkits(query) {\n    try {\n      const parsedQuery = ToolkitsListParamsSchema.safeParse(query);\n      if (!parsedQuery.success) {\n        throw new ValidationError(\"Failed to parse toolkit list query\", {\n          cause: parsedQuery.error\n        });\n      }\n      const result = await this.client.toolkits.list({\n        category: parsedQuery.data.category,\n        is_local: parsedQuery.data.isLocal,\n        managed_by: parsedQuery.data.managedBy,\n        sort_by: parsedQuery.data.sortBy\n      });\n      return transformToolkitListResponse(result);\n    } catch (error) {\n      throw new ComposioToolkitFetchError(\"Failed to fetch toolkits\", {\n        cause: error\n      });\n    }\n  }\n  /**\n   * Retrieves a specific toolkit by its slug identifier.\n   *\n   * This method fetches a single toolkit from the Composio API and transforms\n   * the response to use camelCase property naming consistent with JavaScript/TypeScript conventions.\n   *\n   * @param {string} slug - The unique slug identifier of the toolkit to retrieve\n   * @returns {Promise<ToolkitRetrieveResponse>} The transformed toolkit object\n   * @throws {ValidationError} If the response cannot be properly parsed\n   * @throws {ComposioToolNotFoundError} If no toolkit with the given slug exists\n   *\n   * @private\n   */\n  async getToolkitBySlug(slug) {\n    try {\n      const result = await this.client.toolkits.retrieve(slug);\n      return transformToolkitRetrieveResponse(result);\n    } catch (error) {\n      if (error instanceof APIError && (error.status === 404 || error.status === 400)) {\n        throw new ComposioToolkitNotFoundError(`Toolkit with slug ${slug} not found`, {\n          meta: {\n            slug\n          },\n          cause: error\n        });\n      }\n      throw new ComposioToolkitFetchError(`Couldn't fetch Toolkit with slug: ${slug}`, {\n        meta: {\n          slug\n        },\n        cause: error\n      });\n    }\n  }\n  /**\n   * Implementation method that handles both overloads for retrieving toolkits.\n   *\n   * @param {string | ToolkitListParams} arg - Either a toolkit slug or query parameters\n   * @returns {Promise<ToolkitRetrieveResponse | ToolKitListResponse>} The toolkit or list of toolkits\n   */\n  async get(arg) {\n    if (typeof arg === \"string\") {\n      return this.getToolkitBySlug(arg);\n    }\n    return this.getToolkits(arg ?? {});\n  }\n  async getAuthConfigFields(toolkitSlug, authScheme, authConfigType, requiredOnly) {\n    const toolkit = await this.getToolkitBySlug(toolkitSlug);\n    if (!toolkit.authConfigDetails) {\n      throw new ComposioAuthConfigNotFoundError(\"No auth config found for toolkit\", {\n        meta: {\n          toolkitSlug\n        }\n      });\n    }\n    if (toolkit.authConfigDetails.length > 1 && !authScheme) {\n      logger_default.warn(\n        `Multiple auth configs found for ${toolkitSlug}, please specify the auth scheme to get details of specific auth scheme. Selecting the first scheme by default.`,\n        {\n          meta: {\n            toolkitSlug\n          }\n        }\n      );\n    }\n    const authConfig = authScheme ? toolkit.authConfigDetails.find((authConfig2) => authConfig2.mode === authScheme) : toolkit.authConfigDetails[0];\n    if (!authConfig) {\n      throw new ComposioAuthConfigNotFoundError(\n        `Auth schema ${authScheme} not found for toolkit ${toolkitSlug} with auth scheme ${authScheme}`,\n        {\n          meta: {\n            toolkitSlug,\n            authScheme\n          }\n        }\n      );\n    }\n    const requiredFields = authConfig.fields[authConfigType].required.map((field) => ({\n      ...field,\n      required: true\n    }));\n    if (requiredOnly) {\n      return requiredFields;\n    }\n    const optionalFields = authConfig.fields[authConfigType].optional.map((field) => ({\n      ...field,\n      required: false\n    }));\n    return [...requiredFields, ...optionalFields];\n  }\n  /**\n   * Retrieves the fields required for creating an auth config for a toolkit.\n   * @param toolkitSlug - The slug of the toolkit to retrieve the fields for\n   * @param authScheme - The auth scheme to retrieve the fields for\n   * @param options.requiredOnly - Whether to only return the required fields\n   * @returns {Promise<ToolkitAuthFieldsResponse>} The fields required for creating an auth config\n   */\n  async getAuthConfigCreationFields(toolkitSlug, authScheme, { requiredOnly = false } = {}) {\n    return this.getAuthConfigFields(\n      toolkitSlug,\n      authScheme ?? null,\n      \"authConfigCreation\",\n      requiredOnly\n    );\n  }\n  /**\n   * Retrieves the fields required for initiating a connected account for a toolkit.\n   * @param toolkitSlug - The slug of the toolkit to retrieve the fields for\n   * @param authScheme - The auth scheme to retrieve the fields for\n   * @param options.requiredOnly - Whether to only return the required fields\n   * @returns {Promise<ToolkitAuthFieldsResponse>} The fields required for initiating a connected account\n   */\n  async getConnectedAccountInitiationFields(toolkitSlug, authScheme, { requiredOnly = false } = {}) {\n    return this.getAuthConfigFields(\n      toolkitSlug,\n      authScheme ?? null,\n      \"connectedAccountInitiation\",\n      requiredOnly\n    );\n  }\n  /**\n   * Retrieves all toolkit categories available in the Composio SDK.\n   *\n   * This method fetches the complete list of categories from the Composio API\n   * and transforms the response to use camelCase property naming.\n   *\n   * @returns {Promise<ToolkitRetrieveCategoriesResponse>} The list of toolkit categories\n   *\n   * @example\n   * ```typescript\n   * // Get all toolkit categories\n   * const categories = await composio.toolkits.listCategories();\n   * console.log(categories.items); // Array of category objects\n   * ```\n   */\n  async listCategories() {\n    const result = await this.client.toolkits.retrieveCategories();\n    return transformToolkitRetrieveCategoriesResponse(result);\n  }\n  /**\n   * Authorizes a user to use a toolkit.\n   * This method will create an auth config if one doesn't exist and initiate a connection request.\n   * @param {string} userId - The user id of the user to authorize\n   * @param {string} toolkitSlug - The slug of the toolkit to authorize\n   * @returns {Promise<ConnectionRequest>} The connection request object\n   *\n   * @example\n   * ```typescript\n   * const connectionRequest = await composio.toolkits.authorize(userId, 'github');\n   * ```\n   */\n  async authorize(userId, toolkitSlug) {\n    const toolkit = await this.getToolkitBySlug(toolkitSlug);\n    const composioAuthConfig = new AuthConfigs(this.client);\n    let authConfigIdToUse;\n    const authConfig = await composioAuthConfig.list({\n      toolkit: toolkitSlug\n    });\n    authConfigIdToUse = authConfig.items[0]?.id;\n    if (!authConfigIdToUse) {\n      if (toolkit.authConfigDetails && toolkit.authConfigDetails.length > 0) {\n        try {\n          const authConfig2 = await composioAuthConfig.create(toolkitSlug, {\n            type: \"use_composio_managed_auth\",\n            name: `${toolkit.name} Auth Config`\n          });\n          authConfigIdToUse = authConfig2.id;\n        } catch (error) {\n          if (error instanceof ComposioClient2.APIError && error.status === 400) {\n            throw new ComposioAuthConfigNotFoundError(\n              `No Default auth config found for toolkit ${toolkitSlug}`,\n              {\n                meta: {\n                  toolkitSlug\n                },\n                cause: error,\n                possibleFixes: [\n                  `Please Create an auth config for the toolkit ${toolkitSlug} via the dashboard`\n                ]\n              }\n            );\n          }\n          throw error;\n        }\n      } else {\n        throw new ComposioAuthConfigNotFoundError(\n          `No auth configs found for toolkit ${toolkitSlug}`,\n          {\n            meta: {\n              toolkitSlug\n            }\n          }\n        );\n      }\n    }\n    const composioConnectedAccount = new ConnectedAccounts(this.client);\n    return await composioConnectedAccount.initiate(userId, authConfigIdToUse, {\n      // in this magic function we allow multiple connected accounts per user for an auth config\n      allowMultiple: true\n    });\n  }\n};\n\n// src/models/Triggers.ts\nimport { APIError as APIError2 } from \"@composio/client\";\n\n// src/types/triggers.types.ts\nimport { z as z6 } from \"zod\";\nvar TriggerStatuses = {\n  ENABLE: \"enable\",\n  DISABLE: \"disable\"\n};\nvar TriggerStatusEnum = z6.enum([\"enable\", \"disable\"]);\nvar TriggerSubscribeParamSchema = z6.object({\n  toolkits: z6.array(z6.string()).optional(),\n  triggerId: z6.string().optional(),\n  connectedAccountId: z6.string().optional(),\n  authConfigId: z6.string().optional(),\n  triggerSlug: z6.array(z6.string()).optional(),\n  triggerData: z6.string().optional(),\n  userId: z6.string().optional()\n});\nvar TriggerInstanceListActiveParamsSchema = z6.object({\n  authConfigIds: z6.array(z6.string()).nullable().optional(),\n  connectedAccountIds: z6.array(z6.string()).nullable().optional(),\n  limit: z6.number().optional(),\n  page: z6.number().optional(),\n  showDisabled: z6.boolean().nullable().optional(),\n  triggerIds: z6.array(z6.string()).nullable().optional(),\n  triggerNames: z6.array(z6.string()).nullable().optional()\n});\nvar TriggerInstanceListActiveResponseItemSchema = z6.object({\n  id: z6.string(),\n  connectedAccountId: z6.string(),\n  disabledAt: z6.string().nullable(),\n  state: z6.record(z6.unknown()),\n  triggerConfig: z6.record(z6.unknown()),\n  triggerName: z6.string(),\n  updatedAt: z6.string(),\n  triggerData: z6.string().optional(),\n  uuid: z6.string().optional()\n});\nvar TriggerInstanceListActiveResponseSchema = z6.object({\n  items: z6.array(TriggerInstanceListActiveResponseItemSchema),\n  nextCursor: z6.string().nullable(),\n  totalPages: z6.number()\n});\nvar TriggerInstanceUpsertParamsSchema = z6.object({\n  connectedAccountId: z6.string().optional(),\n  triggerConfig: z6.record(z6.unknown()).optional()\n});\nvar TriggerInstanceUpsertResponseSchema = z6.object({\n  triggerId: z6.string()\n});\nvar TriggerInstanceManageUpdateParamsSchema = z6.object({\n  status: z6.enum([\"enable\", \"disable\"])\n});\nvar TriggerInstanceManageUpdateResponseSchema = z6.object({\n  status: z6.enum([\"success\"])\n});\nvar TriggerInstanceManageDeleteResponseSchema = z6.object({\n  triggerId: z6.string()\n});\nvar IncomingTriggerPayloadSchema = z6.object({\n  id: z6.string().describe(\"The ID of the trigger\"),\n  uuid: z6.string().describe(\"The UUID of the trigger\"),\n  triggerSlug: z6.string().describe(\"The slug of the trigger that triggered the event\"),\n  toolkitSlug: z6.string().describe(\"The slug of the toolkit that triggered the event\"),\n  userId: z6.string().describe(\"The ID of the user that triggered the event\"),\n  payload: z6.record(z6.unknown()).describe(\"The payload of the trigger\").optional(),\n  originalPayload: z6.record(z6.unknown()).describe(\"The original payload of the trigger\").optional(),\n  metadata: z6.object({\n    id: z6.string(),\n    uuid: z6.string(),\n    toolkitSlug: z6.string(),\n    triggerSlug: z6.string(),\n    triggerData: z6.string().optional(),\n    triggerConfig: z6.record(z6.unknown()),\n    connectedAccount: z6.object({\n      id: z6.string(),\n      uuid: z6.string(),\n      authConfigId: z6.string(),\n      authConfigUUID: z6.string(),\n      userId: z6.string(),\n      status: z6.enum([\"ACTIVE\", \"INACTIVE\"])\n    })\n  })\n});\nvar TriggersTypeListParamsSchema = z6.object({\n  cursor: z6.string().optional(),\n  limit: z6.number().nullish(),\n  toolkits: z6.array(z6.string()).nullish()\n});\nvar TriggerTypeSchema = z6.object({\n  slug: z6.string(),\n  name: z6.string(),\n  description: z6.string(),\n  instructions: z6.string().optional(),\n  toolkit: z6.object({\n    logo: z6.string(),\n    slug: z6.string(),\n    name: z6.string()\n  }),\n  payload: z6.record(z6.unknown()),\n  config: z6.record(z6.unknown())\n});\nvar TriggersTypeListResponseSchema = z6.object({\n  items: z6.array(TriggerTypeSchema),\n  nextCursor: z6.string().nullish(),\n  totalPages: z6.number()\n});\n\n// src/services/internal/InternalService.types.ts\nimport { z as z7 } from \"zod\";\nvar SDKRealtimeCredentialsResponseSchema = z7.object({\n  projectId: z7.string().describe(\"The project ID\"),\n  pusherKey: z7.string().describe(\"The Pusher key\"),\n  pusherCluster: z7.string().describe(\"The Pusher cluster\")\n});\n\n// src/services/internal/InternalService.ts\nvar SDK_REALTIME_CREDENTIALS_ENDPOINT = \"/api/v3/internal/sdk/realtime/credentials\";\nvar InternalService = class {\n  constructor(client) {\n    this.client = client;\n    this.client = client;\n  }\n  /**\n   * Get the SDK realtime credentials\n   * @returns {SDKRealtimeCredentialsResponse} The SDK realtime credentials\n   */\n  async getSDKRealtimeCredentials() {\n    const response = await this.client.request({\n      method: \"get\",\n      path: SDK_REALTIME_CREDENTIALS_ENDPOINT\n    });\n    const parsedResponse = SDKRealtimeCredentialsResponseSchema.safeParse({\n      pusherKey: response.pusher_key,\n      projectId: response.project_id,\n      pusherCluster: response.pusher_cluster\n    });\n    logger_default.debug(\n      `[InternalService] SDK realtime credentials: ${JSON.stringify(parsedResponse, null, 2)}`\n    );\n    if (!parsedResponse.success) {\n      throw new ValidationError(`Failed to parse SDK realtime credentials`, {\n        cause: parsedResponse.error\n      });\n    }\n    return parsedResponse.data;\n  }\n};\n\n// src/errors/TriggerErrors.ts\nimport { ComposioError as ComposioError2 } from \"@composio/client\";\nvar TriggerErrorCodes = {\n  TRIGGER_FAILED_TO_GET_SDK_REALTIME_CREDENTIALS: \"TRIGGER_FAILED_TO_GET_SDK_REALTIME_CREDENTIALS\",\n  TRIGGER_FAILED_TO_CREATE_PUSHER_CLIENT: \"TRIGGER_FAILED_TO_CREATE_PUSHER_CLIENT\",\n  TRIGGER_FAILED_TO_SUBSCRIBE_TO_PUSHER_CHANNEL: \"TRIGGER_FAILED_TO_SUBSCRIBE_TO_PUSHER_CHANNEL\",\n  TRIGGER_FAILED_TO_UNSUBSCRIBE_FROM_PUSHER_CHANNEL: \"TRIGGER_FAILED_TO_UNSUBSCRIBE_FROM_PUSHER_CHANNEL\",\n  TRIGGER_TYPE_NOT_FOUND: \"TRIGGER_TYPE_NOT_FOUND\"\n};\nvar ComposioFailedToGetSDKRealtimeCredentialsError = class extends ComposioError2 {\n  name = \"ComposioFailedToGetSDKRealtimeCredentialsError\";\n  code = TriggerErrorCodes.TRIGGER_FAILED_TO_GET_SDK_REALTIME_CREDENTIALS;\n  statusCode = 500;\n  possibleFixes = [\"Please contact support.\"];\n  constructor(message, options) {\n    super(message, options);\n  }\n};\nvar ComposioFailedToCreatePusherClientError = class extends ComposioError2 {\n  name = \"ComposioFailedToCreatePusherClientError\";\n  code = TriggerErrorCodes.TRIGGER_FAILED_TO_CREATE_PUSHER_CLIENT;\n  statusCode = 500;\n  possibleFixes = [\"Please contact support.\"];\n  constructor(message, options) {\n    super(message, options);\n  }\n};\nvar ComposioFailedToSubscribeToPusherChannelError = class extends ComposioError2 {\n  name = \"ComposioFailedToSubscribeToPusherChannelError\";\n  code = TriggerErrorCodes.TRIGGER_FAILED_TO_SUBSCRIBE_TO_PUSHER_CHANNEL;\n  statusCode = 500;\n  possibleFixes = [\"Please contact support.\"];\n  constructor(message, options) {\n    super(message, options);\n  }\n};\nvar ComposioTriggerTypeNotFoundError = class extends ComposioError2 {\n  name = \"ComposioTriggerTypeNotFoundError\";\n  code = TriggerErrorCodes.TRIGGER_TYPE_NOT_FOUND;\n  statusCode = 404;\n  possibleFixes = [\"Please contact support.\"];\n  constructor(message = \"Trigger type not found\", options) {\n    super(message, options);\n  }\n};\n\n// src/services/pusher/Pusher.ts\nvar PusherService = class {\n  // these values are set via the Apollo API `/internal/sdk/realtime/credentials` endpoint\n  clientId;\n  pusherKey;\n  pusherCluster;\n  pusherChannel;\n  // these details are set via the client SDK\n  pusherBaseURL;\n  apiKey;\n  pusherClient;\n  composioClient;\n  constructor(client) {\n    this.composioClient = client;\n    this.pusherBaseURL = client.baseURL;\n    this.apiKey = client.apiKey ?? process.env.COMPOSIO_API_KEY ?? \"\";\n    telemetry.instrument(this);\n  }\n  /**\n   * Creates a Pusher client\n   *\n   * This method is called when the Pusher client is first used.\n   * It will fetch the SDK realtime credentials from the Apollo API and create a Pusher client.\n   */\n  async getPusherClient() {\n    if (!this.pusherClient) {\n      const internalService = new InternalService(this.composioClient);\n      let sdkRealtimeCredentials;\n      try {\n        sdkRealtimeCredentials = await internalService.getSDKRealtimeCredentials();\n      } catch (error) {\n        throw new ComposioFailedToGetSDKRealtimeCredentialsError(\n          \"Failed to get SDK realtime credentials\",\n          {\n            cause: error\n          }\n        );\n      }\n      this.clientId = sdkRealtimeCredentials.projectId;\n      this.pusherKey = sdkRealtimeCredentials.pusherKey;\n      this.pusherCluster = sdkRealtimeCredentials.pusherCluster;\n      this.pusherChannel = `private-${this.clientId}_triggers`;\n      logger_default.debug(\n        `[PusherService] Creating Pusher client for client ID: ${this.clientId} in cluster ${this.pusherCluster}`\n      );\n      try {\n        const { default: Pusher } = await import(\"pusher-js\");\n        this.pusherClient = new Pusher(this.pusherKey, {\n          cluster: this.pusherCluster,\n          channelAuthorization: {\n            endpoint: `${this.pusherBaseURL}/api/v3/internal/sdk/realtime/auth`,\n            headers: {\n              \"x-api-key\": this.apiKey\n            },\n            transport: \"ajax\"\n          }\n        });\n      } catch (error) {\n        throw new ComposioFailedToCreatePusherClientError(\"Failed to create Pusher client\", {\n          cause: error\n        });\n      }\n    }\n    return this.pusherClient;\n  }\n  /**\n   * Binds a chunked event to a Pusher client\n   *\n   *\n   * @param channel - The Pusher client to bind the event to\n   * @param event - The event to bind to\n   * @param callback - The function to call when the event is received\n   */\n  bindWithChunking(channel, event, callback) {\n    try {\n      channel.bind(event, callback);\n      const events = {};\n      channel.bind(\"chunked-\" + event, (data) => {\n        try {\n          const typedData = data;\n          if (!typedData || typeof typedData.id !== \"string\" || typeof typedData.index !== \"number\") {\n            throw new Error(\"Invalid chunked trigger data format\");\n          }\n          if (!events.hasOwnProperty(typedData.id)) {\n            events[typedData.id] = { chunks: [], receivedFinal: false };\n          }\n          const ev = events[typedData.id];\n          ev.chunks[typedData.index] = typedData.chunk;\n          if (typedData.final) ev.receivedFinal = true;\n          if (ev.receivedFinal && ev.chunks.length === Object.keys(ev.chunks).length) {\n            try {\n              const parsedData = JSON.parse(ev.chunks.join(\"\"));\n              callback(parsedData);\n            } catch (parseError) {\n              const errorMessage = parseError instanceof Error ? parseError.message : String(parseError);\n              logger_default.error(\"Failed to parse chunked data:\", errorMessage);\n            } finally {\n              delete events[typedData.id];\n            }\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          logger_default.error(\"Error processing chunked trigger data:\", errorMessage);\n          if (data && typeof data === \"object\" && \"id\" in data) {\n            delete events[data.id];\n          }\n        }\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger_default.error(\"Failed to bind chunked events:\", error);\n      throw new Error(`Failed to bind chunked events: ${errorMessage}`);\n    }\n  }\n  /**\n   * Subscribes to pusher to receive events from the server\n   *\n   * This method is used to subscribe to a Pusher channel.\n   * It will create a Pusher client if it doesn't exist.\n   *\n   * @param channelName - The name of the Pusher channel to subscribe to\n   * @param event - The event to subscribe to\n   * @param fn - The function to call when the event is received\n   */\n  async subscribe(fn) {\n    try {\n      logger_default.debug(`[PusherService] Subscribing to channel: ${this.pusherChannel}`);\n      const pusherClient = await this.getPusherClient();\n      const channel = await pusherClient.subscribe(this.pusherChannel);\n      channel.bind(\"pusher:subscription_error\", (data) => {\n        const error = data.error ? String(data.error) : \"Unknown subscription error\";\n        throw new ComposioFailedToSubscribeToPusherChannelError(\n          `Trigger subscription error: ${error}`,\n          {\n            cause: error\n          }\n        );\n      });\n      const safeCallback = (data) => {\n        try {\n          fn(data);\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          logger_default.error(\"\\u274C Error in trigger callback:\", errorMessage);\n        }\n      };\n      this.bindWithChunking(channel, \"trigger_to_client\", safeCallback);\n      logger_default.info(`\\u2705 Subscribed to triggers. You should start receiving events now.`);\n    } catch (error) {\n      throw new ComposioFailedToSubscribeToPusherChannelError(\n        \"Failed to subscribe to Pusher channel\",\n        {\n          cause: error\n        }\n      );\n    }\n  }\n  /**\n   * Unsubscribes from a Pusher channel\n   *\n   * This method is used to unsubscribe from a Pusher channel.\n   * It will create a Pusher client if it doesn't exist.\n   *\n   * @param channelName - The name of the Pusher channel to unsubscribe from\n   */\n  async unsubscribe() {\n    try {\n      logger_default.debug(`[PusherService] Unsubscribing from channel: ${this.pusherChannel}`);\n      const pusherClient = await this.getPusherClient();\n      await pusherClient.unsubscribe(this.pusherChannel);\n      logger_default.info(`\\u2705 Unsubscribed from triggers.`);\n    } catch (error) {\n      throw new ComposioFailedToSubscribeToPusherChannelError(\n        \"Failed to unsubscribe from Pusher channel\",\n        {\n          cause: error\n        }\n      );\n    }\n  }\n};\n\n// src/utils/transformers/triggers.ts\nfunction transformIncomingTriggerPayload(response) {\n  return transform(response).with(IncomingTriggerPayloadSchema).using((response2) => ({\n    id: response2.metadata.nanoId,\n    uuid: response2.metadata.id,\n    triggerSlug: response2.metadata.triggerName,\n    toolkitSlug: response2.appName,\n    userId: response2.metadata.connection?.clientUniqueUserId,\n    payload: response2.payload,\n    originalPayload: response2.originalPayload,\n    metadata: {\n      id: response2.metadata.nanoId,\n      uuid: response2.metadata.id,\n      triggerConfig: response2.metadata.triggerConfig,\n      triggerSlug: response2.metadata.triggerName,\n      toolkitSlug: response2.appName,\n      triggerData: response2.metadata.triggerData,\n      connectedAccount: {\n        id: response2.metadata.connection?.connectedAccountNanoId,\n        uuid: response2.metadata.connection?.id,\n        authConfigId: response2.metadata.connection?.authConfigNanoId,\n        authConfigUUID: response2.metadata.connection?.integrationId,\n        userId: response2.metadata.connection?.clientUniqueUserId,\n        status: response2.metadata.connection?.status\n      }\n    }\n  }));\n}\nfunction transformTriggerTypeRetrieveResponse(response) {\n  return transform(response).with(TriggerTypeSchema).using((response2) => ({\n    slug: response2.slug,\n    name: response2.name,\n    description: response2.description,\n    instructions: response2.instructions,\n    toolkit: {\n      logo: response2.toolkit.logo,\n      slug: response2.toolkit.slug,\n      name: response2.toolkit.name\n    },\n    payload: response2.payload,\n    config: response2.config\n  }));\n}\nfunction transformTriggerTypeListResponse(response) {\n  return transform(response).with(TriggersTypeListResponseSchema).using((response2) => ({\n    items: response2.items,\n    nextCursor: response2.next_cursor ?? null,\n    totalPages: response2.total_pages\n  }));\n}\nfunction transformTriggerInstanceListActiveItem(response) {\n  return transform(response).with(TriggerInstanceListActiveResponseItemSchema).using((response2) => ({\n    id: response2.id,\n    connectedAccountId: response2.connected_account_id,\n    disabledAt: response2.disabled_at,\n    state: response2.state,\n    triggerConfig: response2.trigger_config,\n    triggerName: response2.trigger_name,\n    updatedAt: response2.updated_at,\n    triggerData: response2.trigger_data,\n    uuid: response2.uuid\n  }));\n}\nfunction transformTriggerInstanceListActiveResponse(response) {\n  return transform(response).with(TriggerInstanceListActiveResponseSchema).using((response2) => ({\n    items: response2.items.map((item) => transformTriggerInstanceListActiveItem(item)),\n    nextCursor: response2.next_cursor ?? null,\n    totalPages: response2.total_pages\n  }));\n}\n\n// src/models/Triggers.ts\nvar Triggers = class {\n  client;\n  pusherService;\n  constructor(client) {\n    this.client = client;\n    this.pusherService = new PusherService(client);\n    telemetry.instrument(this);\n  }\n  /**\n   * Fetch list of all the active triggers\n   *\n   * @param {TriggerInstanceListActiveParams} query - The query parameters to filter the trigger instances\n   * @returns {Promise<TriggerInstanceListActiveResponse>} List of trigger instances\n   *\n   * @throws {ValidationError} If the parameters are invalid\n   * @throws {Error} If the client is not authenticated\n   *\n   * @example\n   * ```ts\n   * const triggers = await triggers.listActive({\n   *   authConfigIds: ['123'],\n   *   connectedAccountIds: ['456'],\n   * });\n   * ```\n   */\n  async listActive(query) {\n    const parsedParams = TriggerInstanceListActiveParamsSchema.safeParse(query ?? {});\n    if (!parsedParams.success) {\n      throw new ValidationError(`Invalid parameters passed to list triggers`, {\n        cause: parsedParams.error\n      });\n    }\n    const result = await this.client.triggerInstances.listActive(\n      query ? {\n        auth_config_ids: parsedParams.data.authConfigIds,\n        connected_account_ids: parsedParams.data.connectedAccountIds,\n        limit: parsedParams.data.limit,\n        page: parsedParams.data.page,\n        show_disabled: parsedParams.data.showDisabled,\n        trigger_ids: parsedParams.data.triggerIds,\n        trigger_names: parsedParams.data.triggerNames\n      } : void 0\n    );\n    return transformTriggerInstanceListActiveResponse(result);\n  }\n  /**\n   * Create a new trigger instance for a user\n   * If the connected account id is not provided, the first connected account for the user and toolkit will be used\n   *\n   * @param {string} userId - The user id of the trigger instance\n   * @param {string} slug - The slug of the trigger instance\n   * @param {TriggerInstanceUpsertParams} body - The parameters to create the trigger instance\n   * @returns {Promise<TriggerInstanceUpsertResponse>} The created trigger instance\n   */\n  async create(userId, slug, body) {\n    const parsedBody = TriggerInstanceUpsertParamsSchema.safeParse(body ?? {});\n    if (!parsedBody.success) {\n      throw new ValidationError(`Invalid parameters passed to create trigger`, {\n        cause: parsedBody.error\n      });\n    }\n    let triggerType;\n    let toolkitSlug;\n    try {\n      triggerType = await this.getType(slug);\n      toolkitSlug = triggerType.toolkit.slug;\n    } catch (error) {\n      if (error instanceof APIError2 && (error.status === 400 || error.status === 404)) {\n        throw new ComposioTriggerTypeNotFoundError(`Trigger type ${slug} not found`, {\n          cause: error,\n          possibleFixes: [\n            `Please check the trigger slug`,\n            `Visit the toolkit page to see the available triggers`\n          ]\n        });\n      } else {\n        throw error;\n      }\n    }\n    let connectedAccountId = body?.connectedAccountId;\n    try {\n      const { items: connectedAccounts } = await this.client.connectedAccounts.list({\n        user_ids: [userId],\n        toolkit_slugs: [toolkitSlug]\n      });\n      if (connectedAccounts.length === 0) {\n        throw new ComposioConnectedAccountNotFoundError(\n          `No connected account found for user ${userId} for toolkit ${toolkitSlug}`,\n          {\n            cause: new Error(`No connected account found for user ${userId}`),\n            possibleFixes: [`Create a new connected account for user ${userId}`]\n          }\n        );\n      }\n      const accountExists = connectedAccounts.some((acc) => acc.id === connectedAccountId);\n      if (connectedAccountId && !accountExists) {\n        throw new ComposioConnectedAccountNotFoundError(\n          `Connected account ID ${connectedAccountId} not found for user ${userId}`,\n          {\n            cause: new Error(\n              `Connected account ID ${connectedAccountId} not found for user ${userId}`\n            ),\n            possibleFixes: [\n              `Create a new connected account for user ${userId}`,\n              `Verify the connected account ID`\n            ]\n          }\n        );\n      }\n      if (!connectedAccountId) {\n        connectedAccountId = connectedAccounts[0].id;\n        logger_default.warn(\n          `[Warn] Multiple connected accounts found for user ${userId}, using the first one. Pass connectedAccountId to select a specific account.`\n        );\n      }\n    } catch (error) {\n      if (error instanceof APIError2 && [400, 404].includes(error.status)) {\n        throw new ComposioConnectedAccountNotFoundError(\n          `No connected account found for user ${userId} for toolkit ${toolkitSlug}`,\n          {\n            cause: error,\n            possibleFixes: [`Create a new connected account for user ${userId}`]\n          }\n        );\n      }\n      throw error;\n    }\n    const result = await this.client.triggerInstances.upsert(slug, {\n      connected_account_id: connectedAccountId,\n      trigger_config: parsedBody.data.triggerConfig\n    });\n    return {\n      triggerId: result.trigger_id\n    };\n  }\n  /**\n   * Update an existing trigger instance\n   *\n   * @param {string} triggerId - The Id of the trigger instance\n   * @param {TriggerInstanceManageUpdateParams} body - The parameters to update the trigger instance\n   * @returns {Promise<TriggerInstanceManageUpdateResponse>} The updated trigger instance response\n   */\n  async update(triggerId, body) {\n    return this.client.triggerInstances.manage.update(triggerId, body);\n  }\n  /**\n   * Delete a trigger instance\n   *\n   * @param {string} triggerId - The slug of the trigger instance\n   * @returns\n   */\n  async delete(triggerId) {\n    const result = await this.client.triggerInstances.manage.delete(triggerId);\n    return {\n      triggerId: result.trigger_id\n    };\n  }\n  /**\n   * Disable a trigger instance\n   *\n   * @param {string} triggerId - The id of the trigger instance\n   * @returns {Promise<TriggerInstanceUpsertResponse>} The updated trigger instance\n   */\n  async disable(triggerId) {\n    return this.client.triggerInstances.manage.update(triggerId, {\n      status: \"disable\"\n    });\n  }\n  /**\n   * Enable a trigger instance\n   *\n   * @param {string} triggerId - The id of the trigger instance\n   * @returns {Promise<TriggerInstanceUpsertResponse>} The updated trigger instance\n   */\n  async enable(triggerId) {\n    return this.client.triggerInstances.manage.update(triggerId, {\n      status: \"enable\"\n    });\n  }\n  /**\n   * @TODO Learn about trigger types\n   */\n  /**\n   * List all the trigger types\n   *\n   * @param {TriggersTypeListParams} query - The query parameters to filter the trigger types\n   * @param {RequestOptions} options - Request options\n   * @returns {Promise<TriggersTypeListResponse>} The list of trigger types\n   */\n  async listTypes(query) {\n    const parsedQuery = transform(query ?? {}).with(TriggersTypeListParamsSchema).using((raw) => raw);\n    const result = await this.client.triggersTypes.list({\n      cursor: parsedQuery.cursor,\n      limit: parsedQuery.limit,\n      toolkit_slugs: parsedQuery.toolkits\n    });\n    return transformTriggerTypeListResponse(result);\n  }\n  /**\n   * Retrieve a trigger type by its slug\n   *\n   * @param {string} slug - The slug of the trigger type\n   * @param {RequestOptions} options - request options\n   * @returns {Promise<TriggersTypeRetrieveResponse>} The trigger type object\n   */\n  async getType(slug) {\n    const result = await this.client.triggersTypes.retrieve(slug);\n    return transformTriggerTypeRetrieveResponse(result);\n  }\n  /**\n   * Fetches the list of all the available trigger enums\n   *\n   * This method is used by the CLI where filters are not required.\n   * @param options\n   * @returns\n   */\n  async listEnum() {\n    return this.client.triggersTypes.retrieveEnum();\n  }\n  /**\n   * Applies compound filters to the trigger data\n   * @param data data to apply filters to\n   * @returns True if the trigger data matches the filters, false otherwise\n   */\n  shouldSendTriggerAfterFilters(filters, data) {\n    if (filters.toolkits?.length && !filters.toolkits.map((toolkit) => toolkit.toLowerCase()).includes(data.toolkitSlug.toLowerCase())) {\n      logger_default.debug(\n        \"Trigger does not match toolkits filter\",\n        JSON.stringify(filters.toolkits, null, 2)\n      );\n      return false;\n    }\n    if (filters.triggerId && filters.triggerId !== data.id) {\n      logger_default.debug(\n        \"Trigger does not match triggerId filter\",\n        JSON.stringify(filters.triggerId, null, 2)\n      );\n      return false;\n    }\n    if (filters.connectedAccountId && filters.connectedAccountId !== data.metadata.connectedAccount.id) {\n      logger_default.debug(\n        \"Trigger does not match connectedAccountId filter\",\n        JSON.stringify(filters.connectedAccountId, null, 2)\n      );\n      return false;\n    }\n    if (filters.triggerSlug?.length && !filters.triggerSlug.map((triggerSlug) => triggerSlug.toLowerCase()).includes(data.triggerSlug.toLowerCase())) {\n      logger_default.debug(\n        \"Trigger does not match triggerSlug filter\",\n        JSON.stringify(filters.triggerSlug, null, 2)\n      );\n      return false;\n    }\n    if (filters.triggerData && filters.triggerData !== data.metadata.triggerData) {\n      logger_default.debug(\n        \"Trigger does not match triggerData filter\",\n        JSON.stringify(filters.triggerData, null, 2)\n      );\n      return false;\n    }\n    if (filters.userId && filters.userId !== data.metadata.connectedAccount.userId) {\n      logger_default.debug(\"Trigger does not match userId filter\", JSON.stringify(filters.userId, null, 2));\n      return false;\n    }\n    logger_default.debug(\"Trigger matches all filters\", JSON.stringify(filters, null, 2));\n    return true;\n  }\n  /**\n   * Subscribe to all the triggers\n   *\n   * @param fn - The function to call when a trigger is received\n   * @param filters - The filters to apply to the triggers\n   *\n   * @example\n   * ```ts\n   *\n   * triggers.subscribe((data) => {\n   *   console.log(data);\n   * }, );\n   * ```\n   */\n  async subscribe(fn, filters = {}) {\n    if (!fn) throw new Error(\"Function is required for trigger subscription\");\n    const parsedFilters = TriggerSubscribeParamSchema.safeParse(filters);\n    if (!parsedFilters.success) {\n      throw new ValidationError(`Invalid parameters passed to subscribe to triggers`, {\n        cause: parsedFilters.error\n      });\n    }\n    logger_default.debug(\"\\u{1F504} Subscribing to triggers with filters: \", JSON.stringify(filters, null, 2));\n    await this.pusherService.subscribe((_data) => {\n      logger_default.debug(\"Received raw trigger data\", JSON.stringify(_data, null, 2));\n      const data = _data;\n      const parsedData = transformIncomingTriggerPayload(data);\n      if (this.shouldSendTriggerAfterFilters(parsedFilters.data, parsedData)) {\n        try {\n          fn(parsedData);\n        } catch (error) {\n          logger_default.error(\"\\u274C Error in trigger callback:\", error);\n        }\n      } else {\n        logger_default.debug(\"Trigger does not match filters\", JSON.stringify(parsedFilters.data, null, 2));\n      }\n    });\n  }\n  /**\n   * Unsubscribe from all the triggers\n   *\n   * @returns {Promise<void>}\n   *\n   * @example\n   * ```ts\n   * composio.trigger.subscribe((data) => {\n   *   console.log(data);\n   * });\n   *\n   * await triggers.unsubscribe();\n   * ```\n   */\n  async unsubscribe() {\n    await this.pusherService.unsubscribe();\n  }\n};\n\n// src/types/mcp.types.ts\nimport { z as z8 } from \"zod\";\nvar MCPToolkitConfigSchema = z8.object({\n  toolkit: z8.string().min(1, \"Toolkit name cannot be empty\"),\n  authConfigId: z8.string().min(1, \"Auth config ID cannot be empty\"),\n  allowedTools: z8.array(z8.string().min(1, \"Tool name cannot be empty\")).min(1, \"At least one tool must be specified\")\n});\nvar MCPToolkitConfigsArraySchema = z8.array(MCPToolkitConfigSchema).min(1, \"At least one toolkit configuration is required\").refine((configs) => {\n  const toolkits = configs.map((config) => config.toolkit);\n  const uniqueToolkits = new Set(toolkits);\n  return uniqueToolkits.size === toolkits.length;\n}, \"Duplicate toolkits are not allowed. Each toolkit must be unique.\");\nvar MCPAuthOptionsSchema = z8.object({\n  useComposioManagedAuth: z8.boolean().optional()\n});\nvar MCPGetServerParamsSchema = z8.object({\n  userId: z8.string().min(1, \"User ID cannot be empty\").optional(),\n  connectedAccountIds: z8.record(z8.string(), z8.string().min(1, \"Account ID cannot be empty\")).optional()\n}).refine(\n  (data) => {\n    const hasUserId = !!data.userId;\n    const hasConnectedAccountIds = !!data.connectedAccountIds && Object.keys(data.connectedAccountIds).length > 0;\n    return hasUserId !== hasConnectedAccountIds;\n  },\n  {\n    message: \"Must provide either userId or connectedAccountIds, but not both\"\n  }\n);\nvar MCPGenerateURLParamsSchema = z8.object({\n  userIds: z8.array(z8.string()).optional(),\n  connectedAccountIds: z8.array(z8.string()).optional(),\n  useComposioManagedAuth: z8.boolean().optional()\n});\nvar ComposioGenerateURLParamsSchema = z8.object({\n  user_ids: z8.array(z8.string()).optional(),\n  connected_account_ids: z8.array(z8.string()).optional(),\n  mcp_server_id: z8.string(),\n  managed_auth_by_composio: z8.boolean().optional()\n});\nvar GenerateURLParamsSchema = z8.object({\n  userIds: z8.array(z8.string()).optional(),\n  connectedAccountIds: z8.array(z8.string()).optional(),\n  mcpServerId: z8.string(),\n  composioManagedAuth: z8.boolean().optional()\n});\nvar GenerateURLResponseSchema = z8.object({\n  connectedAccountUrls: z8.array(z8.string()).optional(),\n  userIdsUrl: z8.array(z8.string()).optional(),\n  mcpUrl: z8.string().min(1, \"MCP URL cannot be empty\")\n});\nvar ComposioGenerateURLResponseSchema = z8.object({\n  connected_account_urls: z8.array(z8.string()).optional(),\n  user_ids_url: z8.array(z8.string()).optional(),\n  mcp_url: z8.string().min(1, \"MCP URL cannot be empty\")\n});\nvar MCPSingleAppServerSchema = z8.object({\n  name: z8.string().describe(\"Name of the MCP server\"),\n  tools: z8.array(z8.string()).describe(\"List of allowed tools\"),\n  authConfigId: z8.string().optional().describe(\"Auth config ID for the server\")\n});\nvar MCPMultiAppServerSchema = z8.object({\n  name: z8.string().describe(\"Name of the MCP server\"),\n  tools: z8.array(z8.string()).describe(\"List of allowed tools across toolkits\"),\n  toolkits: z8.array(z8.string()).describe(\"List of allowed toolkits\")\n});\nvar MCPServerSchema = z8.object({\n  id: z8.string().describe(\"Unique identifier for the MCP server\"),\n  type: z8.enum([\"single\", \"multi\"]).describe(\"Type of MCP server\"),\n  createdAt: z8.string().describe(\"Creation timestamp\"),\n  updatedAt: z8.string().describe(\"Last update timestamp\"),\n  status: z8.enum([\"active\", \"inactive\", \"error\"]).default(\"active\"),\n  config: z8.union([MCPSingleAppServerSchema, MCPMultiAppServerSchema])\n});\nvar MCPServerListResponseSchema = z8.object({\n  items: z8.array(MCPServerSchema),\n  total: z8.number(),\n  page: z8.number(),\n  pageSize: z8.number()\n});\nvar MCPServerUpdateParamsSchema = z8.object({\n  name: z8.string().optional().describe(\"New name for the server\"),\n  toolkits: z8.array(z8.string()).optional().describe(\"Updated list of toolkits\"),\n  allowedTools: z8.array(z8.string()).optional().describe(\"Updated list of allowed tools\")\n});\nvar MCPServerCreateResponseSchema = MCPServerSchema;\nvar CustomCreateResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  name: z8.string().min(1, \"Server name cannot be empty\"),\n  createdAt: z8.string().nullish(),\n  updatedAt: z8.string().nullish(),\n  status: z8.string().nullish()\n});\nvar ComposioCustomCreateResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  name: z8.string().min(1, \"Server name cannot be empty\"),\n  created_at: z8.string().nullish(),\n  updated_at: z8.string().nullish(),\n  status: z8.string().nullish()\n});\nvar McpListResponseSchema = z8.object({\n  items: z8.array(\n    z8.object({\n      id: z8.string().min(1, \"Server ID cannot be empty\"),\n      name: z8.string().min(1, \"Server name cannot be empty\"),\n      createdAt: z8.string().optional(),\n      updatedAt: z8.string().optional(),\n      status: z8.string().optional()\n    })\n  ).optional()\n});\nvar ComposioMcpListResponseSchema = z8.object({\n  items: z8.array(\n    z8.object({\n      id: z8.string().min(1, \"Server ID cannot be empty\"),\n      name: z8.string().min(1, \"Server name cannot be empty\"),\n      created_at: z8.string().optional(),\n      updated_at: z8.string().optional(),\n      status: z8.string().optional()\n    })\n  ).optional()\n});\nvar McpRetrieveResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  name: z8.string().min(1, \"Server name cannot be empty\"),\n  createdAt: z8.string().optional(),\n  updatedAt: z8.string().optional(),\n  status: z8.string().optional(),\n  toolkits: z8.array(z8.string()).optional(),\n  tools: z8.array(z8.string()).optional(),\n  managedAuthViaComposio: z8.boolean().optional()\n});\nvar ComposioMcpRetrieveResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  name: z8.string().min(1, \"Server name cannot be empty\"),\n  created_at: z8.string().optional(),\n  updated_at: z8.string().optional(),\n  status: z8.string().optional(),\n  toolkits: z8.array(z8.string()).optional(),\n  tools: z8.array(z8.string()).optional(),\n  managed_auth_via_composio: z8.boolean().optional()\n});\nvar McpDeleteResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  deleted: z8.boolean().optional(),\n  message: z8.string().optional()\n});\nvar ComposioMcpDeleteResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  deleted: z8.boolean().optional(),\n  message: z8.string().optional()\n});\nvar McpUpdateResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  name: z8.string().min(1, \"Server name cannot be empty\"),\n  createdAt: z8.string().optional(),\n  updatedAt: z8.string().optional(),\n  status: z8.string().optional(),\n  toolkits: z8.array(z8.string()).optional(),\n  tools: z8.array(z8.string()).optional()\n});\nvar ComposioMcpUpdateResponseSchema = z8.object({\n  id: z8.string().min(1, \"Server ID cannot be empty\"),\n  name: z8.string().min(1, \"Server name cannot be empty\"),\n  created_at: z8.string().optional(),\n  updated_at: z8.string().optional(),\n  status: z8.string().optional(),\n  toolkits: z8.array(z8.string()).optional(),\n  tools: z8.array(z8.string()).optional()\n});\n\n// src/utils/transformers/mcp.ts\nfunction transformMcpCreateResponse(response) {\n  const result = CustomCreateResponseSchema.safeParse({\n    id: response.id,\n    name: response.name,\n    createdAt: response.created_at,\n    updatedAt: response.updated_at,\n    status: response.status\n  });\n  if (!result.success) {\n    throw new ValidationError(\"Failed to parse MCP create response\", {\n      cause: result.error\n    });\n  }\n  return result.data;\n}\nfunction transformMcpListResponse(response) {\n  const transformedItems = response.items?.map((item) => ({\n    id: item.id,\n    name: item.name,\n    createdAt: item.created_at,\n    updatedAt: item.updated_at,\n    status: item.status\n  }));\n  const result = McpListResponseSchema.safeParse({\n    items: transformedItems\n  });\n  if (!result.success) {\n    throw new ValidationError(\"Failed to parse MCP list response\", {\n      cause: result.error\n    });\n  }\n  return result.data;\n}\nfunction transformMcpRetrieveResponse(response) {\n  const result = McpRetrieveResponseSchema.safeParse({\n    id: response.id,\n    name: response.name,\n    createdAt: response.created_at,\n    updatedAt: response.updated_at,\n    status: response.status,\n    toolkits: response.toolkits,\n    tools: response.tools,\n    managedAuthViaComposio: response.managed_auth_via_composio\n  });\n  if (!result.success) {\n    throw new ValidationError(\"Failed to parse MCP retrieve response\", {\n      cause: result.error\n    });\n  }\n  return result.data;\n}\nfunction transformMcpDeleteResponse(response) {\n  const result = McpDeleteResponseSchema.safeParse({\n    id: response.id,\n    deleted: response.deleted,\n    message: response.message\n  });\n  if (!result.success) {\n    throw new ValidationError(\"Failed to parse MCP delete response\", {\n      cause: result.error\n    });\n  }\n  return result.data;\n}\nfunction transformMcpUpdateResponse(response) {\n  const result = McpUpdateResponseSchema.safeParse({\n    id: response.id,\n    name: response.name,\n    createdAt: response.created_at,\n    updatedAt: response.updated_at,\n    status: response.status,\n    toolkits: response.toolkits,\n    tools: response.tools\n  });\n  if (!result.success) {\n    throw new ValidationError(\"Failed to parse MCP update response\", {\n      cause: result.error\n    });\n  }\n  return result.data;\n}\nfunction transformMcpGenerateUrlResponse(response) {\n  const result = GenerateURLResponseSchema.safeParse({\n    connectedAccountUrls: response.connected_account_urls,\n    userIdsUrl: response.user_ids_url,\n    mcpUrl: response.mcp_url\n  });\n  if (!result.success) {\n    throw new ValidationError(\"Failed to parse MCP generate URL response\", {\n      cause: result.error\n    });\n  }\n  return result.data;\n}\n\n// src/models/MCP.ts\nvar MCP = class {\n  client;\n  provider;\n  constructor(client, provider) {\n    this.client = client;\n    this.provider = provider;\n    telemetry.instrument(this);\n  }\n  /**\n   * Validates toolkit configurations using Zod schema\n   * @private\n   * @param {MCPToolkitConfig[]} toolkitConfigs - Array of toolkit configurations to validate\n   * @param {MCPAuthOptions} [authOptions] - Authentication options to validate\n   * @throws {ValidationError} If validation fails\n   */\n  validateInputs(toolkitConfigs, authOptions) {\n    const toolkitConfigsResult = MCPToolkitConfigsArraySchema.safeParse(toolkitConfigs);\n    if (toolkitConfigsResult.error) {\n      throw new ValidationError(\"Failed to parse toolkit configurations\", {\n        cause: toolkitConfigsResult.error\n      });\n    }\n    if (authOptions !== void 0) {\n      const authOptionsResult = MCPAuthOptionsSchema.safeParse(authOptions);\n      if (authOptionsResult.error) {\n        throw new ValidationError(\"Failed to parse auth options\", {\n          cause: authOptionsResult.error\n        });\n      }\n    }\n  }\n  /**\n   * Create a new MCP server\n   * @param {string} name - Unique name for the MCP server\n   * @param {MCPToolkitConfig[]} toolkitConfigs - Array of toolkit configurations\n   * @param {MCPAuthOptions} [authOptions] - Authentication configuration options\n   * @returns {Promise<McpServerCreateResponse<T>>} Created server details with instance getter\n   *\n   * @example\n   * ```typescript\n   * const server = await composio.mcp.create(\n   *   \"personal-mcp-server\",\n   *   [\n   *     {\n   *       toolkit: \"GMAIL\",\n   *       authConfigId: \"ac_sdhkjfhjksdk\",\n   *       allowedTools: [\"GMAIL_FETCH_EMAILS\"],\n   *     },\n   *   ],\n   *   { useComposioManagedAuth: true },\n   * );\n   *\n   * // Option 1: Use convenience method on response\n   * const urls = await server.getServer({\n   *   connectedAccountIds: { gmail: \"account_id\" }\n   * });\n   *\n   * // Option 2: Use standalone method later\n   * const urlsLater = await composio.mcp.getServer(server.id, {\n   *   connectedAccountIds: { gmail: \"account_id\" }\n   * });\n   * ```\n   */\n  async create(name, toolkitConfigs, authOptions) {\n    this.validateInputs(toolkitConfigs, authOptions);\n    const toolkits = toolkitConfigs.map((config) => config.toolkit);\n    let mcpServerCreatedResponse;\n    try {\n      mcpServerCreatedResponse = await this.client.mcp.custom.create({\n        name,\n        toolkits,\n        custom_tools: toolkitConfigs.flatMap((config) => config.allowedTools),\n        managed_auth_via_composio: authOptions?.useComposioManagedAuth || false,\n        auth_config_ids: toolkitConfigs.map((config) => config.authConfigId)\n      });\n    } catch (error) {\n      throw new ValidationError(\"Failed to create MCP server\", {\n        cause: error\n      });\n    }\n    const serverResponseResult = ComposioCustomCreateResponseSchema.safeParse(mcpServerCreatedResponse);\n    if (serverResponseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP server creation response\", {\n        cause: serverResponseResult.error\n      });\n    }\n    const camelCaseResponse = transformMcpCreateResponse(mcpServerCreatedResponse);\n    return {\n      ...camelCaseResponse,\n      toolkits,\n      getServer: async (params) => {\n        return this.getServer(camelCaseResponse.id, params, authOptions);\n      }\n    };\n  }\n  /**\n   * Get server URLs for an existing MCP server\n   * @param {string} id - Server UUID\n   * @param {MCPGetServerParams} params - Parameters for getting server URLs\n   * @param {MCPAuthOptions} [authOptions] - Authentication options (optional, will use server's default if not provided)\n   * @returns {Promise<T>} Transformed server URLs in provider-specific format\n   *\n   * @example\n   * ```typescript\n   * // Get URLs for an existing server\n   * const urls = await composio.mcp.getServer(\"server-id\", {\n   *   connectedAccountIds: {\n   *     gmail: \"connected_account_id\"\n   *   }\n   * });\n   * ```\n   */\n  async getServer(id, params, authOptions) {\n    const serverDetails = await this.get(id);\n    const paramsResult = MCPGetServerParamsSchema.safeParse(params);\n    if (paramsResult.error) {\n      throw new ValidationError(\"Failed to parse get server parameters\", {\n        cause: paramsResult.error\n      });\n    }\n    const toolkits = serverDetails.toolkits || [];\n    if (paramsResult.data.connectedAccountIds) {\n      const providedToolkits = Object.keys(paramsResult.data.connectedAccountIds);\n      const invalidToolkits = providedToolkits.filter((toolkit) => !toolkits.includes(toolkit));\n      if (invalidToolkits.length > 0) {\n        throw new ValidationError(\n          `Invalid toolkits provided: ${invalidToolkits.join(\", \")}. Available toolkits are: ${toolkits.join(\", \")}`,\n          {}\n        );\n      }\n    }\n    let data;\n    try {\n      data = await this.client.mcp.generate.url({\n        user_ids: paramsResult.data.userId ? [paramsResult.data.userId] : [],\n        connected_account_ids: paramsResult.data.connectedAccountIds ? Object.values(paramsResult.data.connectedAccountIds) : [],\n        mcp_server_id: id,\n        managed_auth_by_composio: authOptions?.useComposioManagedAuth ?? serverDetails.managedAuthViaComposio ?? false\n      });\n    } catch (error) {\n      throw new ValidationError(\"Failed to generate MCP server URL\", {\n        cause: error\n      });\n    }\n    const urlResponseResult = ComposioGenerateURLResponseSchema.safeParse(data);\n    if (urlResponseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP URL generation response\", {\n        cause: urlResponseResult.error\n      });\n    }\n    const camelCaseData = transformMcpGenerateUrlResponse(data);\n    return this.wrapMcpServerResponse(\n      camelCaseData,\n      serverDetails.name,\n      paramsResult.data.connectedAccountIds ? Object.values(paramsResult.data.connectedAccountIds) : void 0,\n      paramsResult.data.userId ? [paramsResult.data.userId] : void 0,\n      paramsResult.data.connectedAccountIds ? Object.keys(paramsResult.data.connectedAccountIds) : void 0\n    );\n  }\n  /**\n   * List MCP server configurations with filtering options\n   * @param {Object} options - Filtering and pagination options\n   * @param {number} [options.page] - Page number for pagination\n   * @param {number} [options.limit] - Number of items per page\n   * @param {string[]} [options.toolkits] - Filter servers by toolkit names\n   * @param {string[]} [options.authConfigs] - Filter servers by auth config IDs\n   * @param {string} [options.name] - Filter servers by name\n   * @param {string} [options.user] - Filter servers by user ID\n   * @returns {Promise<McpListResponse>} List of MCP servers matching the filters\n   *\n   * @example\n   * ```typescript\n   * // List all servers with pagination\n   * const servers = await composio.mcp.list({\n   *   page: 1,\n   *   limit: 10\n   * });\n   *\n   * // List Gmail and Supabase servers\n   * const filteredServers = await composio.mcp.list({\n   *   toolkits: ['GMAIL', 'SUPABASE'],\n   *   authConfigIds: ['auth_123', 'auth_456']\n   * });\n   * ```\n   */\n  async list(options) {\n    let listResponse;\n    try {\n      listResponse = await this.client.mcp.list({\n        page_no: options.page || 1,\n        limit: options.limit || 10,\n        toolkits: options?.toolkits?.join(\",\") || \"\",\n        auth_config_ids: options?.authConfigs?.join(\",\") || \"\",\n        name: options?.name\n      });\n    } catch (error) {\n      throw new ValidationError(\"Failed to list MCP servers\", {\n        cause: error\n      });\n    }\n    const listResponseResult = ComposioMcpListResponseSchema.safeParse(listResponse);\n    if (listResponseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP server list response\", {\n        cause: listResponseResult.error\n      });\n    }\n    return transformMcpListResponse(listResponse);\n  }\n  /**\n   * Get details of a specific MCP server\n   * @param {string} id - Server UUID\n   * @returns {Promise<McpRetrieveResponse>} Server details\n   *\n   * @example\n   * ```typescript\n   * const serverDetails = await composio.mcp.get('server-uuid');\n   * ```\n   */\n  async get(id) {\n    let retrieveResponse;\n    try {\n      retrieveResponse = await this.client.mcp.retrieve(id);\n    } catch (error) {\n      throw new ValidationError(\"Failed to retrieve MCP server\", {\n        cause: error\n      });\n    }\n    const retrieveResponseResult = McpRetrieveResponseSchema.safeParse(retrieveResponse);\n    if (retrieveResponseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP server retrieve response\", {\n        cause: retrieveResponseResult.error\n      });\n    }\n    return transformMcpRetrieveResponse(retrieveResponse);\n  }\n  /**\n   * Delete an MCP server\n   * @param {string} id - Server UUID\n   * @returns {Promise<McpDeleteResponse>} Deletion response\n   *\n   * @example\n   * ```typescript\n   * const result = await composio.mcp.delete('server-uuid');\n   * ```\n   */\n  async delete(id) {\n    let deleteResponse;\n    try {\n      deleteResponse = await this.client.mcp.delete(id);\n    } catch (error) {\n      throw new ValidationError(\"Failed to delete MCP server\", {\n        cause: error\n      });\n    }\n    const deleteResponseResult = ComposioMcpDeleteResponseSchema.safeParse(deleteResponse);\n    if (deleteResponseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP server delete response\", {\n        cause: deleteResponseResult.error\n      });\n    }\n    return transformMcpDeleteResponse(deleteResponse);\n  }\n  /**\n   * Update an MCP server configuration\n   * @param {string} id - Server UUID\n   * @param {string} name - New unique name for the server\n   * @param {MCPToolkitConfig[]} toolkitConfigs - Array of toolkit configurations\n   * @param {MCPAuthOptions} [authOptions] - Updated authentication options\n   * @returns {Promise<McpUpdateResponse>} Updated server details\n   *\n   * @example\n   * ```typescript\n   * const updatedServer = await composio.mcp.update(\n   *   \"server-uuid\",\n   *   \"my-updated-server\",\n   *   [\n   *     {\n   *       toolkit: \"GMAIL\",\n   *       authConfigId: \"ac_sdhkjfhjksdk\",\n   *       allowedTools: [\"GMAIL_FETCH_EMAILS\"],\n   *     },\n   *   ],\n   *   {\n   *     useComposioManagedAuth: true,\n   *   }\n   * );\n   * ```\n   */\n  async update(id, name, toolkitConfigs, authOptions) {\n    this.validateInputs(toolkitConfigs, authOptions);\n    const toolkits = toolkitConfigs.map((config) => config.toolkit);\n    let updateResponse;\n    try {\n      updateResponse = await this.client.mcp.update(id, {\n        name,\n        toolkits,\n        allowed_tools: toolkitConfigs.flatMap((config) => config.allowedTools),\n        managed_auth_via_composio: authOptions?.useComposioManagedAuth || false\n      });\n    } catch (error) {\n      throw new ValidationError(\"Failed to update MCP server\", {\n        cause: error\n      });\n    }\n    const updateResponseResult = ComposioMcpUpdateResponseSchema.safeParse(updateResponse);\n    if (updateResponseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP server update response\", {\n        cause: updateResponseResult.error\n      });\n    }\n    return transformMcpUpdateResponse(updateResponse);\n  }\n  /**\n   * Generate URL for an MCP server\n   * @param {GenerateURLParams} params - Parameters for URL generation\n   * @returns {Promise<GenerateURLResponse>} Generated URL response\n   *\n   * @example\n   * ```typescript\n   * const urlResponse = await composio.mcp.generateUrl({\n   *   userIds: ['user123'],\n   *   connectedAccountIds: ['account456'],\n   *   mcpServerId: 'server-uuid',\n   *   composioManagedAuth: true\n   * });\n   * ```\n   */\n  async generateUrl(params) {\n    const paramsResult = GenerateURLParamsSchema.safeParse(params);\n    if (paramsResult.error) {\n      throw new ValidationError(\"Failed to parse generateUrl parameters\", {\n        cause: paramsResult.error\n      });\n    }\n    let urlResponse;\n    try {\n      urlResponse = await this.client.mcp.generate.url({\n        mcp_server_id: params.mcpServerId,\n        user_ids: params.userIds,\n        connected_account_ids: params.connectedAccountIds,\n        managed_auth_by_composio: params.composioManagedAuth\n      });\n    } catch (error) {\n      throw new ValidationError(\"Failed to generate MCP URL\", {\n        cause: error\n      });\n    }\n    const responseResult = ComposioGenerateURLResponseSchema.safeParse(urlResponse);\n    if (responseResult.error) {\n      throw new ValidationError(\"Failed to parse MCP URL generation response\", {\n        cause: responseResult.error\n      });\n    }\n    return transformMcpGenerateUrlResponse(urlResponse);\n  }\n  /**\n     * Transform MCP URL response into the appropriate format.\n     * If the provider has a custom transform method, use it.\n     * Otherwise, use the default transformation.\n     *\n     * @param data - The MCP URL response data (in camelCase)\n     * @param serverName - Name of the MCP server\n  \n     * @returns Transformed response in appropriate format\n     */\n  wrapMcpServerResponse(data, serverName, connectedAccountIds, userIds, toolkits) {\n    if (this.provider && typeof this.provider.wrapMcpServerResponse === \"function\") {\n      let snakeCaseData;\n      if (data.connectedAccountUrls?.length) {\n        snakeCaseData = data.connectedAccountUrls.map((url, index) => ({\n          name: serverName + \"-\" + connectedAccountIds?.[index],\n          url\n        }));\n      } else if (data.userIdsUrl?.length) {\n        snakeCaseData = data.userIdsUrl.map((url, index) => ({\n          name: serverName + \"-\" + userIds?.[index],\n          url\n        }));\n      } else {\n        snakeCaseData = [\n          {\n            name: serverName,\n            url: data.mcpUrl\n          }\n        ];\n      }\n      const transformed = this.provider.wrapMcpServerResponse(snakeCaseData);\n      return transformed;\n    }\n    if (connectedAccountIds?.length && data.connectedAccountUrls) {\n      return data.connectedAccountUrls.map((url, index) => ({\n        url: new URL(url),\n        name: `${serverName}-${connectedAccountIds[index]}`,\n        toolkit: toolkits?.[index]\n      }));\n    } else if (userIds?.length && data.userIdsUrl) {\n      return data.userIdsUrl.map((url, index) => ({\n        url: new URL(url),\n        name: `${serverName}-${userIds[index]}`,\n        toolkit: toolkits?.[index]\n      }));\n    }\n    return {\n      url: new URL(data.mcpUrl),\n      name: serverName\n    };\n  }\n};\n\n// src/utils/sdk.ts\nvar userDataPath = () => {\n  try {\n    const path = __require(\"path\");\n    const os = __require(\"os\");\n    return path.join(os.homedir(), COMPOSIO_DIR, USER_DATA_FILE_NAME);\n  } catch (_error) {\n    logger_default.debug(\"Environment\", `Unable to get user data path`);\n    return null;\n  }\n};\nvar getUserDataJson = () => {\n  try {\n    const fs = __require(\"fs\");\n    const data = fs.readFileSync(userDataPath(), \"utf8\");\n    return JSON.parse(data);\n  } catch (_error) {\n    logger_default.debug(\"Environment\", \"No user data file found\");\n    return {};\n  }\n};\nfunction getSDKConfig(baseUrl, apiKey) {\n  const userData = getUserDataJson();\n  const { api_key: apiKeyFromUserConfig, base_url: baseURLFromUserConfig } = userData;\n  const baseURLParsed = baseUrl || getEnvVariable(\"COMPOSIO_BASE_URL\") || baseURLFromUserConfig || DEFAULT_BASE_URL;\n  const apiKeyParsed = apiKey || getEnvVariable(\"COMPOSIO_API_KEY\") || apiKeyFromUserConfig || \"\";\n  if (!apiKeyParsed) {\n    ComposioError.handle(new ComposioNoAPIKeyError(), {\n      exitProcess: true\n    });\n  }\n  logger_default.debug(\"Environment\", `API Key: ${apiKeyParsed}`);\n  logger_default.debug(\"Environment\", `Base URL: ${baseURLParsed}`);\n  return { baseURL: baseURLParsed, apiKey: apiKeyParsed };\n}\n\n// src/utils/version.ts\nimport semver from \"semver\";\nasync function checkForLatestVersionFromNPM(currentVersion) {\n  try {\n    const packageName = \"@composio/core\";\n    const currentVersionFromPackageJson = currentVersion;\n    if (!semver.valid(currentVersionFromPackageJson)) {\n      return;\n    }\n    const prerelease = semver.prerelease(currentVersionFromPackageJson);\n    if (prerelease && (String(prerelease[0]).includes(\"alpha\") || String(prerelease[0]).includes(\"beta\"))) {\n      return;\n    }\n    const response = await fetch(`https://registry.npmjs.org/${packageName}/latest`);\n    const data = await response.json();\n    const latestVersion = data.version;\n    if (semver.gt(latestVersion, currentVersionFromPackageJson) && !IS_DEVELOPMENT_OR_CI) {\n      logger_default.info(\n        `\\u{1F680} Upgrade available! Your composio-core version (${currentVersionFromPackageJson}) is behind. Latest version: ${latestVersion}.`\n      );\n    }\n  } catch (_error) {\n  }\n}\n\n// src/provider/BaseProvider.ts\nvar BaseProvider = class {\n  /**\n   * @internal\n   * The function to execute a tool.\n   * This is set automatically injected by the core SDK.\n   */\n  _globalExecuteToolFn;\n  /**\n   * @internal\n   * Set the function to execute a tool.\n   * This is set automatically and injected by the core SDK.\n   */\n  _setExecuteToolFn(executeToolFn) {\n    this._globalExecuteToolFn = executeToolFn;\n  }\n  /**\n   * @public\n   * Global function to execute a tool.\n   * This function is used by providerds to implement helper functions to execute tools.\n   * This is a 1:1 mapping of the `execute` method in the `Tools` class.\n   * @param {string} toolSlug - The slug of the tool to execute.\n   * @param {ToolExecuteParams} body - The body of the tool execution.\n   * @param {ExecuteToolModifiers} modifers - The modifiers of the tool execution.\n   * @returns {Promise<string>} The result of the tool execution.\n   */\n  executeTool(toolSlug, body, modifers) {\n    if (!this._globalExecuteToolFn) {\n      throw new ComposioGlobalExecuteToolFnNotSetError(\"executeToolFn is not set\");\n    }\n    return this._globalExecuteToolFn(toolSlug, body, modifers);\n  }\n};\nvar BaseNonAgenticProvider = class extends BaseProvider {\n  _isAgentic = false;\n};\nvar BaseAgenticProvider = class extends BaseProvider {\n  _isAgentic = true;\n};\n\n// src/provider/OpenAIProvider.ts\nvar OpenAIProvider = class extends BaseNonAgenticProvider {\n  name = \"openai\";\n  /**\n   * Creates a new instance of the OpenAIProvider.\n   *\n   * This is the default provider for the Composio SDK and is automatically\n   * available without additional installation.\n   *\n   * @example\n   * ```typescript\n   * // The OpenAIProvider is used by default when initializing Composio\n   * const composio = new Composio({\n   *   apiKey: 'your-api-key'\n   * });\n   *\n   * // You can also explicitly specify it\n   * const composio = new Composio({\n   *   apiKey: 'your-api-key',\n   *   provider: new OpenAIProvider()\n   * });\n   * ```\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Transform MCP URL response into OpenAI-specific format.\n   * OpenAI uses the standard format by default.\n   *\n   * @param data - The MCP URL response data\n   * @returns Standard MCP server response format\n   */\n  wrapMcpServerResponse(data) {\n    return data.map((item) => ({\n      url: new URL(item.url),\n      name: item.name\n    }));\n  }\n  /**\n   * Wraps a Composio tool in the OpenAI function calling format.\n   *\n   * This method transforms a Composio tool definition into the format\n   * expected by OpenAI's function calling API.\n   *\n   * @param tool - The Composio tool to wrap\n   * @returns The wrapped tool in OpenAI format\n   *\n   * @example\n   * ```typescript\n   * // Wrap a single tool for use with OpenAI\n   * const composioTool = {\n   *   slug: 'SEARCH_TOOL',\n   *   description: 'Search for information',\n   *   inputParameters: {\n   *     type: 'object',\n   *     properties: {\n   *       query: { type: 'string' }\n   *     },\n   *     required: ['query']\n   *   }\n   * };\n   *\n   * const openAITool = provider.wrapTool(composioTool);\n   * ```\n   */\n  wrapTool = (tool) => {\n    const formattedSchema = {\n      name: tool.slug,\n      description: tool.description,\n      parameters: tool.inputParameters\n    };\n    return {\n      type: \"function\",\n      function: formattedSchema\n    };\n  };\n  /**\n   * Wraps multiple Composio tools in the OpenAI function calling format.\n   *\n   * This method transforms a list of Composio tools into the format\n   * expected by OpenAI's function calling API.\n   *\n   * @param tools - Array of Composio tools to wrap\n   * @returns Array of wrapped tools in OpenAI format\n   *\n   * @example\n   * ```typescript\n   * // Wrap multiple tools for use with OpenAI\n   * const composioTools = [\n   *   {\n   *     slug: 'SEARCH_TOOL',\n   *     description: 'Search for information',\n   *     inputParameters: {\n   *       type: 'object',\n   *       properties: {\n   *         query: { type: 'string' }\n   *       }\n   *     }\n   *   },\n   *   {\n   *     slug: 'WEATHER_TOOL',\n   *     description: 'Get weather information',\n   *     inputParameters: {\n   *       type: 'object',\n   *       properties: {\n   *         location: { type: 'string' }\n   *       }\n   *     }\n   *   }\n   * ];\n   *\n   * const openAITools = provider.wrapTools(composioTools);\n   * ```\n   */\n  wrapTools = (tools) => {\n    return tools.map((tool) => this.wrapTool(tool));\n  };\n  /**\n   * Executes a tool call from OpenAI's chat completion.\n   *\n   * This method processes a tool call from OpenAI's chat completion API,\n   * executes the corresponding Composio tool, and returns the result.\n   *\n   * @param {string} userId - The user ID for authentication and tracking\n   * @param {OpenAI.ChatCompletionMessageToolCall} tool - The tool call from OpenAI\n   * @param {ExecuteToolFnOptions} [options] - Optional execution options\n   * @param {ExecuteToolModifiers} [modifiers] - Optional execution modifiers\n   * @returns {Promise<string>} The result of the tool call as a JSON string\n   *\n   * @example\n   * ```typescript\n   * // Execute a tool call from OpenAI\n   * const toolCall = {\n   *   id: 'call_abc123',\n   *   type: 'function',\n   *   function: {\n   *     name: 'SEARCH_TOOL',\n   *     arguments: '{\"query\":\"composio documentation\"}'\n   *   }\n   * };\n   *\n   * const result = await provider.executeToolCall(\n   *   'user123',\n   *   toolCall,\n   *   { connectedAccountId: 'conn_xyz456' }\n   * );\n   * console.log(JSON.parse(result));\n   * ```\n   */\n  async executeToolCall(userId, tool, options, modifiers) {\n    const payload = {\n      arguments: JSON.parse(tool.function.arguments),\n      connectedAccountId: options?.connectedAccountId,\n      customAuthParams: options?.customAuthParams,\n      userId\n    };\n    const result = await this.executeTool(tool.function.name, payload, modifiers);\n    return JSON.stringify(result);\n  }\n  /**\n   * Handles tool calls from OpenAI's chat completion response.\n   *\n   * This method processes tool calls from an OpenAI chat completion response,\n   * executes each tool call, and returns the results.\n   *\n   * @param {string} userId - The user ID for authentication and tracking\n   * @param {OpenAI.ChatCompletion} chatCompletion - The chat completion response from OpenAI\n   * @param {ExecuteToolFnOptions} [options] - Optional execution options\n   * @param {ExecuteToolModifiers} [modifiers] - Optional execution modifiers\n   * @returns {Promise<string[]>} Array of tool execution results as JSON strings\n   *\n   * @example\n   * ```typescript\n   * // Handle tool calls from a chat completion response\n   * const chatCompletion = {\n   *   choices: [\n   *     {\n   *       message: {\n   *         tool_calls: [\n   *           {\n   *             id: 'call_abc123',\n   *             type: 'function',\n   *             function: {\n   *               name: 'SEARCH_TOOL',\n   *               arguments: '{\"query\":\"composio documentation\"}'\n   *             }\n   *           }\n   *         ]\n   *       }\n   *     }\n   *   ]\n   * };\n   *\n   * const results = await provider.handleToolCalls(\n   *   'user123',\n   *   chatCompletion,\n   *   { connectedAccountId: 'conn_xyz456' }\n   * );\n   * console.log(results); // Array of tool execution results\n   * ```\n   */\n  async handleToolCalls(userId, chatCompletion, options, modifiers) {\n    const outputs = [];\n    for (const message of chatCompletion.choices) {\n      if (message.message.tool_calls) {\n        const toolResult = await this.executeToolCall(\n          userId,\n          message.message.tool_calls[0],\n          options,\n          modifiers\n        );\n        outputs.push({\n          role: \"tool\",\n          tool_call_id: message.message.tool_calls[0].id,\n          content: toolResult\n        });\n      }\n    }\n    return outputs;\n  }\n  /**\n   * Handles all the tool calls from the OpenAI Assistant API.\n   *\n   * This method processes tool calls from an OpenAI Assistant run,\n   * executes each tool call, and returns the tool outputs for submission.\n   *\n   * @param {string} userId - The user ID for authentication and tracking\n   * @param {OpenAI.Beta.Threads.Run} run - The Assistant run object containing tool calls\n   * @param {ExecuteToolFnOptions} [options] - Optional execution options\n   * @param {ExecuteToolModifiers} [modifiers] - Optional execution modifiers\n   * @returns {Promise<OpenAI.Beta.Threads.Runs.RunSubmitToolOutputsParams.ToolOutput[]>} Array of tool outputs for submission\n   *\n   * @example\n   * ```typescript\n   * // Handle tool calls from an OpenAI Assistant run\n   * const run = {\n   *   id: 'run_abc123',\n   *   required_action: {\n   *     submit_tool_outputs: {\n   *       tool_calls: [\n   *         {\n   *           id: 'call_xyz789',\n   *           type: 'function',\n   *           function: {\n   *             name: 'SEARCH_TOOL',\n   *             arguments: '{\"query\":\"composio documentation\"}'\n   *           }\n   *         }\n   *       ]\n   *     }\n   *   }\n   * };\n   *\n   * const toolOutputs = await provider.handleAssistantMessage(\n   *   'user123',\n   *   run,\n   *   { connectedAccountId: 'conn_xyz456' }\n   * );\n   *\n   * // Submit tool outputs back to OpenAI\n   * await openai.beta.threads.runs.submitToolOutputs(\n   *   thread.id,\n   *   run.id,\n   *   { tool_outputs: toolOutputs }\n   * );\n   * ```\n   */\n  async handleAssistantMessage(userId, run, options, modifiers) {\n    const tool_calls = run.required_action?.submit_tool_outputs?.tool_calls || [];\n    const tool_outputs = await Promise.all(\n      tool_calls.map(async (tool_call) => {\n        logger_default.debug(`Executing tool call: ${tool_call.id}`);\n        const tool_response = await this.executeToolCall(\n          userId,\n          tool_call,\n          options,\n          modifiers\n        );\n        logger_default.debug(`Tool call ${tool_call.id} executed with response: ${tool_response}`);\n        return {\n          tool_call_id: tool_call.id,\n          output: JSON.stringify(tool_response)\n        };\n      })\n    );\n    return tool_outputs;\n  }\n  /**\n   * Waits for the assistant stream and handles the tool calls.\n   *\n   * This method processes an OpenAI Assistant stream, handles any tool calls\n   * that require action, and yields each event from the stream. It's designed\n   * for streaming Assistant responses while handling tool calls in real-time.\n   *\n   * @param {string} userId - The user ID for authentication and tracking\n   * @param {OpenAI} client - The OpenAI client instance\n   * @param {Stream<OpenAI.Beta.Assistants.AssistantStreamEvent>} runStream - The Assistant run stream\n   * @param {OpenAI.Beta.Threads.Thread} thread - The thread object\n   * @param {ExecuteToolFnOptions} [options] - Optional execution options\n   * @param {ExecuteToolModifiers} [modifiers] - Optional execution modifiers\n   * @returns {AsyncGenerator<OpenAI.Beta.Assistants.AssistantStreamEvent, void, unknown>} Generator yielding stream events\n   *\n   * @example\n   * ```typescript\n   * // Process an OpenAI Assistant stream with tool calls\n   * const thread = await openai.beta.threads.create();\n   * const runStream = openai.beta.threads.runs.stream(thread.id, {\n   *   assistant_id: 'asst_abc123',\n   *   tools: provider.wrapTools(composioTools)\n   * });\n   *\n   * // Process the stream and handle tool calls\n   * const streamProcessor = provider.waitAndHandleAssistantStreamToolCalls(\n   *   'user123',\n   *   openai,\n   *   runStream,\n   *   thread,\n   *   { connectedAccountId: 'conn_xyz456' }\n   * );\n   *\n   * // Consume the stream events\n   * for await (const event of streamProcessor) {\n   *   if (event.event === 'thread.message.delta') {\n   *     console.log(event.data.delta.content);\n   *   }\n   * }\n   * ```\n   */\n  async *waitAndHandleAssistantStreamToolCalls(userId, client, runStream, thread, options, modifiers) {\n    let runId = null;\n    for await (const event of runStream) {\n      yield event;\n      if (event.event === \"thread.run.created\") {\n        const { id } = event.data;\n        runId = id;\n      }\n      if (!runId) {\n        continue;\n      }\n      if (event.event === \"thread.run.requires_action\") {\n        const toolOutputs = await this.handleAssistantMessage(\n          userId,\n          event.data,\n          options,\n          modifiers\n        );\n        await client.beta.threads.runs.submitToolOutputs(thread.id, runId, {\n          tool_outputs: toolOutputs\n        });\n      }\n      if ([\n        \"thread.run.completed\",\n        \"thread.run.failed\",\n        \"thread.run.cancelled\",\n        \"thread.run.expired\"\n      ].includes(event.event)) {\n        break;\n      }\n    }\n    if (!runId) {\n      throw new Error(\"No run ID found\");\n    }\n    let finalRun = await client.beta.threads.runs.retrieve(thread.id, runId);\n    while ([\"queued\", \"in_progress\", \"requires_action\"].includes(finalRun.status)) {\n      if (finalRun.status === \"requires_action\") {\n        const toolOutputs = await this.handleAssistantMessage(userId, finalRun, options, modifiers);\n        finalRun = await client.beta.threads.runs.submitToolOutputs(thread.id, runId, {\n          tool_outputs: toolOutputs\n        });\n      } else {\n        finalRun = await client.beta.threads.runs.retrieve(thread.id, runId);\n        await new Promise((resolve) => setTimeout(resolve, 500));\n      }\n    }\n  }\n  /**\n   * Waits for the assistant tool calls and handles them.\n   *\n   * This method polls an OpenAI Assistant run until it completes or requires action,\n   * handles any tool calls, and returns the final run object. It's designed for\n   * non-streaming Assistant interactions.\n   *\n   * @param {string} userId - The user ID for authentication and tracking\n   * @param {OpenAI} client - The OpenAI client instance\n   * @param {OpenAI.Beta.Threads.Run} run - The initial run object\n   * @param {OpenAI.Beta.Threads.Thread} thread - The thread object\n   * @param {ExecuteToolFnOptions} [options] - Optional execution options\n   * @param {ExecuteToolModifiers} [modifiers] - Optional execution modifiers\n   * @returns {Promise<OpenAI.Beta.Threads.Run>} The final run object after completion\n   *\n   * @example\n   * ```typescript\n   * // Process an OpenAI Assistant run with tool calls\n   * const thread = await openai.beta.threads.create();\n   * await openai.beta.threads.messages.create(thread.id, {\n   *   role: 'user',\n   *   content: 'Find information about Composio'\n   * });\n   *\n   * let run = await openai.beta.threads.runs.create(thread.id, {\n   *   assistant_id: 'asst_abc123',\n   *   tools: provider.wrapTools(composioTools)\n   * });\n   *\n   * // Wait for the run to complete, handling any tool calls\n   * run = await provider.waitAndHandleAssistantToolCalls(\n   *   'user123',\n   *   openai,\n   *   run,\n   *   thread,\n   *   { connectedAccountId: 'conn_xyz456' }\n   * );\n   *\n   * // Get the final messages after run completion\n   * const messages = await openai.beta.threads.messages.list(thread.id);\n   * console.log(messages.data[0].content);\n   * ```\n   */\n  async waitAndHandleAssistantToolCalls(userId, client, run, thread, options, modifiers) {\n    while ([\"queued\", \"in_progress\", \"requires_action\"].includes(run.status)) {\n      const tool_outputs = await this.handleAssistantMessage(userId, run, options, modifiers);\n      if (run.status === \"requires_action\") {\n        run = await client.beta.threads.runs.submitToolOutputs(thread.id, run.id, {\n          tool_outputs\n        });\n      } else {\n        run = await client.beta.threads.runs.retrieve(thread.id, run.id);\n        await new Promise((resolve) => setTimeout(resolve, 500));\n      }\n    }\n    return run;\n  }\n};\n\n// package.json\nvar version = \"0.1.36-next.10\";\n\n// src/models/Files.ts\nvar Files = class {\n  constructor(client) {\n    this.client = client;\n    telemetry.instrument(this);\n  }\n  /**\n   * Upload a file to S3 and return the file data.\n   * @param filePath - The path to the file to upload or a URL of the file to upload.\n   * @param toolSlug - The slug of the tool that is uploading the file.\n   * @param toolkitSlug - The slug of the toolkit that is uploading the file.\n   * @returns The file data.\n   */\n  async upload({\n    file,\n    toolSlug,\n    toolkitSlug\n  }) {\n    const fileData = await getFileDataAfterUploadingToS3(file, {\n      toolSlug,\n      toolkitSlug,\n      client: this.client\n    });\n    return fileData;\n  }\n  /**\n   * Download a file from S3 and return the file data.\n   * @param s3key - The S3 key of the file to download.\n   * @returns The file data.\n   */\n  async download({\n    toolSlug,\n    s3Url,\n    mimeType\n  }) {\n    const fileDownloadData = await downloadFileFromS3({ toolSlug, s3Url, mimeType });\n    return fileDownloadData;\n  }\n};\n\n// src/composio.ts\nvar Composio = class _Composio {\n  /**\n   * The Composio API client.\n   * @type {ComposioClient}\n   */\n  client;\n  /**\n   * The configuration for the Composio SDK.\n   * @type {ComposioConfig<TProvider>}\n   */\n  config;\n  /**\n   * Core models for Composio.\n   */\n  tools;\n  toolkits;\n  triggers;\n  provider;\n  files;\n  // auth configs\n  authConfigs;\n  // connected accounts\n  connectedAccounts;\n  mcp;\n  /**\n   * Creates a new instance of the Composio SDK.\n   *\n   * The constructor initializes the SDK with the provided configuration options,\n   * sets up the API client, and initializes all core models (tools, toolkits, etc.).\n   *\n   * @param {ComposioConfig<TProvider>} config - Configuration options for the Composio SDK\n   * @param {string} [config.apiKey] - The API key for authenticating with the Composio API\n   * @param {string} [config.baseURL] - The base URL for the Composio API (defaults to production URL)\n   * @param {boolean} [config.allowTracking=true] - Whether to allow anonymous usage analytics\n   * @param {TProvider} [config.provider] - The provider to use for this Composio instance (defaults to OpenAIProvider)\n   *\n   * @example\n   * ```typescript\n   * // Initialize with default configuration\n   * const composio = new Composio();\n   *\n   * // Initialize with custom API key and base URL\n   * const composio = new Composio({\n   *   apiKey: 'your-api-key',\n   *   baseURL: 'https://api.composio.dev'\n   * });\n   *\n   * // Initialize with custom provider\n   * const composio = new Composio({\n   *   apiKey: 'your-api-key',\n   *   provider: new CustomProvider()\n   * });\n   * ```\n   */\n  constructor(config) {\n    const { baseURL: baseURLParsed, apiKey: apiKeyParsed } = getSDKConfig(\n      config?.baseURL,\n      config?.apiKey\n    );\n    if (IS_DEVELOPMENT_OR_CI) {\n      logger_default.debug(`Initializing Composio w API Key: [REDACTED] and baseURL: ${baseURLParsed}`);\n    }\n    this.client = new ComposioClient4({\n      apiKey: apiKeyParsed,\n      baseURL: baseURLParsed,\n      defaultHeaders: config?.defaultHeaders,\n      logLevel: COMPOSIO_LOG_LEVEL\n    });\n    this.config = {\n      ...config,\n      allowTracking: config?.allowTracking ?? true\n    };\n    this.provider = config?.provider ?? new OpenAIProvider();\n    this.tools = new Tools(this.client, this.provider, {\n      autoUploadDownloadFiles: config?.autoUploadDownloadFiles ?? true\n    });\n    this.mcp = new MCP(this.client, this.provider);\n    this.toolkits = new Toolkits(this.client);\n    this.triggers = new Triggers(this.client);\n    this.authConfigs = new AuthConfigs(this.client);\n    this.files = new Files(this.client);\n    this.connectedAccounts = new ConnectedAccounts(this.client);\n    if (this.config.allowTracking) {\n      telemetry.setup({\n        apiKey: apiKeyParsed ?? \"\",\n        baseUrl: baseURLParsed ?? \"\",\n        isAgentic: this.provider?._isAgentic || false,\n        version,\n        isBrowser: typeof window !== \"undefined\",\n        provider: this.provider?.name ?? \"openai\",\n        host: this.config.host\n      });\n    }\n    telemetry.instrument(this);\n    telemetry.instrument(this.provider);\n    checkForLatestVersionFromNPM(version);\n  }\n  /**\n   * Get the Composio SDK client.\n   * @returns {ComposioClient} The Composio API client.\n   */\n  getClient() {\n    if (!this.client) {\n      throw new Error(\"Composio client is not initialized. Please initialize it first.\");\n    }\n    return this.client;\n  }\n  /**\n   * Creates a new instance of the Composio SDK with custom request options while preserving the existing configuration.\n   * This method is particularly useful when you need to:\n   * - Add custom headers for specific requests\n   * - Track request contexts with unique identifiers\n   * - Override default request behavior for a subset of operations\n   *\n   * The new instance inherits all configuration from the parent instance (apiKey, baseURL, provider, etc.)\n   * but allows you to specify custom request options that will be used for all API calls made through this session.\n   *\n   * @param {MergedRequestInit} fetchOptions - Custom request options to be used for all API calls in this session.\n   *                                          This follows the Fetch API RequestInit interface with additional options.\n   * @returns {Composio<TProvider>} A new Composio instance with the custom request options applied.\n   *\n   * @example\n   * ```typescript\n   * // Create a base Composio instance\n   * const composio = new Composio({\n   *   apiKey: 'your-api-key'\n   * });\n   *\n   * // Create a session with request tracking headers\n   * const composioWithCustomHeaders = composio.createSession({\n   *   headers: {\n   *     'x-request-id': '1234567890',\n   *     'x-correlation-id': 'session-abc-123',\n   *     'x-custom-header': 'custom-value'\n   *   }\n   * });\n   *\n   * // Use the session for making API calls with the custom headers\n   * await composioWithCustomHeaders.tools.list();\n   * ```\n   */\n  createSession(options) {\n    return new _Composio({\n      ...this.config,\n      defaultHeaders: options?.headers\n    });\n  }\n};\n\n// src/provider/ComposioProvider.ts\nvar ComposioProvider = class extends BaseNonAgenticProvider {\n  name = \"ComposioProvider\";\n  constructor() {\n    super();\n  }\n  wrapTool = (tool) => {\n    return tool;\n  };\n  wrapTools(tools) {\n    return tools.map((tool) => this.wrapTool(tool));\n  }\n};\n\n// src/utils/jsonSchema.ts\nimport { jsonSchemaToZod } from \"@composio/json-schema-to-zod\";\nvar removeNonRequiredProperties = (schema) => {\n  if (schema && schema.type === \"object\" && schema.required?.length) {\n    schema.properties = Object.fromEntries(\n      Object.entries(schema.properties || {}).filter(\n        ([key]) => schema.required.includes(key)\n      )\n    );\n  }\n  schema.additionalProperties = false;\n  return schema;\n};\nfunction jsonSchemaToZodSchema(jsonSchema, { strict } = {\n  strict: false\n}) {\n  try {\n    let schema = jsonSchema;\n    if (strict && schema) {\n      schema = removeNonRequiredProperties(\n        schema\n      );\n    }\n    const zodSchema = jsonSchemaToZod(schema);\n    return zodSchema;\n  } catch (error) {\n    throw new JsonSchemaToZodError(\"Failed to convert JSON Schema to Zod Schema\", {\n      cause: error\n    });\n  }\n}\n\n// src/models/AuthScheme.ts\nvar AuthScheme = class {\n  /**\n   * Creates a ConnectionData object for OAuth2 authentication\n   * @param params The OAuth2 parameters\n   * @returns ConnectionData object\n   */\n  static OAuth2(params) {\n    return {\n      authScheme: AuthSchemeTypes.OAUTH2,\n      val: {\n        status: ConnectionStatuses.INITIALIZING,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for OAuth1 authentication\n   * @param params The OAuth1 parameters\n   * @returns ConnectionData object\n   */\n  static OAuth1(params) {\n    return {\n      authScheme: AuthSchemeTypes.OAUTH1,\n      val: {\n        status: ConnectionStatuses.INITIALIZING,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Composio Link authentication\n   * @returns ConnectionData object\n   */\n  static ComposioLink(params) {\n    return {\n      authScheme: AuthSchemeTypes.COMPOSIO_LINK,\n      val: {\n        status: ConnectionStatuses.INITIALIZING,\n        ...params ?? {}\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for API Key authentication\n   * @param params The API key parameters\n   * @returns ConnectionData object\n   */\n  static APIKey(params) {\n    return {\n      authScheme: AuthSchemeTypes.API_KEY,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Basic authentication\n   * @param params The basic auth parameters\n   * @returns ConnectionData object\n   */\n  static Basic(params) {\n    return {\n      authScheme: AuthSchemeTypes.BASIC,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Bearer Token authentication\n   * @param params The bearer token parameters\n   * @returns ConnectionData object\n   */\n  static BearerToken(params) {\n    return {\n      authScheme: AuthSchemeTypes.BEARER_TOKEN,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Google Service Account authentication\n   * @param params The Google service account parameters\n   * @returns ConnectionData object\n   */\n  static GoogleServiceAccount(params) {\n    return {\n      authScheme: AuthSchemeTypes.GOOGLE_SERVICE_ACCOUNT,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for No Auth authentication\n   * @returns ConnectionData object\n   */\n  static NoAuth(params) {\n    return {\n      authScheme: AuthSchemeTypes.NO_AUTH,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params ?? {}\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Basic with JWT authentication\n   * @param params The basic with JWT parameters\n   * @returns ConnectionData object\n   */\n  static BasicWithJWT(params) {\n    return {\n      authScheme: AuthSchemeTypes.BASIC_WITH_JWT,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Cal.com authentication\n   * @returns ConnectionData object\n   */\n  static CalcomAuth(params) {\n    return {\n      authScheme: AuthSchemeTypes.CALCOM_AUTH,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params ?? {}\n      }\n    };\n  }\n  /**\n   * Creates a ConnectionData object for Bill.com authentication\n   * @param params The Bill.com auth parameters\n   * @returns ConnectionData object\n   */\n  static BillcomAuth(params) {\n    return {\n      authScheme: AuthSchemeTypes.BILLCOM_AUTH,\n      val: {\n        status: ConnectionStatuses.ACTIVE,\n        ...params\n      }\n    };\n  }\n};\nexport {\n  AuthConfigErrorCodes,\n  AuthConfigListParamsSchema,\n  AuthConfigListResponseSchema,\n  AuthConfigRetrieveResponseSchema,\n  AuthConfigTypes,\n  AuthConfigUpdateParamsSchema,\n  AuthCustomConfigUpdateParamsSchema,\n  AuthDefaultConfigUpdateParamsSchema,\n  AuthScheme,\n  AuthSchemeEnum,\n  AuthSchemeTypes,\n  BaseAgenticProvider,\n  BaseNonAgenticProvider,\n  BillcomAuthConnectionDataSchema,\n  Composio,\n  ComposioAuthConfigNotFoundError,\n  ComposioConnectedAccountNotFoundError,\n  ComposioCustomCreateResponseSchema,\n  ComposioCustomToolsNotInitializedError,\n  ComposioError,\n  ComposioGenerateURLParamsSchema,\n  ComposioGenerateURLResponseSchema,\n  ComposioGlobalExecuteToolFnNotSetError,\n  ComposioInvalidExecuteFunctionError,\n  ComposioInvalidModifierError,\n  ComposioLinkConnectionDataSchema,\n  ComposioMcpDeleteResponseSchema,\n  ComposioMcpListResponseSchema,\n  ComposioMcpRetrieveResponseSchema,\n  ComposioMcpUpdateResponseSchema,\n  ComposioMultipleConnectedAccountsError,\n  ComposioNoAPIKeyError,\n  ComposioProvider,\n  ComposioProviderNotDefinedError,\n  ComposioToolExecutionError,\n  ComposioToolNotFoundError,\n  ComposioToolkitFetchError,\n  ComposioToolkitNotFoundError,\n  ConnectedAccountAuthConfigSchema,\n  ConnectedAccountErrorCodes,\n  ConnectedAccountListParamsSchema,\n  ConnectedAccountListResponseSchema,\n  ConnectedAccountRetrieveResponseSchema,\n  ConnectedAccountStatusSchema,\n  ConnectedAccountStatuses,\n  ConnectionDataSchema,\n  ConnectionRequestErrorCodes,\n  ConnectionRequestFailedError,\n  ConnectionRequestTimeoutError,\n  ConnectionStatuses,\n  CreateAuthConfigParamsSchema,\n  CreateAuthConfigResponseSchema,\n  CreateComposioManagedAuthConfigParamsSchema,\n  CreateConnectedAccountOptionsSchema,\n  CreateConnectedAccountParamsSchema,\n  CreateConnectedAccountResponseSchema,\n  CreateCustomAuthConfigParamsSchema,\n  CustomAuthParamsSchema,\n  CustomCreateResponseSchema,\n  DefaultCreateConnectedAccountParamsSchema,\n  GenerateURLParamsSchema,\n  GenerateURLResponseSchema,\n  IncomingTriggerPayloadSchema,\n  JSONSchemaPropertySchema,\n  JsonSchemaToZodError,\n  MCP,\n  MCPAuthOptionsSchema,\n  MCPGenerateURLParamsSchema,\n  MCPGetServerParamsSchema,\n  MCPMultiAppServerSchema,\n  MCPServerCreateResponseSchema,\n  MCPServerListResponseSchema,\n  MCPServerSchema,\n  MCPServerUpdateParamsSchema,\n  MCPSingleAppServerSchema,\n  MCPToolkitConfigSchema,\n  MCPToolkitConfigsArraySchema,\n  McpDeleteResponseSchema,\n  McpListResponseSchema,\n  McpRetrieveResponseSchema,\n  McpUpdateResponseSchema,\n  Oauth1ActiveConnectionDataSchema,\n  Oauth1ConnectionDataSchema,\n  Oauth1ExpiredConnectionDataSchema,\n  Oauth1FailedConnectionDataSchema,\n  Oauth1InactiveConnectionDataSchema,\n  Oauth1InitiatedConnectionDataSchema,\n  Oauth1InitiatingConnectionDataSchema,\n  Oauth2ActiveConnectionDataSchema,\n  Oauth2ConnectionDataSchema,\n  Oauth2ExpiredConnectionDataSchema,\n  Oauth2FailedConnectionDataSchema,\n  Oauth2InactiveConnectionDataSchema,\n  Oauth2InitiatedConnectionDataSchema,\n  Oauth2InitiatingConnectionDataSchema,\n  OpenAIProvider,\n  RedirectableAuthSchemeSchema,\n  SDKErrorCodes,\n  ToolErrorCodes,\n  ToolExecuteParamsSchema,\n  ToolExecuteResponseSchema,\n  ToolKitItemSchema,\n  ToolKitListResponseSchema,\n  ToolKitMetaSchema,\n  ToolListParamsSchema,\n  ToolListResponseSchema,\n  ToolProxyParamsSchema,\n  ToolSchema,\n  ToolkitAuthConfigDetailsSchema,\n  ToolkitAuthFieldSchema,\n  ToolkitAuthFieldsResponseSchema,\n  ToolkitCategorySchema,\n  ToolkitErrorCodes,\n  ToolkitMangedByEnumSchema,\n  ToolkitRetrieveCategoriesResponseSchema,\n  ToolkitRetrieveResponseSchema,\n  ToolkitSchema,\n  ToolkitSortByEnumSchema,\n  ToolkitsListParamsSchema,\n  TriggerInstanceListActiveParamsSchema,\n  TriggerInstanceListActiveResponseItemSchema,\n  TriggerInstanceListActiveResponseSchema,\n  TriggerInstanceManageDeleteResponseSchema,\n  TriggerInstanceManageUpdateParamsSchema,\n  TriggerInstanceManageUpdateResponseSchema,\n  TriggerInstanceUpsertParamsSchema,\n  TriggerInstanceUpsertResponseSchema,\n  TriggerStatusEnum,\n  TriggerStatuses,\n  TriggerSubscribeParamSchema,\n  TriggerTypeSchema,\n  TriggersTypeListParamsSchema,\n  TriggersTypeListResponseSchema,\n  ValidationError,\n  ValidationErrorCodes,\n  constants_exports as constants,\n  createConnectionRequest,\n  jsonSchemaToZodSchema,\n  logger_default as logger,\n  removeNonRequiredProperties\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}