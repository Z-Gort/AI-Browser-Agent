{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n    OPENAI_API_KEY: z.string().min(1),\n    COMPOSIO_API_KEY: z.string().min(1),\n    ANTHROPIC_API_KEY: z.string().min(1),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n    NEXT_PUBLIC_NOTION_AUTH_CONFIG_ID: z.string().min(1),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    OPENAI_API_KEY: process.env.OPENAI_API_KEY,\n    COMPOSIO_API_KEY: process.env.COMPOSIO_API_KEY,\n    ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY,\n    NEXT_PUBLIC_NOTION_AUTH_CONFIG_ID:\n      process.env.NEXT_PUBLIC_NOTION_AUTH_CONFIG_ID,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,wRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,UAAU,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa;QACtD,gBAAgB,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC/B,kBAAkB,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,mBAAmB,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACpC;IAEA;;;;GAIC,GACD,QAAQ;QACN,qCAAqC;QACrC,mCAAmC,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACpD;IAEA;;;GAGC,GACD,YAAY;QACV,QAAQ;QACR,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QAC1C,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;QAChD,iCAAiC;IAGnC;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { auth } from '@clerk/nextjs/server'\nimport { initTRPC, TRPCError } from '@trpc/server'\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    ...opts,\n    auth: await auth(),\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\nconst isAuthed = t.middleware(({ next, ctx }) => {\n  if (!ctx.auth.userId) {\n    throw new TRPCError({ code: 'UNAUTHORIZED' })\n  }\n  return next({\n    ctx: {\n      auth: ctx.auth,\n    },\n  })\n})\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure;\nexport const protectedProcedure = t.procedure.use(isAuthed)\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AACA;AACA;AACA;AAAA;;;;;AAaO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,GAAG,IAAI;QACP,MAAM,MAAM,CAAA,GAAA,qYAAA,CAAA,OAAI,AAAD;IACjB;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,2PAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,kMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,yLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAEA,MAAM,WAAW,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE;IAC1C,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;QACpB,MAAM,IAAI,0PAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,MAAM,IAAI,IAAI;QAChB;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAQjD,MAAM,mBAAmB,EAAE,MAAM;AASjC,MAAM,kBAAkB,EAAE,SAAS;AACnC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/lib/agent-instructions.ts"],"sourcesContent":["export const CHAT_AGENT_INSTRUCTIONS = `\n## Prompt\n\nYou are a highly capable AI assistant designed to help users build with tools.\n\n### Your Role:\n- Act as a hands-on collaborator who actively uses available tools to solve problems and build things for the user.\n- When tools are available, **use them liberally and appropriately**‚Äîyour job is to get things done.\n\n### Your Style:\n- Friendly, helpful, and concise.\n- Focus on clear steps, progress updates, and successful outcomes.\n\n### Your Behavior:\n1. **When given a task:**\n   - Break it down into clear, actionable steps (only if the task is complex).\n   - Inform the user of your plan before starting.\n\n2. **While executing:**\n   - Use tools continuously and proactively.\n   - After each step, evaluate:\n     - Did the step succeed?\n     - Are we closer to the goal?\n     - If something fails, revise your plan and keep going.\n\n3. **Important Rules:**\n   - **DO NOT HAND OVER YOUR TURN UNTIL THE TASK IS COMPLETED.**\n   - Always keep thinking and calling tools until the goal is achieved.\n`;\n"],"names":[],"mappings":";;;AAAO,MAAM,0BAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BxC,CAAC","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/app/api/chat/route.ts"],"sourcesContent":["import { auth } from \"@clerk/nextjs/server\";\nimport { convertToCoreMessages, type Message } from \"ai\";\nimport { Composio } from \"@composio/core\";\nimport { MastraProvider } from \"@composio/mastra\";\nimport { anthropic } from \"@ai-sdk/anthropic\";\nimport { Agent } from \"@mastra/core/agent\";\nimport { NextRequest } from \"next/server\";\nimport { CHAT_AGENT_INSTRUCTIONS } from \"~/lib/agent-instructions\";\n\nexport const composio = new Composio({\n  provider: new MastraProvider(),\n});\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    const body: unknown = await req.json();\n    const { messages, enabledToolSlugs = [] } = body as {\n      messages: Message[];\n      enabledToolSlugs: string[];\n    };\n\n    const tools = await composio.tools.get(\n      userId,\n      {\n        toolkits: enabledToolSlugs,\n        limit: 30,\n      },\n      {\n        beforeExecute: ({ toolSlug, toolkitSlug, params }) => {\n          console.log(\n            `üîß Tool about to execute: ${toolSlug} from ${toolkitSlug}`,\n          );\n          return params;\n        },\n      },\n    );\n\n    console.log(\"üîç Tools:\", Object.keys(tools));\n\n    const coreMessages = convertToCoreMessages(messages);\n\n    const chatAgent = new Agent({\n      name: \"Chat Agent\",\n      instructions: CHAT_AGENT_INSTRUCTIONS,\n      model: anthropic(\"claude-sonnet-4-20250514\"),\n      tools,\n    });\n\n    const result = await chatAgent.stream(coreMessages);\n    return result.toDataStreamResponse();\n  } catch (error) {\n    console.error(\"Chat API error:\", error);\n    return new Response(\"Internal server error\", { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAEO,MAAM,WAAW,IAAI,mOAAA,CAAA,WAAQ,CAAC;IACnC,UAAU,IAAI,iWAAA,CAAA,iBAAc;AAC9B;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,qYAAA,CAAA,OAAI,AAAD;QAE5B,IAAI,CAAC,QAAQ;YACX,OAAO,IAAI,SAAS,gBAAgB;gBAAE,QAAQ;YAAI;QACpD;QAEA,MAAM,OAAgB,MAAM,IAAI,IAAI;QACpC,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,EAAE,GAAG;QAK5C,MAAM,QAAQ,MAAM,SAAS,KAAK,CAAC,GAAG,CACpC,QACA;YACE,UAAU;YACV,OAAO;QACT,GACA;YACE,eAAe,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE;gBAC/C,QAAQ,GAAG,CACT,CAAC,0BAA0B,EAAE,SAAS,MAAM,EAAE,aAAa;gBAE7D,OAAO;YACT;QACF;QAGF,QAAQ,GAAG,CAAC,aAAa,OAAO,IAAI,CAAC;QAErC,MAAM,eAAe,CAAA,GAAA,iPAAA,CAAA,wBAAqB,AAAD,EAAE;QAE3C,MAAM,YAAY,IAAI,kJAAA,CAAA,QAAK,CAAC;YAC1B,MAAM;YACN,cAAc,qIAAA,CAAA,0BAAuB;YACrC,OAAO,CAAA,GAAA,uPAAA,CAAA,YAAS,AAAD,EAAE;YACjB;QACF;QAEA,MAAM,SAAS,MAAM,UAAU,MAAM,CAAC;QACtC,OAAO,OAAO,oBAAoB;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,IAAI,SAAS,yBAAyB;YAAE,QAAQ;QAAI;IAC7D;AACF","debugId":null}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/routers/integrations.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { createTRPCRouter, protectedProcedure } from \"~/server/api/trpc\";\nimport { composio } from \"~/app/api/chat/route\";\nimport { env } from \"~/env\";\nimport { TRPCError } from \"@trpc/server\";\n\ntype ToolkitResponse = {\n  name: string;\n  slug: string;\n  meta?: {\n    description?: string;\n    logo?: string;\n    categories?: Array<{\n      name: string;\n      slug: string;\n    }>;\n  };\n};\n\ntype ConnectedAccount = {\n  id: string;\n  toolkit: {\n    slug: string;\n  };\n};\n\n// Type for the connection status response\ntype ConnectionStatus = {\n  id: string;\n  status: \"INITIALIZING\" | \"INITIATED\" | \"ACTIVE\" | \"FAILED\" | \"EXPIRED\";\n  authConfig: {\n    id: string;\n    isComposioManaged: boolean;\n    isDisabled: boolean;\n  };\n  data: Record<string, unknown>;\n  params?: Record<string, unknown>;\n};\n\nconst SUPPORTED_TOOLKITS = [\n  {\n    slug: \"NOTION\",\n    authConfigId: env.NEXT_PUBLIC_NOTION_AUTH_CONFIG_ID,\n  },\n];\n\nexport const integrationsRouter = createTRPCRouter({\n  getAll: protectedProcedure.query(async ({ ctx }) => {\n    try {\n      const userId = ctx.auth.userId;\n\n      const connectedAccounts = await composio.connectedAccounts.list({\n        userIds: [userId],\n      });\n\n      const connectedToolkitMap = new Map<string, string>(); // slug -> connectionId\n\n      connectedAccounts.items.forEach((account: ConnectedAccount) => {\n        connectedToolkitMap.set(account.toolkit.slug.toUpperCase(), account.id);\n      });\n\n      // Fetch all toolkits in parallel\n      const toolkitPromises = SUPPORTED_TOOLKITS.map(async (toolkitConfig) => {\n        try {\n          const toolkit = (await composio.toolkits.get(\n            toolkitConfig.slug,\n          )) as ToolkitResponse;\n          const upperSlug = toolkitConfig.slug.toUpperCase();\n          const connectionId = connectedToolkitMap.get(upperSlug);\n\n          return {\n            id: toolkit.slug.toLowerCase(),\n            name: toolkit.name,\n            slug: toolkit.slug,\n            description: toolkit.meta?.description,\n            logo: toolkit.meta?.logo,\n            categories: toolkit.meta?.categories,\n            isConnected: !!connectionId,\n            connectionId: connectionId ?? undefined,\n          };\n        } catch (error) {\n          console.error(\n            `Failed to fetch toolkit ${toolkitConfig.slug}:`,\n            error,\n          );\n          return null;\n        }\n      });\n\n      const results = await Promise.all(toolkitPromises);\n      const integrations = results.filter((t) => t !== null);\n\n      return { integrations };\n    } catch (error) {\n      console.error(\"Failed to fetch toolkits:\", error);\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to fetch integrations.\",\n      });\n    }\n  }),\n\n  getConnectionStatus: protectedProcedure\n    .input(z.object({ connectionId: z.string() }))\n    .query(async ({ input }) => {\n      const { connectionId } = input;\n\n      try {\n        // Wait for connection to complete (with timeout)\n        const connection = (await composio.connectedAccounts.waitForConnection(\n          connectionId,\n        )) as ConnectionStatus;\n\n        return {\n          id: connection.id,\n          status: connection.status,\n          authConfig: connection.authConfig,\n          data: connection.data,\n          params: connection.params,\n        };\n      } catch (error) {\n        console.error(\"Failed to get connection status:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to get connection status\",\n        });\n      }\n    }),\n\n  connect: protectedProcedure\n    .input(z.object({ integrationId: z.string() }))\n    .mutation(async ({ input, ctx }) => {\n      try {\n        const userId = ctx.auth.userId;\n        const { integrationId } = input;\n\n        const toolkitConfig = SUPPORTED_TOOLKITS.find(\n          (config) => config.slug.toLowerCase() === integrationId.toLowerCase(),\n        );\n\n        if (!toolkitConfig) {\n          throw new Error(`Integration ${integrationId} not found.`);\n        }\n\n        // Initiate connection with Composio\n        const connectionRequest = await composio.connectedAccounts.initiate(\n          userId,\n          toolkitConfig.authConfigId,\n        );\n\n        return {\n          redirectUrl: connectionRequest.redirectUrl,\n          connectionId: connectionRequest.id,\n        };\n      } catch (error) {\n        console.error(\"Failed to initiate connection:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to initiate connection\",\n        });\n      }\n    }),\n\n  disconnect: protectedProcedure\n    .input(z.object({ connectionId: z.string() }))\n    .mutation(async ({ input }) => {\n      try {\n        const { connectionId } = input;\n        await composio.connectedAccounts.delete(connectionId);\n      } catch (error) {\n        console.error(\"Failed to delete connection:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete connection\",\n        });\n      }\n    }),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/root.ts"],"sourcesContent":["import { integrationsRouter } from \"~/server/api/routers/integrations\";\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  integrations: integrationsRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,cAAc,iJAAA,CAAA,qBAAkB;AAClC;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 601, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"~/env\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) => {\n  return fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }: { path?: string; error: Error }) => {\n            console.error(\n              `‚ùå tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`,\n            );\n          }\n        : undefined,\n  });\n};\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC;IACf,OAAO,CAAA,GAAA,iQAAA,CAAA,sBAAmB,AAAD,EAAE;QACzB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAmC;YAC/C,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR;AACF","debugId":null}}]
}