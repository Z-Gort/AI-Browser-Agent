{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n    OPENAI_API_KEY: z.string().min(1),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n    OPENAI_API_KEY: process.env.OPENAI_API_KEY,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,wRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,UAAU,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa;QACtD,gBAAgB,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACjC;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,QAAQ;QACR,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAE5C;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { auth } from '@clerk/nextjs/server'\nimport { initTRPC, TRPCError } from '@trpc/server'\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    ...opts,\n    auth: await auth(),\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\nconst isAuthed = t.middleware(({ next, ctx }) => {\n  if (!ctx.auth.userId) {\n    throw new TRPCError({ code: 'UNAUTHORIZED' })\n  }\n  return next({\n    ctx: {\n      auth: ctx.auth,\n    },\n  })\n})\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure;\nexport const protectedProcedure = t.procedure.use(isAuthed)\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AACA;AACA;AACA;AAAA;;;;;AAaO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,GAAG,IAAI;QACP,MAAM,MAAM,CAAA,GAAA,qYAAA,CAAA,OAAI,AAAD;IACjB;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,2PAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,kMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,yLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAEA,MAAM,WAAW,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE;IAC1C,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;QACpB,MAAM,IAAI,0PAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,MAAM,IAAI,IAAI;QAChB;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAQjD,MAAM,mBAAmB,EAAE,MAAM;AASjC,MAAM,kBAAkB,EAAE,SAAS;AACnC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure, protectedProcedure } from \"~/server/api/trpc\";\n\n// Mocked DB\ninterface Post {\n  id: number;\n  name: string;\n}\nconst posts: Post[] = [\n  {\n    id: 1,\n    name: \"Hello World\",\n  },\n];\n\nexport const postRouter = createTRPCRouter({\n  hello: protectedProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ input }) => {\n      const post: Post = {\n        id: posts.length + 1,\n        name: input.name,\n      };\n      posts.push(post);\n      return post;\n    }),\n\n  getLatest: publicProcedure.query(() => {\n    return posts.at(-1) ?? null;\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAOA,MAAM,QAAgB;IACpB;QACE,IAAI;QACJ,MAAM;IACR;CACD;AAEM,MAAM,aAAa,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,8HAAA,CAAA,qBAAkB,CACtB,KAAK,CAAC,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CAAC,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACxB,MAAM,OAAa;YACjB,IAAI,MAAM,MAAM,GAAG;YACnB,MAAM,MAAM,IAAI;QAClB;QACA,MAAM,IAAI,CAAC;QACX,OAAO;IACT;IAEF,WAAW,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QAC/B,OAAO,MAAM,EAAE,CAAC,CAAC,MAAM;IACzB;AACF","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/mastra/agents/chat-agent.ts"],"sourcesContent":["import { openai } from \"@ai-sdk/openai\";\nimport { Agent } from \"@mastra/core/agent\";\n\nexport const chatAgent = new Agent({\n  name: \"Chat Agent\",\n  instructions: `\n    You are a helpful AI assistant. You can have conversations with users and answer questions.\n    \n    Be friendly, helpful, and concise in your responses. If you don't know something, \n    say so honestly. You can help with a wide variety of topics including:\n    - General questions and information\n    - Coding and programming help\n    - Creative writing and brainstorming\n    - Problem-solving and analysis\n    \n    Always aim to be accurate and helpful.\n  `,\n  model: openai(\"gpt-4o-mini\"),\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAEO,MAAM,YAAY,IAAI,kJAAA,CAAA,QAAK,CAAC;IACjC,MAAM;IACN,cAAc,CAAC;;;;;;;;;;;EAWf,CAAC;IACD,OAAO,CAAA,GAAA,iPAAA,CAAA,SAAM,AAAD,EAAE;AAChB","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/mastra/index.ts"],"sourcesContent":["import { Mastra } from \"@mastra/core\";\nimport { chatAgent } from \"./agents/chat-agent\";\n\nexport const mastra = new Mastra({\n  agents: { chatAgent },\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;;AAEO,MAAM,SAAS,IAAI,gIAAA,CAAA,SAAM,CAAC;IAC/B,QAAQ;QAAE,WAAA,0IAAA,CAAA,YAAS;IAAC;AACtB","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/routers/chat.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { mastra } from \"~/mastra\";\n\nexport const chatRouter = createTRPCRouter({\n  sendMessage: publicProcedure\n    .input(\n      z.object({\n        message: z.string().min(1, \"Message cannot be empty\"),\n      }),\n    )\n    .mutation(async ({ input }) => {\n      try {\n        const chatAgent = mastra.getAgent(\"chatAgent\");\n        const result = await chatAgent.generate(input.message);\n\n        return {\n          response: result.text,\n        };\n      } catch (error) {\n        console.error(\"Chat error:\", error);\n        throw new Error(\"Failed to process chat message\");\n      }\n    }),\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;;;;;AAEO,MAAM,aAAa,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,aAAa,8HAAA,CAAA,kBAAe,CACzB,KAAK,CACJ,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,SAAS,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,IAED,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACxB,IAAI;YACF,MAAM,YAAY,wHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC;YAClC,MAAM,SAAS,MAAM,UAAU,QAAQ,CAAC,MAAM,OAAO;YAErD,OAAO;gBACL,UAAU,OAAO,IAAI;YACvB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,eAAe;YAC7B,MAAM,IAAI,MAAM;QAClB;IACF;AACJ","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"~/server/api/routers/post\";\nimport { chatRouter } from \"~/server/api/routers/chat\";\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n  chat: chatRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,yIAAA,CAAA,aAAU;IAChB,MAAM,yIAAA,CAAA,aAAU;AAClB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"~/env\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) => {\n  return fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }: { path?: string; error: Error }) => {\n            console.error(\n              `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`,\n            );\n          }\n        : undefined,\n  });\n};\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC;IACf,OAAO,CAAA,GAAA,iQAAA,CAAA,sBAAmB,AAAD,EAAE;QACzB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAmC;YAC/C,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR;AACF","debugId":null}}]
}