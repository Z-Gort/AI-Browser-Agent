{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/lib/agent-instructions.ts"],"sourcesContent":["export const CHAT_AGENT_INSTRUCTIONS = `\nYou are a helpful AI assistant. You can have conversations with users and answer questions.\n\nBe friendly, helpful, and concise in your responses. If you don't know something, \nsay so honestly. You can help with a wide variety of topics including:\n- General questions and information\n- Coding and programming help\n- Creative writing and brainstorming\n- Problem-solving and analysis\n\nWhen you have access to external tools, use them appropriately to help users with their tasks.\nAlways aim to be accurate and helpful.\n`;\n"],"names":[],"mappings":";;;AAAO,MAAM,0BAA0B,CAAC;;;;;;;;;;;;AAYxC,CAAC","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///Users/zachgorton/Downloads/browser-cursor/backend/src/app/api/chat/route.ts"],"sourcesContent":["import { auth } from \"@clerk/nextjs/server\";\nimport { convertToCoreMessages, type Message } from \"ai\";\nimport { Composio } from \"@composio/core\";\nimport { MastraProvider } from \"@composio/mastra\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { Agent } from \"@mastra/core/agent\";\nimport { CHAT_AGENT_INSTRUCTIONS } from \"~/lib/agent-instructions\";\n\nexport const composio = new Composio({\n  provider: new MastraProvider(),\n});\n\nexport async function POST(req: Request) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId) {\n      console.log(\"Unauthorized\");\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    const body: unknown = await req.json();\n    const { messages, enabledToolSlugs = [] } = body as {\n      messages: Message[];\n      enabledToolSlugs: string[];\n    };\n\n    const tools = await composio.tools.get(userId, { toolkits: enabledToolSlugs })\n\n    console.log(\"GOTTEN TOOLS\", tools)\n\n    const coreMessages = convertToCoreMessages(messages);\n\n    const chatAgent = new Agent({\n      name: \"Chat Agent\",\n      instructions: CHAT_AGENT_INSTRUCTIONS,\n      model: openai(\"gpt-4o-mini\"),\n      tools,\n    });\n\n    const result = await chatAgent.stream(coreMessages);\n    return result.toDataStreamResponse();\n  } catch (error) {\n    console.error(\"Chat API error:\", error);\n    return new Response(\"Internal server error\", { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAEO,MAAM,WAAW,IAAI,mOAAA,CAAA,WAAQ,CAAC;IACnC,UAAU,IAAI,iWAAA,CAAA,iBAAc;AAC9B;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,qYAAA,CAAA,OAAI,AAAD;QAE5B,IAAI,CAAC,QAAQ;YACX,QAAQ,GAAG,CAAC;YACZ,OAAO,IAAI,SAAS,gBAAgB;gBAAE,QAAQ;YAAI;QACpD;QAEA,MAAM,OAAgB,MAAM,IAAI,IAAI;QACpC,MAAM,EAAE,QAAQ,EAAE,mBAAmB,EAAE,EAAE,GAAG;QAK5C,MAAM,QAAQ,MAAM,SAAS,KAAK,CAAC,GAAG,CAAC,QAAQ;YAAE,UAAU;QAAiB;QAE5E,QAAQ,GAAG,CAAC,gBAAgB;QAE5B,MAAM,eAAe,CAAA,GAAA,iPAAA,CAAA,wBAAqB,AAAD,EAAE;QAE3C,MAAM,YAAY,IAAI,kJAAA,CAAA,QAAK,CAAC;YAC1B,MAAM;YACN,cAAc,qIAAA,CAAA,0BAAuB;YACrC,OAAO,CAAA,GAAA,iPAAA,CAAA,SAAM,AAAD,EAAE;YACd;QACF;QAEA,MAAM,SAAS,MAAM,UAAU,MAAM,CAAC;QACtC,OAAO,OAAO,oBAAoB;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,IAAI,SAAS,yBAAyB;YAAE,QAAQ;QAAI;IAC7D;AACF","debugId":null}}]
}